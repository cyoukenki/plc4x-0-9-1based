/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.socketcan.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.socketcan.readwrite.*;

import org.apache.plc4x.java.socketcan.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SocketCANFrameIO implements MessageIO<SocketCANFrame, SocketCANFrame> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SocketCANFrameIO.class);

    @Override
    public SocketCANFrame parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return SocketCANFrameIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SocketCANFrame value, Object... args) throws ParseException {
        SocketCANFrameIO.staticSerialize(writeBuffer, value);
    }

    public static SocketCANFrame staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SocketCANFrame");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (rawId)
int rawId = readBuffer.readInt("rawId", 32) ;
        // Virtual field (Just declare a local variable so we can access it in the parser)
        int identifier = (int) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.readIdentifier(rawId));

        // Virtual field (Just declare a local variable so we can access it in the parser)
        boolean extended = (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isExtended(rawId));

        // Virtual field (Just declare a local variable so we can access it in the parser)
        boolean remote = (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isRemote(rawId));

        // Virtual field (Just declare a local variable so we can access it in the parser)
        boolean error = (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isError(rawId));

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short size = readBuffer.readUnsignedShort("size", 8);

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }
        // Byte Array field (data)
        int numberOfBytes = size;
        byte[] data = readBuffer.readByteArray("data", numberOfBytes);

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((8) - ((COUNT(data))));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("SocketCANFrame");
        // Create the instance
        return new SocketCANFrame(rawId, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SocketCANFrame _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SocketCANFrame");

        // Simple Field (rawId)
        int rawId = (int) _value.getRawId();
        writeBuffer.writeInt("rawId", 32, ((Number) (rawId)).intValue());

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short size = (short) (COUNT(_value.getData()));
        writeBuffer.writeUnsignedShort("size", 8, ((Number) (size)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x0).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x0).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x0).shortValue());

        // Array Field (data)
        if(_value.getData() != null) {
            // Byte Array field (data)
            writeBuffer.writeByteArray("data", _value.getData());
        }

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((8) - ((COUNT(_value.getData()))));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("SocketCANFrame");
    }

}
