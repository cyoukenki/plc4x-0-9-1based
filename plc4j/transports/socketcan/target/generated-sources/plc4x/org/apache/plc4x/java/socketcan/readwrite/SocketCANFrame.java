/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.socketcan.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.socketcan.readwrite.io.*;
import org.apache.plc4x.java.socketcan.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SocketCANFrame implements Message {


    // Properties.
    private final int rawId;
    private final byte[] data;

    public SocketCANFrame(int rawId, byte[] data) {
        this.rawId = rawId;
        this.data = data;
    }

    public int getRawId() {
        return rawId;
    }

    public byte[] getData() {
        return data;
    }

    public int getIdentifier() {
        return (int) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.readIdentifier(rawId));
    }

    public boolean getExtended() {
        return (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isExtended(rawId));
    }

    public boolean getRemote() {
        return (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isRemote(rawId));
    }

    public boolean getError() {
        return (boolean) (org.apache.plc4x.java.transport.socketcan.helper.HeaderParser.isError(rawId));
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        SocketCANFrame _value  = this;

        // Simple field (rawId)
        lengthInBits += 32;

        // A virtual field doesn't have any in- or output.

        // A virtual field doesn't have any in- or output.

        // A virtual field doesn't have any in- or output.

        // A virtual field doesn't have any in- or output.

        // Implicit Field (size)
        lengthInBits += 8;
        //short size = (short) (COUNT(_value.getData()));

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Array field
        if(data != null) {
            lengthInBits += 8 * data.length;
        }

        // Padding Field (padding)
        int _timesPadding = (int) ((8) - ((COUNT(data))));
        while (_timesPadding-- > 0) {
            lengthInBits += 8;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<SocketCANFrame, SocketCANFrame> getMessageIO() {
        return new SocketCANFrameIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SocketCANFrame)) {
            return false;
        }
        SocketCANFrame that = (SocketCANFrame) o;
        return
            (getRawId() == that.getRawId()) &&
            (getData() == that.getData()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getRawId(),
            getData()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("rawId", getRawId())
            .append("data", getData())
            .append("identifier", getIdentifier())
            .append("extended", getExtended())
            .append("remote", getRemote())
            .append("error", getError())
            .toString();
    }

}
