/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.hsc.readwrite.model;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.hsc.readwrite.model.io.HscPacketIO;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.util.Objects;

// Code generated by code-generation. DO NOT EDIT.

public class HscPacket implements Message {


    // Constant values.
    public static final short START = 0x02;
    public static final int TERMINATOR = 0x0A0D;

    // Properties.
    private final String content;

    public HscPacket(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        HscPacket _value  = this;

        // Const Field (start)
        lengthInBits += 8;

        // Implicit Field (stringLength)
//        lengthInBits += 32;
        //int stringLength = (int) (_value.getContent().length());

        // Simple field (content)
        lengthInBits += (_value.getContent().length())*8;

        // Const Field (terminator)
        lengthInBits += 16;

        return lengthInBits;
    }

    @Override
    public MessageIO<HscPacket, HscPacket> getMessageIO() {
        return new HscPacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof HscPacket)) {
            return false;
        }
        HscPacket that = (HscPacket) o;
        return
            (getContent() == that.getContent()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getContent()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("content", getContent())
            .toString();
    }

}
