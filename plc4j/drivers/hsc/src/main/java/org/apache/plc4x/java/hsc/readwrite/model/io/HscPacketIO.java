/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.hsc.readwrite.model.io;

import org.apache.plc4x.java.hsc.readwrite.model.HscPacket;
import org.apache.plc4x.java.spi.generation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Code generated by code-generation. DO NOT EDIT.

public class HscPacketIO implements MessageIO<HscPacket, HscPacket> {
    private static final Logger LOGGER = LoggerFactory.getLogger(HscPacketIO.class);
    @Override
    public HscPacket parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, HscPacket value, Object... args) throws ParseException {
        staticSerialize(writeBuffer, value);
    }

    public static HscPacket staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("HscPacket");
        int startPos = readBuffer.getPos();
        int curPos;
        // Const Field (start)
        short start = readBuffer.readUnsignedShort("start", 8);
        if(start != HscPacket.START) {
            throw new ParseException("Expected constant value " + HscPacket.START + " but got " + start);
        }

        long totalBytes = ((ReadBufferByteBased) readBuffer).getTotalBytes();
        // Simple Field (content)
        String content = readBuffer.readString("content", (int) ((totalBytes-3)*8), "'UTF-8'") ;
        // Const Field (terminator)
        int terminator = readBuffer.readUnsignedInt("terminator", 16);
        if(terminator != HscPacket.TERMINATOR) {
            throw new ParseException("Expected constant value " + HscPacket.TERMINATOR + " but got " + terminator);
        }

        readBuffer.closeContext("HscPacket");
        // Create the instance
        return new HscPacket(content);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, HscPacket _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("HscPacket");

        // Const Field (start)
        writeBuffer.writeUnsignedShort("start", 8, ((Number) 0x02).shortValue());

        // Simple Field (content)
        String content = (String) _value.getContent();
        writeBuffer.writeString("content", content.length()*8, "'UTF-8'", (String) (content));

        // Const Field (terminator)
        writeBuffer.writeUnsignedInt("terminator", 16, ((Number) 0x0A0D).intValue());
        writeBuffer.popContext("HscPacket");
    }

}