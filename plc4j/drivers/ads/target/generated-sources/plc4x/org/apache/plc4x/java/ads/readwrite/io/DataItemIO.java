/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.api.model.PlcField;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.EvaluationHelper;
import org.apache.plc4x.java.spi.generation.ParseException;
import org.apache.plc4x.java.spi.generation.ReadBuffer;
import org.apache.plc4x.java.spi.generation.WriteBufferByteBased;
import org.apache.plc4x.java.ads.readwrite.*;
import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.spi.values.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.*;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataItemIO {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataItemIO.class);
    public static PlcValue staticParse(ReadBuffer readBuffer, String dataFormatName, Integer stringLength) throws ParseException {
if(EvaluationHelper.equals(dataFormatName, "IEC61131_BOOL")) { // BOOL

            // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
            {
                short reserved = readBuffer.readUnsignedShort("", 7);
                if(reserved != (short) 0x00) {
                    LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
                }
            }

            // Simple Field (value)
            Boolean value = readBuffer.readBit("");

            return new PlcBOOL(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_BYTE")) { // BitString

            // Simple Field (value)
            Short value = readBuffer.readUnsignedShort("", 8);

            return new PlcBitString(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_WORD")) { // BitString

            // Simple Field (value)
            Integer value = readBuffer.readUnsignedInt("", 16);

            return new PlcBitString(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_DWORD")) { // BitString

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcBitString(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_SINT")) { // SINT

            // Simple Field (value)
            Byte value = readBuffer.readSignedByte("", 8);

            return new PlcSINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_USINT")) { // USINT

            // Simple Field (value)
            Short value = readBuffer.readUnsignedShort("", 8);

            return new PlcUSINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_INT")) { // INT

            // Simple Field (value)
            Short value = readBuffer.readShort("", 16);

            return new PlcINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_UINT")) { // UINT

            // Simple Field (value)
            Integer value = readBuffer.readUnsignedInt("", 16);

            return new PlcUINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_DINT")) { // DINT

            // Simple Field (value)
            Integer value = readBuffer.readInt("", 32);

            return new PlcDINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_UDINT")) { // UDINT

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcUDINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_LINT")) { // LINT

            // Simple Field (value)
            Long value = readBuffer.readLong("", 64);

            return new PlcLINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_ULINT")) { // ULINT

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 64);

            return new PlcULINT(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_REAL")) { // REAL

            // Simple Field (value)
            Float value = ((Supplier<Float>) (() -> {
            return (float) toFloat(readBuffer, "", true, 8, 23);
        })).get();

            return new PlcREAL(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_LREAL")) { // LREAL

            // Simple Field (value)
            Double value = ((Supplier<Double>) (() -> {
            return (double) toFloat(readBuffer, "", true, 11, 52);
        })).get();

            return new PlcLREAL(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_CHAR")) { // STRING

        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_WCHAR")) { // STRING

        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_STRING")) { // STRING

            // Manual Field (value)
            String value = (String) (org.apache.plc4x.java.ads.utils.StaticHelper.parseAmsString(readBuffer, stringLength, "UTF-8"));

            return new PlcSTRING(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_WSTRING")) { // STRING

            // Manual Field (value)
            String value = (String) (org.apache.plc4x.java.ads.utils.StaticHelper.parseAmsString(readBuffer, stringLength, "UTF-16"));

            return new PlcSTRING(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_TIME")) { // TIME

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcTIME(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_LTIME")) { // LTIME

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 64);

            return new PlcLTIME(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_DATE")) { // DATE

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcDATE(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_TIME_OF_DAY")) { // TIME_OF_DAY

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcTIME_OF_DAY(value);
        } else if(EvaluationHelper.equals(dataFormatName, "IEC61131_DATE_AND_TIME")) { // DATE_AND_TIME

            // Simple Field (secondsSinceEpoch)
            Long secondsSinceEpoch = readBuffer.readUnsignedLong("", 32);

            LocalDateTime value = LocalDateTime.ofEpochSecond(secondsSinceEpoch, 0, ZoneOffset.UTC);
            return new PlcDATE_AND_TIME(value);
        }
        return null;
    }

    public static WriteBufferByteBased staticSerialize(PlcValue _value, String dataFormatName, Integer stringLength) throws ParseException {
        return staticSerialize(_value, dataFormatName, stringLength, false);
    }

    public static WriteBufferByteBased staticSerialize(PlcValue _value, String dataFormatName, Integer stringLength, boolean littleEndian) throws ParseException {
        if(EvaluationHelper.equals(dataFormatName,"IEC61131_BOOL")) { // BOOL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Reserved Field
            writeBuffer.writeUnsignedShort("", 7, ((Number) (short) 0x00).shortValue());
            // Simple Field (value)
            boolean value = (boolean) _value.getBoolean();
            writeBuffer.writeBit("", (boolean) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_BYTE")) { // BitString
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            short value = (short) _value.getShort();
            writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_WORD")) { // BitString
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 16) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_DWORD")) { // BitString
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_SINT")) { // SINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            byte value = (byte) _value.getByte();
            writeBuffer.writeSignedByte("", 8, ((Number) (value)).byteValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_USINT")) { // USINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            short value = (short) _value.getShort();
            writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_INT")) { // INT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 16) / 8.0f), littleEndian);

            // Simple Field (value)
            short value = (short) _value.getShort();
            writeBuffer.writeShort("", 16, ((Number) (value)).shortValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_UINT")) { // UINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 16) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_DINT")) { // DINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeInt("", 32, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_UDINT")) { // UDINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_LINT")) { // LINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeLong("", 64, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_ULINT")) { // ULINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_REAL")) { // REAL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            float value = (float) _value.getFloat();
            writeBuffer.writeFloat("", (value),8,23);
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_LREAL")) { // LREAL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            double value = (double) _value.getDouble();
            writeBuffer.writeDouble("", (value),11,52);
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_CHAR")) { // STRING
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 0) / 8.0f), littleEndian);

            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_WCHAR")) { // STRING
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 0) / 8.0f), littleEndian);

            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_STRING")) { // STRING
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) ((stringLength) + (1)) + 0) / 8.0f), littleEndian);

            // Manual Field (value)
            org.apache.plc4x.java.ads.utils.StaticHelper.serializeAmsString(writeBuffer, _value, stringLength, "UTF-8");
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_WSTRING")) { // STRING
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) ((((stringLength) * (2))) + (2)) + 0) / 8.0f), littleEndian);

            // Manual Field (value)
            org.apache.plc4x.java.ads.utils.StaticHelper.serializeAmsString(writeBuffer, _value, stringLength, "UTF-16");
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_TIME")) { // TIME
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_LTIME")) { // LTIME
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_DATE")) { // DATE
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_TIME_OF_DAY")) { // TIME_OF_DAY
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataFormatName,"IEC61131_DATE_AND_TIME")) { // DATE_AND_TIME
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (secondsSinceEpoch)
            long secondsSinceEpoch = 0l;
            writeBuffer.writeUnsignedLong("", 32, ((Number) (secondsSinceEpoch)).longValue());
            return writeBuffer;
        }
        return null;
    }

}
