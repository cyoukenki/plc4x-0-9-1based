/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.discovery.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.discovery.readwrite.*;
import org.apache.plc4x.java.ads.discovery.readwrite.io.*;
import org.apache.plc4x.java.ads.discovery.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class RouteRequestIO implements MessageIO<RouteRequest, RouteRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(RouteRequestIO.class);

    @Override
    public RouteRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (RouteRequest) new AdsDiscoveryIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, RouteRequest value, Object... args) throws ParseException {
        new AdsDiscoveryIO().serialize(writeBuffer, value, args);
    }

    public static RouteRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("RouteRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("sender");

        // Simple Field (sender)
AmsNetId sender = AmsNetIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("sender");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x1027) {
                LOGGER.info("Expected constant value " + 0x1027 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0500) {
                LOGGER.info("Expected constant value " + 0x0500 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 24);
            if(reserved != (long) 0x000C) {
                LOGGER.info("Expected constant value " + 0x000C + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("routeName");

        // Simple Field (routeName)
AmsMagicString routeName = AmsMagicStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("routeName");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0700) {
                LOGGER.info("Expected constant value " + 0x0700 + " but got " + reserved + " for reserved field.");
            }
        }

        // Implicit Field (amsSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short amsSize = readBuffer.readUnsignedShort("amsSize", 8);

        // Const Field (targetPrefix)
        short targetPrefix = readBuffer.readUnsignedShort("targetPrefix", 8);
        if(targetPrefix != RouteRequest.TARGETPREFIX) {
            throw new ParseException("Expected constant value " + RouteRequest.TARGETPREFIX + " but got " + targetPrefix);
        }

        readBuffer.pullContext("target");

        // Simple Field (target)
AmsNetId target = AmsNetIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("target");

        // Const Field (usernamePrefix)
        short usernamePrefix = readBuffer.readUnsignedShort("usernamePrefix", 8);
        if(usernamePrefix != RouteRequest.USERNAMEPREFIX) {
            throw new ParseException("Expected constant value " + RouteRequest.USERNAMEPREFIX + " but got " + usernamePrefix);
        }

        readBuffer.pullContext("username");

        // Simple Field (username)
AmsMagicString username = AmsMagicStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("username");

        // Const Field (passwordPrefix)
        short passwordPrefix = readBuffer.readUnsignedShort("passwordPrefix", 8);
        if(passwordPrefix != RouteRequest.PASSWORDPREFIX) {
            throw new ParseException("Expected constant value " + RouteRequest.PASSWORDPREFIX + " but got " + passwordPrefix);
        }

        readBuffer.pullContext("password");

        // Simple Field (password)
AmsMagicString password = AmsMagicStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("password");

        // Const Field (routePrefix)
        short routePrefix = readBuffer.readUnsignedShort("routePrefix", 8);
        if(routePrefix != RouteRequest.ROUTEPREFIX) {
            throw new ParseException("Expected constant value " + RouteRequest.ROUTEPREFIX + " but got " + routePrefix);
        }

        readBuffer.pullContext("address");

        // Simple Field (address)
AmsMagicString address = AmsMagicStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("address");

        readBuffer.closeContext("RouteRequest");
        // Create the instance
        return new RouteRequestBuilder(sender, routeName, target, username, password, address);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, RouteRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("RouteRequest");

        // Simple Field (sender)
        AmsNetId sender = (AmsNetId) _value.getSender();
        writeBuffer.pushContext("sender");
        AmsNetIdIO.staticSerialize(writeBuffer, sender);
        writeBuffer.popContext("sender");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x1027).intValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0500).intValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 24, ((Number) (long) 0x000C).longValue());

        // Simple Field (routeName)
        AmsMagicString routeName = (AmsMagicString) _value.getRouteName();
        writeBuffer.pushContext("routeName");
        AmsMagicStringIO.staticSerialize(writeBuffer, routeName);
        writeBuffer.popContext("routeName");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0700).intValue());

        // Implicit Field (amsSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short amsSize = (short) (_value.getTarget().getLengthInBytes());
        writeBuffer.writeUnsignedShort("amsSize", 8, ((Number) (amsSize)).shortValue());

        // Const Field (targetPrefix)
        writeBuffer.writeUnsignedShort("targetPrefix", 8, ((Number) 0x00).shortValue());

        // Simple Field (target)
        AmsNetId target = (AmsNetId) _value.getTarget();
        writeBuffer.pushContext("target");
        AmsNetIdIO.staticSerialize(writeBuffer, target);
        writeBuffer.popContext("target");

        // Const Field (usernamePrefix)
        writeBuffer.writeUnsignedShort("usernamePrefix", 8, ((Number) 0x0D).shortValue());

        // Simple Field (username)
        AmsMagicString username = (AmsMagicString) _value.getUsername();
        writeBuffer.pushContext("username");
        AmsMagicStringIO.staticSerialize(writeBuffer, username);
        writeBuffer.popContext("username");

        // Const Field (passwordPrefix)
        writeBuffer.writeUnsignedShort("passwordPrefix", 8, ((Number) 0x02).shortValue());

        // Simple Field (password)
        AmsMagicString password = (AmsMagicString) _value.getPassword();
        writeBuffer.pushContext("password");
        AmsMagicStringIO.staticSerialize(writeBuffer, password);
        writeBuffer.popContext("password");

        // Const Field (routePrefix)
        writeBuffer.writeUnsignedShort("routePrefix", 8, ((Number) 0x05).shortValue());

        // Simple Field (address)
        AmsMagicString address = (AmsMagicString) _value.getAddress();
        writeBuffer.pushContext("address");
        AmsMagicStringIO.staticSerialize(writeBuffer, address);
        writeBuffer.popContext("address");
        writeBuffer.popContext("RouteRequest");
    }

    public static class RouteRequestBuilder implements AdsDiscoveryIO.AdsDiscoveryBuilder {
        private final AmsNetId sender;
        private final AmsMagicString routeName;
        private final AmsNetId target;
        private final AmsMagicString username;
        private final AmsMagicString password;
        private final AmsMagicString address;

        public RouteRequestBuilder(AmsNetId sender, AmsMagicString routeName, AmsNetId target, AmsMagicString username, AmsMagicString password, AmsMagicString address) {
            this.sender = sender;
            this.routeName = routeName;
            this.target = target;
            this.username = username;
            this.password = password;
            this.address = address;
        }

        public RouteRequest build(Operation operation, Direction direction) {
            return new RouteRequest(operation, direction, sender, routeName, target, username, password, address);
        }
    }

}
