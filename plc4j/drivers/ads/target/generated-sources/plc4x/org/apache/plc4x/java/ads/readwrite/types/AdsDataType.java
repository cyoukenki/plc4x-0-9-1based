/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum AdsDataType {

    BOOL((byte) 0x01, (int) 1, (String) "IEC61131_BOOL"),
    BIT((byte) 0x02, (int) 1, (String) "IEC61131_BOOL"),
    BIT8((byte) 0x03, (int) 1, (String) "IEC61131_BOOL"),
    BYTE((byte) 0x04, (int) 1, (String) "IEC61131_BYTE"),
    BITARR8((byte) 0x05, (int) 1, (String) "IEC61131_BYTE"),
    WORD((byte) 0x06, (int) 2, (String) "IEC61131_WORD"),
    BITARR16((byte) 0x07, (int) 2, (String) "IEC61131_WORD"),
    DWORD((byte) 0x08, (int) 4, (String) "IEC61131_DWORD"),
    BITARR32((byte) 0x09, (int) 4, (String) "IEC61131_DWORD"),
    SINT((byte) 0x0A, (int) 1, (String) "IEC61131_SINT"),
    INT8((byte) 0x0B, (int) 1, (String) "IEC61131_SINT"),
    USINT((byte) 0x0C, (int) 1, (String) "IEC61131_USINT"),
    UINT8((byte) 0x0D, (int) 1, (String) "IEC61131_USINT"),
    INT((byte) 0x0E, (int) 2, (String) "IEC61131_INT"),
    INT16((byte) 0x0F, (int) 2, (String) "IEC61131_INT"),
    UINT((byte) 0x10, (int) 2, (String) "IEC61131_UINT"),
    UINT16((byte) 0x11, (int) 2, (String) "IEC61131_UINT"),
    DINT((byte) 0x12, (int) 4, (String) "IEC61131_DINT"),
    INT32((byte) 0x13, (int) 4, (String) "IEC61131_DINT"),
    UDINT((byte) 0x14, (int) 4, (String) "IEC61131_UDINT"),
    UINT32((byte) 0x15, (int) 4, (String) "IEC61131_UDINT"),
    LINT((byte) 0x16, (int) 8, (String) "IEC61131_LINT"),
    INT64((byte) 0x17, (int) 8, (String) "IEC61131_LINT"),
    ULINT((byte) 0x18, (int) 8, (String) "IEC61131_ULINT"),
    UINT64((byte) 0x19, (int) 8, (String) "IEC61131_ULINT"),
    REAL((byte) 0x1A, (int) 4, (String) "IEC61131_REAL"),
    FLOAT((byte) 0x1B, (int) 4, (String) "IEC61131_REAL"),
    LREAL((byte) 0x1C, (int) 8, (String) "IEC61131_LREAL"),
    DOUBLE((byte) 0x1D, (int) 8, (String) "IEC61131_LREAL"),
    CHAR((byte) 0x1E, (int) 1, (String) "IEC61131_CHAR"),
    WCHAR((byte) 0x1F, (int) 2, (String) "IEC61131_WCHAR"),
    STRING((byte) 0x20, (int) 256, (String) "IEC61131_STRING"),
    WSTRING((byte) 0x21, (int) 512, (String) "IEC61131_WSTRING"),
    TIME((byte) 0x22, (int) 4, (String) "IEC61131_TIME"),
    LTIME((byte) 0x23, (int) 8, (String) "IEC61131_LTIME"),
    DATE((byte) 0x24, (int) 4, (String) "IEC61131_DATE"),
    TIME_OF_DAY((byte) 0x25, (int) 4, (String) "IEC61131_TIME_OF_DAY"),
    TOD((byte) 0x26, (int) 4, (String) "IEC61131_TIME_OF_DAY"),
    DATE_AND_TIME((byte) 0x27, (int) 4, (String) "IEC61131_DATE_AND_TIME"),
    DT((byte) 0x28, (int) 4, (String) "IEC61131_DATE_AND_TIME");

    private static final Logger logger = LoggerFactory.getLogger(AdsDataType.class);

    private static final Map<Byte, AdsDataType> map;
    static {
        map = new HashMap<>();
        for (AdsDataType value : AdsDataType.values()) {
            map.put((byte) value.getValue(), value);
        }
    }

    private byte value;
        private int numBytes;
        private String dataFormatName;

    AdsDataType(byte value, int numBytes, String dataFormatName) {
        this.value = value;
        this.numBytes = numBytes;
        this.dataFormatName = dataFormatName;
    }

    public byte getValue() {
        return value;
    }

    public int getNumBytes() {
        return numBytes;
    }

    public static AdsDataType firstEnumForFieldNumBytes(int fieldValue) {
        for (AdsDataType _val : AdsDataType.values()) {
            if(_val.getNumBytes() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<AdsDataType> enumsForFieldNumBytes(int fieldValue) {
        List<AdsDataType> _values = new ArrayList();
        for (AdsDataType _val : AdsDataType.values()) {
            if(_val.getNumBytes() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }

    public String getDataFormatName() {
        return dataFormatName;
    }

    public static AdsDataType firstEnumForFieldDataFormatName(String fieldValue) {
        for (AdsDataType _val : AdsDataType.values()) {
            if(_val.getDataFormatName() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<AdsDataType> enumsForFieldDataFormatName(String fieldValue) {
        List<AdsDataType> _values = new ArrayList();
        for (AdsDataType _val : AdsDataType.values()) {
            if(_val.getDataFormatName() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }

    public static AdsDataType enumForValue(byte value) {
        if (!map.containsKey(value)) {
            logger.error("No AdsDataType for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(byte value) {
        return map.containsKey(value);
    }

}
