/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AdsAddDeviceNotificationRequest extends AdsData implements Message {

    // Accessors for discriminator values.
    public CommandId getCommandId() {
        return CommandId.ADS_ADD_DEVICE_NOTIFICATION;
    }
    public Boolean getResponse() {
        return false;
    }

    // Properties.
    private final long indexGroup;
    private final long indexOffset;
    private final long length;
    private final long transmissionMode;
    private final long maxDelay;
    private final long cycleTime;

    public AdsAddDeviceNotificationRequest(long indexGroup, long indexOffset, long length, long transmissionMode, long maxDelay, long cycleTime) {
        this.indexGroup = indexGroup;
        this.indexOffset = indexOffset;
        this.length = length;
        this.transmissionMode = transmissionMode;
        this.maxDelay = maxDelay;
        this.cycleTime = cycleTime;
    }

    public long getIndexGroup() {
        return indexGroup;
    }

    public long getIndexOffset() {
        return indexOffset;
    }

    public long getLength() {
        return length;
    }

    public long getTransmissionMode() {
        return transmissionMode;
    }

    public long getMaxDelay() {
        return maxDelay;
    }

    public long getCycleTime() {
        return cycleTime;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        AdsAddDeviceNotificationRequest _value  = this;

        // Simple field (indexGroup)
        lengthInBits += 32;

        // Simple field (indexOffset)
        lengthInBits += 32;

        // Simple field (length)
        lengthInBits += 32;

        // Simple field (transmissionMode)
        lengthInBits += 32;

        // Simple field (maxDelay)
        lengthInBits += 32;

        // Simple field (cycleTime)
        lengthInBits += 32;

        // Reserved Field (reserved)
        lengthInBits += 128;

        return lengthInBits;
    }

    @Override
    public MessageIO<AdsData, AdsData> getMessageIO() {
        return new AdsDataIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AdsAddDeviceNotificationRequest)) {
            return false;
        }
        AdsAddDeviceNotificationRequest that = (AdsAddDeviceNotificationRequest) o;
        return
            (getIndexGroup() == that.getIndexGroup()) &&
            (getIndexOffset() == that.getIndexOffset()) &&
            (getLength() == that.getLength()) &&
            (getTransmissionMode() == that.getTransmissionMode()) &&
            (getMaxDelay() == that.getMaxDelay()) &&
            (getCycleTime() == that.getCycleTime()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getIndexGroup(),
            getIndexOffset(),
            getLength(),
            getTransmissionMode(),
            getMaxDelay(),
            getCycleTime()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("indexGroup", getIndexGroup())
            .append("indexOffset", getIndexOffset())
            .append("length", getLength())
            .append("transmissionMode", getTransmissionMode())
            .append("maxDelay", getMaxDelay())
            .append("cycleTime", getCycleTime())
            .toString();
    }

}
