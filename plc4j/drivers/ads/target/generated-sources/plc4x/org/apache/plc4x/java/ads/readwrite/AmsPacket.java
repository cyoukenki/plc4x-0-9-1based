/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AmsPacket implements Message {


    // Properties.
    private final AmsNetId targetAmsNetId;
    private final int targetAmsPort;
    private final AmsNetId sourceAmsNetId;
    private final int sourceAmsPort;
    private final CommandId commandId;
    private final State state;
    private final long errorCode;
    private final long invokeId;
    private final AdsData data;

    public AmsPacket(AmsNetId targetAmsNetId, int targetAmsPort, AmsNetId sourceAmsNetId, int sourceAmsPort, CommandId commandId, State state, long errorCode, long invokeId, AdsData data) {
        this.targetAmsNetId = targetAmsNetId;
        this.targetAmsPort = targetAmsPort;
        this.sourceAmsNetId = sourceAmsNetId;
        this.sourceAmsPort = sourceAmsPort;
        this.commandId = commandId;
        this.state = state;
        this.errorCode = errorCode;
        this.invokeId = invokeId;
        this.data = data;
    }

    public AmsNetId getTargetAmsNetId() {
        return targetAmsNetId;
    }

    public int getTargetAmsPort() {
        return targetAmsPort;
    }

    public AmsNetId getSourceAmsNetId() {
        return sourceAmsNetId;
    }

    public int getSourceAmsPort() {
        return sourceAmsPort;
    }

    public CommandId getCommandId() {
        return commandId;
    }

    public State getState() {
        return state;
    }

    public long getErrorCode() {
        return errorCode;
    }

    public long getInvokeId() {
        return invokeId;
    }

    public AdsData getData() {
        return data;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        AmsPacket _value  = this;

        // Simple field (targetAmsNetId)
        lengthInBits += targetAmsNetId.getLengthInBits();

        // Simple field (targetAmsPort)
        lengthInBits += 16;

        // Simple field (sourceAmsNetId)
        lengthInBits += sourceAmsNetId.getLengthInBits();

        // Simple field (sourceAmsPort)
        lengthInBits += 16;

        // Simple field (commandId)
        lengthInBits += 16;

        // Simple field (state)
        lengthInBits += state.getLengthInBits();

        // Implicit Field (length)
        lengthInBits += 32;
        //long length = (long) (_value.getData().getLengthInBytes());

        // Simple field (errorCode)
        lengthInBits += 32;

        // Simple field (invokeId)
        lengthInBits += 32;

        // Simple field (data)
        lengthInBits += data.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<AmsPacket, AmsPacket> getMessageIO() {
        return new AmsPacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AmsPacket)) {
            return false;
        }
        AmsPacket that = (AmsPacket) o;
        return
            (getTargetAmsNetId() == that.getTargetAmsNetId()) &&
            (getTargetAmsPort() == that.getTargetAmsPort()) &&
            (getSourceAmsNetId() == that.getSourceAmsNetId()) &&
            (getSourceAmsPort() == that.getSourceAmsPort()) &&
            (getCommandId() == that.getCommandId()) &&
            (getState() == that.getState()) &&
            (getErrorCode() == that.getErrorCode()) &&
            (getInvokeId() == that.getInvokeId()) &&
            (getData() == that.getData()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTargetAmsNetId(),
            getTargetAmsPort(),
            getSourceAmsNetId(),
            getSourceAmsPort(),
            getCommandId(),
            getState(),
            getErrorCode(),
            getInvokeId(),
            getData()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("targetAmsNetId", getTargetAmsNetId())
            .append("targetAmsPort", getTargetAmsPort())
            .append("sourceAmsNetId", getSourceAmsNetId())
            .append("sourceAmsPort", getSourceAmsPort())
            .append("commandId", getCommandId())
            .append("state", getState())
            .append("errorCode", getErrorCode())
            .append("invokeId", getInvokeId())
            .append("data", getData())
            .toString();
    }

}
