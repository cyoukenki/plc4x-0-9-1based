/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.discovery.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.discovery.readwrite.*;
import org.apache.plc4x.java.ads.discovery.readwrite.io.*;
import org.apache.plc4x.java.ads.discovery.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AdsDiscoveryIO implements MessageIO<AdsDiscovery, AdsDiscovery> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsDiscoveryIO.class);

    @Override
    public AdsDiscovery parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return AdsDiscoveryIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AdsDiscovery value, Object... args) throws ParseException {
        AdsDiscoveryIO.staticSerialize(writeBuffer, value);
    }

    public static AdsDiscovery staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AdsDiscovery");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (header)
        long header = readBuffer.readUnsignedLong("header", 32);
        if(header != AdsDiscovery.HEADER) {
            throw new ParseException("Expected constant value " + AdsDiscovery.HEADER + " but got " + header);
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 32);
            if(reserved != (long) 0x00000000L) {
                LOGGER.info("Expected constant value " + 0x00000000L + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("operation");
        // Enum field (operation)
        Operation operation = Operation.enumForValue(readBuffer.readUnsignedShort("Operation", 8));
        readBuffer.closeContext("operation");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("direction");
        // Enum field (direction)
        Direction direction = Direction.enumForValue(readBuffer.readUnsignedShort("Direction", 8));
        readBuffer.closeContext("direction");

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        AdsDiscoveryBuilder builder = null;
                if(EvaluationHelper.equals(operation, Operation.DISCOVERY) && EvaluationHelper.equals(direction, Direction.REQUEST)) {
            builder = DiscoveryRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(operation, Operation.DISCOVERY) && EvaluationHelper.equals(direction, Direction.RESPONSE)) {
            builder = DiscoveryResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(operation, Operation.ROUTE) && EvaluationHelper.equals(direction, Direction.REQUEST)) {
            builder = RouteRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(operation, Operation.ROUTE) && EvaluationHelper.equals(direction, Direction.RESPONSE)) {
            builder = RouteResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("AdsDiscovery");
        // Create the instance
        return builder.build(operation, direction);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AdsDiscovery _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AdsDiscovery");

        // Const Field (header)
        writeBuffer.writeUnsignedLong("header", 32, ((Number) 0x03661471L).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 32, ((Number) (long) 0x00000000L).longValue());

        writeBuffer.pushContext("operation");
        // Enum field (operation)
        Operation operation = (Operation) _value.getOperation();
        writeBuffer.writeUnsignedShort("Operation", 8, ((Number) (operation.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(operation.name()));
        writeBuffer.popContext("operation");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        writeBuffer.pushContext("direction");
        // Enum field (direction)
        Direction direction = (Direction) _value.getDirection();
        writeBuffer.writeUnsignedShort("Direction", 8, ((Number) (direction.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(direction.name()));
        writeBuffer.popContext("direction");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof DiscoveryRequest) {
            DiscoveryRequestIO.staticSerialize(writeBuffer, (DiscoveryRequest) _value);
        } else 
        if(_value instanceof DiscoveryResponse) {
            DiscoveryResponseIO.staticSerialize(writeBuffer, (DiscoveryResponse) _value);
        } else 
        if(_value instanceof RouteRequest) {
            RouteRequestIO.staticSerialize(writeBuffer, (RouteRequest) _value);
        } else 
        if(_value instanceof RouteResponse) {
            RouteResponseIO.staticSerialize(writeBuffer, (RouteResponse) _value);
        }
        writeBuffer.popContext("AdsDiscovery");
    }

    public static interface AdsDiscoveryBuilder {
        AdsDiscovery build(Operation operation, Direction direction);
    }

}
