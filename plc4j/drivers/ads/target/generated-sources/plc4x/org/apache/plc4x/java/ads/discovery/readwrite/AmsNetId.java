/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.discovery.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.discovery.readwrite.io.*;
import org.apache.plc4x.java.ads.discovery.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AmsNetId implements Message {


    // Properties.
    private final short octet1;
    private final short octet2;
    private final short octet3;
    private final short octet4;
    private final short octet5;
    private final short octet6;

    public AmsNetId(short octet1, short octet2, short octet3, short octet4, short octet5, short octet6) {
        this.octet1 = octet1;
        this.octet2 = octet2;
        this.octet3 = octet3;
        this.octet4 = octet4;
        this.octet5 = octet5;
        this.octet6 = octet6;
    }

    public short getOctet1() {
        return octet1;
    }

    public short getOctet2() {
        return octet2;
    }

    public short getOctet3() {
        return octet3;
    }

    public short getOctet4() {
        return octet4;
    }

    public short getOctet5() {
        return octet5;
    }

    public short getOctet6() {
        return octet6;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        AmsNetId _value  = this;

        // Simple field (octet1)
        lengthInBits += 8;

        // Simple field (octet2)
        lengthInBits += 8;

        // Simple field (octet3)
        lengthInBits += 8;

        // Simple field (octet4)
        lengthInBits += 8;

        // Simple field (octet5)
        lengthInBits += 8;

        // Simple field (octet6)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<AmsNetId, AmsNetId> getMessageIO() {
        return new AmsNetIdIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AmsNetId)) {
            return false;
        }
        AmsNetId that = (AmsNetId) o;
        return
            (getOctet1() == that.getOctet1()) &&
            (getOctet2() == that.getOctet2()) &&
            (getOctet3() == that.getOctet3()) &&
            (getOctet4() == that.getOctet4()) &&
            (getOctet5() == that.getOctet5()) &&
            (getOctet6() == that.getOctet6()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getOctet1(),
            getOctet2(),
            getOctet3(),
            getOctet4(),
            getOctet5(),
            getOctet6()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("octet1", getOctet1())
            .append("octet2", getOctet2())
            .append("octet3", getOctet3())
            .append("octet4", getOctet4())
            .append("octet5", getOctet5())
            .append("octet6", getOctet6())
            .toString();
    }

}
