/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.*;
import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AdsDataIO implements MessageIO<AdsData, AdsData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsDataIO.class);

    @Override
    public AdsData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 2)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 2, but got " + args.length);
        }
        CommandId commandId;
        if(args[0] instanceof CommandId) {
            commandId = (CommandId) args[0];
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type CommandId or a string which is parseable but was " + args[0].getClass().getName());
        }
        Boolean response;
        if(args[1] instanceof Boolean) {
            response = (Boolean) args[1];
        } else if (args[1] instanceof String) {
            response = Boolean.valueOf((String) args[1]);
        } else {
            throw new PlcRuntimeException("Argument 1 expected to be of type Boolean or a string which is parseable but was " + args[1].getClass().getName());
        }
        return AdsDataIO.staticParse(readBuffer, commandId, response);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AdsData value, Object... args) throws ParseException {
        AdsDataIO.staticSerialize(writeBuffer, value);
    }

    public static AdsData staticParse(ReadBuffer readBuffer, CommandId commandId, Boolean response) throws ParseException {
        readBuffer.pullContext("AdsData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        AdsDataBuilder builder = null;
                if(EvaluationHelper.equals(commandId, CommandId.INVALID) && EvaluationHelper.equals(response, false)) {
            builder = AdsInvalidRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.INVALID) && EvaluationHelper.equals(response, true)) {
            builder = AdsInvalidResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_DEVICE_INFO) && EvaluationHelper.equals(response, false)) {
            builder = AdsReadDeviceInfoRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_DEVICE_INFO) && EvaluationHelper.equals(response, true)) {
            builder = AdsReadDeviceInfoResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ) && EvaluationHelper.equals(response, false)) {
            builder = AdsReadRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ) && EvaluationHelper.equals(response, true)) {
            builder = AdsReadResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_WRITE) && EvaluationHelper.equals(response, false)) {
            builder = AdsWriteRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_WRITE) && EvaluationHelper.equals(response, true)) {
            builder = AdsWriteResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_STATE) && EvaluationHelper.equals(response, false)) {
            builder = AdsReadStateRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_STATE) && EvaluationHelper.equals(response, true)) {
            builder = AdsReadStateResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_WRITE_CONTROL) && EvaluationHelper.equals(response, false)) {
            builder = AdsWriteControlRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_WRITE_CONTROL) && EvaluationHelper.equals(response, true)) {
            builder = AdsWriteControlResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_ADD_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, false)) {
            builder = AdsAddDeviceNotificationRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_ADD_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, true)) {
            builder = AdsAddDeviceNotificationResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_DELETE_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, false)) {
            builder = AdsDeleteDeviceNotificationRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_DELETE_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, true)) {
            builder = AdsDeleteDeviceNotificationResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, false)) {
            builder = AdsDeviceNotificationRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_DEVICE_NOTIFICATION) && EvaluationHelper.equals(response, true)) {
            builder = AdsDeviceNotificationResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_WRITE) && EvaluationHelper.equals(response, false)) {
            builder = AdsReadWriteRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandId, CommandId.ADS_READ_WRITE) && EvaluationHelper.equals(response, true)) {
            builder = AdsReadWriteResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("AdsData");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AdsData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AdsData");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof AdsInvalidRequest) {
            AdsInvalidRequestIO.staticSerialize(writeBuffer, (AdsInvalidRequest) _value);
        } else 
        if(_value instanceof AdsInvalidResponse) {
            AdsInvalidResponseIO.staticSerialize(writeBuffer, (AdsInvalidResponse) _value);
        } else 
        if(_value instanceof AdsReadDeviceInfoRequest) {
            AdsReadDeviceInfoRequestIO.staticSerialize(writeBuffer, (AdsReadDeviceInfoRequest) _value);
        } else 
        if(_value instanceof AdsReadDeviceInfoResponse) {
            AdsReadDeviceInfoResponseIO.staticSerialize(writeBuffer, (AdsReadDeviceInfoResponse) _value);
        } else 
        if(_value instanceof AdsReadRequest) {
            AdsReadRequestIO.staticSerialize(writeBuffer, (AdsReadRequest) _value);
        } else 
        if(_value instanceof AdsReadResponse) {
            AdsReadResponseIO.staticSerialize(writeBuffer, (AdsReadResponse) _value);
        } else 
        if(_value instanceof AdsWriteRequest) {
            AdsWriteRequestIO.staticSerialize(writeBuffer, (AdsWriteRequest) _value);
        } else 
        if(_value instanceof AdsWriteResponse) {
            AdsWriteResponseIO.staticSerialize(writeBuffer, (AdsWriteResponse) _value);
        } else 
        if(_value instanceof AdsReadStateRequest) {
            AdsReadStateRequestIO.staticSerialize(writeBuffer, (AdsReadStateRequest) _value);
        } else 
        if(_value instanceof AdsReadStateResponse) {
            AdsReadStateResponseIO.staticSerialize(writeBuffer, (AdsReadStateResponse) _value);
        } else 
        if(_value instanceof AdsWriteControlRequest) {
            AdsWriteControlRequestIO.staticSerialize(writeBuffer, (AdsWriteControlRequest) _value);
        } else 
        if(_value instanceof AdsWriteControlResponse) {
            AdsWriteControlResponseIO.staticSerialize(writeBuffer, (AdsWriteControlResponse) _value);
        } else 
        if(_value instanceof AdsAddDeviceNotificationRequest) {
            AdsAddDeviceNotificationRequestIO.staticSerialize(writeBuffer, (AdsAddDeviceNotificationRequest) _value);
        } else 
        if(_value instanceof AdsAddDeviceNotificationResponse) {
            AdsAddDeviceNotificationResponseIO.staticSerialize(writeBuffer, (AdsAddDeviceNotificationResponse) _value);
        } else 
        if(_value instanceof AdsDeleteDeviceNotificationRequest) {
            AdsDeleteDeviceNotificationRequestIO.staticSerialize(writeBuffer, (AdsDeleteDeviceNotificationRequest) _value);
        } else 
        if(_value instanceof AdsDeleteDeviceNotificationResponse) {
            AdsDeleteDeviceNotificationResponseIO.staticSerialize(writeBuffer, (AdsDeleteDeviceNotificationResponse) _value);
        } else 
        if(_value instanceof AdsDeviceNotificationRequest) {
            AdsDeviceNotificationRequestIO.staticSerialize(writeBuffer, (AdsDeviceNotificationRequest) _value);
        } else 
        if(_value instanceof AdsDeviceNotificationResponse) {
            AdsDeviceNotificationResponseIO.staticSerialize(writeBuffer, (AdsDeviceNotificationResponse) _value);
        } else 
        if(_value instanceof AdsReadWriteRequest) {
            AdsReadWriteRequestIO.staticSerialize(writeBuffer, (AdsReadWriteRequest) _value);
        } else 
        if(_value instanceof AdsReadWriteResponse) {
            AdsReadWriteResponseIO.staticSerialize(writeBuffer, (AdsReadWriteResponse) _value);
        }
        writeBuffer.popContext("AdsData");
    }

    public static interface AdsDataBuilder {
        AdsData build();
    }

}
