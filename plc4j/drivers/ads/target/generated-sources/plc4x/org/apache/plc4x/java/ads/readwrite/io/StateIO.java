/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.*;

import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class StateIO implements MessageIO<State, State> {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateIO.class);

    @Override
    public State parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return StateIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, State value, Object... args) throws ParseException {
        StateIO.staticSerialize(writeBuffer, value);
    }

    public static State staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("State");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (initCommand)
boolean initCommand = readBuffer.readBit("initCommand") ;

        // Simple Field (updCommand)
boolean updCommand = readBuffer.readBit("updCommand") ;

        // Simple Field (timestampAdded)
boolean timestampAdded = readBuffer.readBit("timestampAdded") ;

        // Simple Field (highPriorityCommand)
boolean highPriorityCommand = readBuffer.readBit("highPriorityCommand") ;

        // Simple Field (systemCommand)
boolean systemCommand = readBuffer.readBit("systemCommand") ;

        // Simple Field (adsCommand)
boolean adsCommand = readBuffer.readBit("adsCommand") ;

        // Simple Field (noReturn)
boolean noReturn = readBuffer.readBit("noReturn") ;

        // Simple Field (response)
boolean response = readBuffer.readBit("response") ;

        // Simple Field (broadcast)
boolean broadcast = readBuffer.readBit("broadcast") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readSignedByte("reserved", 7);
            if(reserved != (byte) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.closeContext("State");
        // Create the instance
        return new State(initCommand, updCommand, timestampAdded, highPriorityCommand, systemCommand, adsCommand, noReturn, response, broadcast);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, State _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("State");

        // Simple Field (initCommand)
        boolean initCommand = (boolean) _value.getInitCommand();
        writeBuffer.writeBit("initCommand", (boolean) (initCommand));

        // Simple Field (updCommand)
        boolean updCommand = (boolean) _value.getUpdCommand();
        writeBuffer.writeBit("updCommand", (boolean) (updCommand));

        // Simple Field (timestampAdded)
        boolean timestampAdded = (boolean) _value.getTimestampAdded();
        writeBuffer.writeBit("timestampAdded", (boolean) (timestampAdded));

        // Simple Field (highPriorityCommand)
        boolean highPriorityCommand = (boolean) _value.getHighPriorityCommand();
        writeBuffer.writeBit("highPriorityCommand", (boolean) (highPriorityCommand));

        // Simple Field (systemCommand)
        boolean systemCommand = (boolean) _value.getSystemCommand();
        writeBuffer.writeBit("systemCommand", (boolean) (systemCommand));

        // Simple Field (adsCommand)
        boolean adsCommand = (boolean) _value.getAdsCommand();
        writeBuffer.writeBit("adsCommand", (boolean) (adsCommand));

        // Simple Field (noReturn)
        boolean noReturn = (boolean) _value.getNoReturn();
        writeBuffer.writeBit("noReturn", (boolean) (noReturn));

        // Simple Field (response)
        boolean response = (boolean) _value.getResponse();
        writeBuffer.writeBit("response", (boolean) (response));

        // Simple Field (broadcast)
        boolean broadcast = (boolean) _value.getBroadcast();
        writeBuffer.writeBit("broadcast", (boolean) (broadcast));

        // Reserved Field (reserved)
        writeBuffer.writeSignedByte("reserved", 7, ((Number) (byte) 0x0).byteValue());
        writeBuffer.popContext("State");
    }

}
