/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.*;
import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AdsAddDeviceNotificationRequestIO implements MessageIO<AdsAddDeviceNotificationRequest, AdsAddDeviceNotificationRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsAddDeviceNotificationRequestIO.class);

    @Override
    public AdsAddDeviceNotificationRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AdsAddDeviceNotificationRequest) new AdsDataIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AdsAddDeviceNotificationRequest value, Object... args) throws ParseException {
        new AdsDataIO().serialize(writeBuffer, value, args);
    }

    public static AdsAddDeviceNotificationRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AdsAddDeviceNotificationRequest");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (indexGroup)
long indexGroup = readBuffer.readUnsignedLong("indexGroup", 32) ;

        // Simple Field (indexOffset)
long indexOffset = readBuffer.readUnsignedLong("indexOffset", 32) ;

        // Simple Field (length)
long length = readBuffer.readUnsignedLong("length", 32) ;

        // Simple Field (transmissionMode)
long transmissionMode = readBuffer.readUnsignedLong("transmissionMode", 32) ;

        // Simple Field (maxDelay)
long maxDelay = readBuffer.readUnsignedLong("maxDelay", 32) ;

        // Simple Field (cycleTime)
long cycleTime = readBuffer.readUnsignedLong("cycleTime", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            BigInteger reserved = readBuffer.readUnsignedBigInteger("reserved", 128);
            if(reserved != BigInteger.valueOf(0x0000)) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.closeContext("AdsAddDeviceNotificationRequest");
        // Create the instance
        return new AdsAddDeviceNotificationRequestBuilder(indexGroup, indexOffset, length, transmissionMode, maxDelay, cycleTime);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AdsAddDeviceNotificationRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AdsAddDeviceNotificationRequest");

        // Simple Field (indexGroup)
        long indexGroup = (long) _value.getIndexGroup();
        writeBuffer.writeUnsignedLong("indexGroup", 32, ((Number) (indexGroup)).longValue());

        // Simple Field (indexOffset)
        long indexOffset = (long) _value.getIndexOffset();
        writeBuffer.writeUnsignedLong("indexOffset", 32, ((Number) (indexOffset)).longValue());

        // Simple Field (length)
        long length = (long) _value.getLength();
        writeBuffer.writeUnsignedLong("length", 32, ((Number) (length)).longValue());

        // Simple Field (transmissionMode)
        long transmissionMode = (long) _value.getTransmissionMode();
        writeBuffer.writeUnsignedLong("transmissionMode", 32, ((Number) (transmissionMode)).longValue());

        // Simple Field (maxDelay)
        long maxDelay = (long) _value.getMaxDelay();
        writeBuffer.writeUnsignedLong("maxDelay", 32, ((Number) (maxDelay)).longValue());

        // Simple Field (cycleTime)
        long cycleTime = (long) _value.getCycleTime();
        writeBuffer.writeUnsignedLong("cycleTime", 32, ((Number) (cycleTime)).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedBigInteger("reserved", 128, (BigInteger) BigInteger.valueOf(0x0000));
        writeBuffer.popContext("AdsAddDeviceNotificationRequest");
    }

    public static class AdsAddDeviceNotificationRequestBuilder implements AdsDataIO.AdsDataBuilder {
        private final long indexGroup;
        private final long indexOffset;
        private final long length;
        private final long transmissionMode;
        private final long maxDelay;
        private final long cycleTime;

        public AdsAddDeviceNotificationRequestBuilder(long indexGroup, long indexOffset, long length, long transmissionMode, long maxDelay, long cycleTime) {
            this.indexGroup = indexGroup;
            this.indexOffset = indexOffset;
            this.length = length;
            this.transmissionMode = transmissionMode;
            this.maxDelay = maxDelay;
            this.cycleTime = cycleTime;
        }

        public AdsAddDeviceNotificationRequest build() {
            return new AdsAddDeviceNotificationRequest(indexGroup, indexOffset, length, transmissionMode, maxDelay, cycleTime);
        }
    }

}
