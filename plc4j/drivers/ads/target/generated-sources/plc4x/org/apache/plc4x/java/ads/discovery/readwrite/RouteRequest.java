/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.discovery.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.discovery.readwrite.io.*;
import org.apache.plc4x.java.ads.discovery.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class RouteRequest extends AdsDiscovery implements Message {

    // Accessors for discriminator values.

    // Constant values.
    public static final short TARGETPREFIX = 0x00;
    public static final short USERNAMEPREFIX = 0x0D;
    public static final short PASSWORDPREFIX = 0x02;
    public static final short ROUTEPREFIX = 0x05;

    // Properties.
    private final AmsNetId sender;
    private final AmsMagicString routeName;
    private final AmsNetId target;
    private final AmsMagicString username;
    private final AmsMagicString password;
    private final AmsMagicString address;

    public RouteRequest(Operation operation, Direction direction, AmsNetId sender, AmsMagicString routeName, AmsNetId target, AmsMagicString username, AmsMagicString password, AmsMagicString address) {
        super(operation, direction);
        this.sender = sender;
        this.routeName = routeName;
        this.target = target;
        this.username = username;
        this.password = password;
        this.address = address;
    }

    public AmsNetId getSender() {
        return sender;
    }

    public AmsMagicString getRouteName() {
        return routeName;
    }

    public AmsNetId getTarget() {
        return target;
    }

    public AmsMagicString getUsername() {
        return username;
    }

    public AmsMagicString getPassword() {
        return password;
    }

    public AmsMagicString getAddress() {
        return address;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        RouteRequest _value  = this;

        // Simple field (sender)
        lengthInBits += sender.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Reserved Field (reserved)
        lengthInBits += 24;

        // Simple field (routeName)
        lengthInBits += routeName.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Implicit Field (amsSize)
        lengthInBits += 8;
        //short amsSize = (short) (_value.getTarget().getLengthInBytes());

        // Const Field (targetPrefix)
        lengthInBits += 8;

        // Simple field (target)
        lengthInBits += target.getLengthInBits();

        // Const Field (usernamePrefix)
        lengthInBits += 8;

        // Simple field (username)
        lengthInBits += username.getLengthInBits();

        // Const Field (passwordPrefix)
        lengthInBits += 8;

        // Simple field (password)
        lengthInBits += password.getLengthInBits();

        // Const Field (routePrefix)
        lengthInBits += 8;

        // Simple field (address)
        lengthInBits += address.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<AdsDiscovery, AdsDiscovery> getMessageIO() {
        return new AdsDiscoveryIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof RouteRequest)) {
            return false;
        }
        RouteRequest that = (RouteRequest) o;
        return
            (getSender() == that.getSender()) &&
            (getRouteName() == that.getRouteName()) &&
            (getTarget() == that.getTarget()) &&
            (getUsername() == that.getUsername()) &&
            (getPassword() == that.getPassword()) &&
            (getAddress() == that.getAddress()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getSender(),
            getRouteName(),
            getTarget(),
            getUsername(),
            getPassword(),
            getAddress()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("sender", getSender())
            .append("routeName", getRouteName())
            .append("target", getTarget())
            .append("username", getUsername())
            .append("password", getPassword())
            .append("address", getAddress())
            .toString();
    }

}
