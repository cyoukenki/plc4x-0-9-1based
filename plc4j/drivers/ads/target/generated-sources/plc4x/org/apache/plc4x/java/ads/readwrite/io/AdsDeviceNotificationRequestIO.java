/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.*;
import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AdsDeviceNotificationRequestIO implements MessageIO<AdsDeviceNotificationRequest, AdsDeviceNotificationRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsDeviceNotificationRequestIO.class);

    @Override
    public AdsDeviceNotificationRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AdsDeviceNotificationRequest) new AdsDataIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AdsDeviceNotificationRequest value, Object... args) throws ParseException {
        new AdsDataIO().serialize(writeBuffer, value, args);
    }

    public static AdsDeviceNotificationRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AdsDeviceNotificationRequest");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (length)
long length = readBuffer.readUnsignedLong("length", 32) ;

        // Simple Field (stamps)
long stamps = readBuffer.readUnsignedLong("stamps", 32) ;        // Array field (adsStampHeaders)
        readBuffer.pullContext("adsStampHeaders", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(stamps > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (stamps) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        AdsStampHeader[] adsStampHeaders;
        {
            int itemCount = Math.max(0, (int) stamps);
            adsStampHeaders = new AdsStampHeader[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
adsStampHeaders[curItem] = AdsStampHeaderIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("adsStampHeaders", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("AdsDeviceNotificationRequest");
        // Create the instance
        return new AdsDeviceNotificationRequestBuilder(length, stamps, adsStampHeaders);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AdsDeviceNotificationRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AdsDeviceNotificationRequest");

        // Simple Field (length)
        long length = (long) _value.getLength();
        writeBuffer.writeUnsignedLong("length", 32, ((Number) (length)).longValue());

        // Simple Field (stamps)
        long stamps = (long) _value.getStamps();
        writeBuffer.writeUnsignedLong("stamps", 32, ((Number) (stamps)).longValue());

        // Array Field (adsStampHeaders)
        if(_value.getAdsStampHeaders() != null) {
            writeBuffer.pushContext("adsStampHeaders", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getAdsStampHeaders().length;
            int curItem = 0;
            for(AdsStampHeader element : _value.getAdsStampHeaders()) {
                boolean lastItem = curItem == (itemCount - 1);
                AdsStampHeaderIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("adsStampHeaders", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("AdsDeviceNotificationRequest");
    }

    public static class AdsDeviceNotificationRequestBuilder implements AdsDataIO.AdsDataBuilder {
        private final long length;
        private final long stamps;
        private final AdsStampHeader[] adsStampHeaders;

        public AdsDeviceNotificationRequestBuilder(long length, long stamps, AdsStampHeader[] adsStampHeaders) {
            this.length = length;
            this.stamps = stamps;
            this.adsStampHeaders = adsStampHeaders;
        }

        public AdsDeviceNotificationRequest build() {
            return new AdsDeviceNotificationRequest(length, stamps, adsStampHeaders);
        }
    }

}
