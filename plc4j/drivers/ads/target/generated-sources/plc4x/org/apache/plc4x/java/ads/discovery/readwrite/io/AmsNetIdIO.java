/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.discovery.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.discovery.readwrite.*;

import org.apache.plc4x.java.ads.discovery.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AmsNetIdIO implements MessageIO<AmsNetId, AmsNetId> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AmsNetIdIO.class);

    @Override
    public AmsNetId parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return AmsNetIdIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AmsNetId value, Object... args) throws ParseException {
        AmsNetIdIO.staticSerialize(writeBuffer, value);
    }

    public static AmsNetId staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AmsNetId");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (octet1)
short octet1 = readBuffer.readUnsignedShort("octet1", 8) ;

        // Simple Field (octet2)
short octet2 = readBuffer.readUnsignedShort("octet2", 8) ;

        // Simple Field (octet3)
short octet3 = readBuffer.readUnsignedShort("octet3", 8) ;

        // Simple Field (octet4)
short octet4 = readBuffer.readUnsignedShort("octet4", 8) ;

        // Simple Field (octet5)
short octet5 = readBuffer.readUnsignedShort("octet5", 8) ;

        // Simple Field (octet6)
short octet6 = readBuffer.readUnsignedShort("octet6", 8) ;
        readBuffer.closeContext("AmsNetId");
        // Create the instance
        return new AmsNetId(octet1, octet2, octet3, octet4, octet5, octet6);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AmsNetId _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AmsNetId");

        // Simple Field (octet1)
        short octet1 = (short) _value.getOctet1();
        writeBuffer.writeUnsignedShort("octet1", 8, ((Number) (octet1)).shortValue());

        // Simple Field (octet2)
        short octet2 = (short) _value.getOctet2();
        writeBuffer.writeUnsignedShort("octet2", 8, ((Number) (octet2)).shortValue());

        // Simple Field (octet3)
        short octet3 = (short) _value.getOctet3();
        writeBuffer.writeUnsignedShort("octet3", 8, ((Number) (octet3)).shortValue());

        // Simple Field (octet4)
        short octet4 = (short) _value.getOctet4();
        writeBuffer.writeUnsignedShort("octet4", 8, ((Number) (octet4)).shortValue());

        // Simple Field (octet5)
        short octet5 = (short) _value.getOctet5();
        writeBuffer.writeUnsignedShort("octet5", 8, ((Number) (octet5)).shortValue());

        // Simple Field (octet6)
        short octet6 = (short) _value.getOctet6();
        writeBuffer.writeUnsignedShort("octet6", 8, ((Number) (octet6)).shortValue());
        writeBuffer.popContext("AmsNetId");
    }

}
