/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum ReturnCode {

    OK((long) 0x00),
    INTERNAL_ERROR((long) 0x01),
    NO_REALTIME((long) 0x02),
    SAVE_ERROR((long) 0x03),
    MAILBOX_FULL((long) 0x04),
    WRONG_HMSG((long) 0x05),
    TARGET_PORT_NOT_FOUND((long) 0x06),
    TARGET_HOST_NOT_FOUND((long) 0x07),
    UNKNOWN_COMMAND_ID((long) 0x08),
    UNKNOWN_TASK_ID((long) 0x09),
    NO_IO((long) 0x0A),
    UNKNOWN_ADS_COMMAND((long) 0x0B),
    WIN32_ERROR((long) 0x0C),
    PORT_NOT_CONNECTED((long) 0x0D),
    INVALID_ADS_LENGTH((long) 0x0E),
    INVALID_AMS_NET_ID((long) 0x0F),
    LOW_INSTALLATION_LEVEL((long) 0x10),
    NO_DEBUGGING_AVAILABLE((long) 0x11),
    PORT_DEACTIVATED((long) 0x12),
    PORT_ALREADY_CONNECTED((long) 0x13),
    ADS_SYNC_WIN32_ERROR((long) 0x14),
    ADS_SYNC_TIMEOUT((long) 0x15),
    ADS_SYNC_AMS_ERROR((long) 0x16),
    NO_INDEX_MAP_FOR_ADS_AVAILABLE((long) 0x17),
    INVALID_ADS_PORT((long) 0x18),
    NO_MEMORY((long) 0x19),
    TCP_SENDING_ERROR((long) 0x1A),
    HOST_NOT_REACHABLE((long) 0x1B),
    INVALID_AMS_FRAGMENT((long) 0x1C),
    ROUTERERR_NOLOCKEDMEMORY((long) 0x500),
    ROUTERERR_RESIZEMEMORY((long) 0x501),
    ROUTERERR_MAILBOXFULL((long) 0x502),
    ROUTERERR_DEBUGBOXFULL((long) 0x503),
    ROUTERERR_UNKNOWNPORTTYPE((long) 0x504),
    ROUTERERR_NOTINITIALIZED((long) 0x505),
    ROUTERERR_PORTALREADYINUSE((long) 0x506),
    ROUTERERR_NOTREGISTERED((long) 0x507),
    ROUTERERR_NOMOREQUEUES((long) 0x508),
    ROUTERERR_INVALIDPORT((long) 0x509),
    ROUTERERR_NOTACTIVATED((long) 0x50A),
    ADSERR_DEVICE_ERROR((long) 0x700),
    ADSERR_DEVICE_SRVNOTSUPP((long) 0x701),
    ADSERR_DEVICE_INVALIDGRP((long) 0x702),
    ADSERR_DEVICE_INVALIDOFFSET((long) 0x703),
    ADSERR_DEVICE_INVALIDACCESS((long) 0x704),
    ADSERR_DEVICE_INVALIDSIZE((long) 0x705),
    ADSERR_DEVICE_INVALIDDATA((long) 0x706),
    ADSERR_DEVICE_NOTREADY((long) 0x707),
    ADSERR_DEVICE_BUSY((long) 0x708),
    ADSERR_DEVICE_INVALIDCONTEXT((long) 0x709),
    ADSERR_DEVICE_NOMEMORY((long) 0x70A),
    ADSERR_DEVICE_INVALIDPARM((long) 0x70B),
    ADSERR_DEVICE_NOTFOUND((long) 0x70C),
    ADSERR_DEVICE_SYNTAX((long) 0x70D),
    ADSERR_DEVICE_INCOMPATIBLE((long) 0x70E),
    ADSERR_DEVICE_EXISTS((long) 0x70F),
    ADSERR_DEVICE_SYMBOLNOTFOUND((long) 0x710),
    ADSERR_DEVICE_SYMBOLVERSIONINVALID((long) 0x711),
    ADSERR_DEVICE_INVALIDSTATE((long) 0x712),
    ADSERR_DEVICE_TRANSMODENOTSUPP((long) 0x713),
    ADSERR_DEVICE_NOTIFYHNDINVALID((long) 0x714),
    ADSERR_DEVICE_CLIENTUNKNOWN((long) 0x715),
    ADSERR_DEVICE_NOMOREHDLS((long) 0x716),
    ADSERR_DEVICE_INVALIDWATCHSIZE((long) 0x717),
    ADSERR_DEVICE_NOTINIT((long) 0x718),
    ADSERR_DEVICE_TIMEOUT((long) 0x719),
    ADSERR_DEVICE_NOINTERFACE((long) 0x71A),
    ADSERR_DEVICE_INVALIDINTERFACE((long) 0x71B),
    ADSERR_DEVICE_INVALIDCLSID((long) 0x71C),
    ADSERR_DEVICE_INVALIDOBJID((long) 0x71D),
    ADSERR_DEVICE_PENDING((long) 0x71E),
    ADSERR_DEVICE_ABORTED((long) 0x71F),
    ADSERR_DEVICE_WARNING((long) 0x720),
    ADSERR_DEVICE_INVALIDARRAYIDX((long) 0x721),
    ADSERR_DEVICE_SYMBOLNOTACTIVE((long) 0x722),
    ADSERR_DEVICE_ACCESSDENIED((long) 0x723),
    ADSERR_DEVICE_LICENSENOTFOUND((long) 0x724),
    ADSERR_DEVICE_LICENSEEXPIRED((long) 0x725),
    ADSERR_DEVICE_LICENSEEXCEEDED((long) 0x726),
    ADSERR_DEVICE_LICENSEINVALID((long) 0x727),
    ADSERR_DEVICE_LICENSESYSTEMID((long) 0x728),
    ADSERR_DEVICE_LICENSENOTIMELIMIT((long) 0x729),
    ADSERR_DEVICE_LICENSEFUTUREISSUE((long) 0x72A),
    ADSERR_DEVICE_LICENSETIMETOLONG((long) 0x72B),
    ADSERR_DEVICE_EXCEPTION((long) 0x72c),
    ADSERR_DEVICE_LICENSEDUPLICATED((long) 0x72D),
    ADSERR_DEVICE_SIGNATUREINVALID((long) 0x72E),
    ADSERR_DEVICE_CERTIFICATEINVALID((long) 0x72F),
    ADSERR_CLIENT_ERROR((long) 0x740),
    ADSERR_CLIENT_INVALIDPARM((long) 0x741),
    ADSERR_CLIENT_LISTEMPTY((long) 0x742),
    ADSERR_CLIENT_VARUSED((long) 0x743),
    ADSERR_CLIENT_DUPLINVOKEID((long) 0x744),
    ADSERR_CLIENT_SYNCTIMEOUT((long) 0x745),
    ADSERR_CLIENT_W32ERROR((long) 0x746),
    ADSERR_CLIENT_TIMEOUTINVALID((long) 0x747),
    ADSERR_CLIENT_PORTNOTOPEN((long) 0x748),
    ADSERR_CLIENT_NOAMSADDR((long) 0x750),
    ADSERR_CLIENT_SYNCINTERNAL((long) 0x751),
    ADSERR_CLIENT_ADDHASH((long) 0x752),
    ADSERR_CLIENT_REMOVEHASH((long) 0x753),
    ADSERR_CLIENT_NOMORESYM((long) 0x754),
    ADSERR_CLIENT_SYNCRESINVALID((long) 0x755),
    RTERR_INTERNAL((long) 0x1000),
    RTERR_BADTIMERPERIODS((long) 0x1001),
    RTERR_INVALIDTASKPTR((long) 0x1002),
    RTERR_INVALIDSTACKPTR((long) 0x1003),
    RTERR_PRIOEXISTS((long) 0x1004),
    RTERR_NOMORETCB((long) 0x1005),
    RTERR_NOMORESEMAS((long) 0x1006),
    RTERR_NOMOREQUEUES((long) 0x1007),
    RTERR_EXTIRQALREADYDEF((long) 0x100D),
    RTERR_EXTIRQNOTDEF((long) 0x100E),
    RTERR_EXTIRQINSTALLFAILED((long) 0x100F),
    RTERR_IRQLNOTLESSOREQUAL((long) 0x1010),
    RTERR_VMXNOTSUPPORTED((long) 0x1017),
    RTERR_VMXDISABLED((long) 0x1018),
    RTERR_VMXCONTROLSMISSING((long) 0x1019),
    RTERR_VMXENABLEFAILS((long) 0x101A),
    WSAETIMEDOUT((long) 0x274C),
    WSAECONNREFUSED((long) 0x274D),
    WSAEHOSTUNREACH((long) 0x2751);

    private static final Logger logger = LoggerFactory.getLogger(ReturnCode.class);

    private static final Map<Long, ReturnCode> map;
    static {
        map = new HashMap<>();
        for (ReturnCode value : ReturnCode.values()) {
            map.put((long) value.getValue(), value);
        }
    }

    private long value;

    ReturnCode(long value) {
        this.value = value;
    }

    public long getValue() {
        return value;
    }

    public static ReturnCode enumForValue(long value) {
        if (!map.containsKey(value)) {
            logger.error("No ReturnCode for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(long value) {
        return map.containsKey(value);
    }

}
