/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.ads.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.ads.readwrite.*;
import org.apache.plc4x.java.ads.readwrite.io.*;
import org.apache.plc4x.java.ads.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AdsMultiRequestItemReadWriteIO implements MessageIO<AdsMultiRequestItemReadWrite, AdsMultiRequestItemReadWrite> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdsMultiRequestItemReadWriteIO.class);

    @Override
    public AdsMultiRequestItemReadWrite parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AdsMultiRequestItemReadWrite) new AdsMultiRequestItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AdsMultiRequestItemReadWrite value, Object... args) throws ParseException {
        new AdsMultiRequestItemIO().serialize(writeBuffer, value, args);
    }

    public static AdsMultiRequestItemReadWriteBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AdsMultiRequestItemReadWrite");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (itemIndexGroup)
long itemIndexGroup = readBuffer.readUnsignedLong("itemIndexGroup", 32) ;

        // Simple Field (itemIndexOffset)
long itemIndexOffset = readBuffer.readUnsignedLong("itemIndexOffset", 32) ;

        // Simple Field (itemReadLength)
long itemReadLength = readBuffer.readUnsignedLong("itemReadLength", 32) ;

        // Simple Field (itemWriteLength)
long itemWriteLength = readBuffer.readUnsignedLong("itemWriteLength", 32) ;
        readBuffer.closeContext("AdsMultiRequestItemReadWrite");
        // Create the instance
        return new AdsMultiRequestItemReadWriteBuilder(itemIndexGroup, itemIndexOffset, itemReadLength, itemWriteLength);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AdsMultiRequestItemReadWrite _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AdsMultiRequestItemReadWrite");

        // Simple Field (itemIndexGroup)
        long itemIndexGroup = (long) _value.getItemIndexGroup();
        writeBuffer.writeUnsignedLong("itemIndexGroup", 32, ((Number) (itemIndexGroup)).longValue());

        // Simple Field (itemIndexOffset)
        long itemIndexOffset = (long) _value.getItemIndexOffset();
        writeBuffer.writeUnsignedLong("itemIndexOffset", 32, ((Number) (itemIndexOffset)).longValue());

        // Simple Field (itemReadLength)
        long itemReadLength = (long) _value.getItemReadLength();
        writeBuffer.writeUnsignedLong("itemReadLength", 32, ((Number) (itemReadLength)).longValue());

        // Simple Field (itemWriteLength)
        long itemWriteLength = (long) _value.getItemWriteLength();
        writeBuffer.writeUnsignedLong("itemWriteLength", 32, ((Number) (itemWriteLength)).longValue());
        writeBuffer.popContext("AdsMultiRequestItemReadWrite");
    }

    public static class AdsMultiRequestItemReadWriteBuilder implements AdsMultiRequestItemIO.AdsMultiRequestItemBuilder {
        private final long itemIndexGroup;
        private final long itemIndexOffset;
        private final long itemReadLength;
        private final long itemWriteLength;

        public AdsMultiRequestItemReadWriteBuilder(long itemIndexGroup, long itemIndexOffset, long itemReadLength, long itemWriteLength) {
            this.itemIndexGroup = itemIndexGroup;
            this.itemIndexOffset = itemIndexOffset;
            this.itemReadLength = itemReadLength;
            this.itemWriteLength = itemWriteLength;
        }

        public AdsMultiRequestItemReadWrite build() {
            return new AdsMultiRequestItemReadWrite(itemIndexGroup, itemIndexOffset, itemReadLength, itemWriteLength);
        }
    }

}
