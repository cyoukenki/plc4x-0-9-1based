/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.firmata.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.firmata.readwrite.*;
import org.apache.plc4x.java.firmata.readwrite.io.*;
import org.apache.plc4x.java.firmata.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class FirmataCommandSetDigitalPinValueIO implements MessageIO<FirmataCommandSetDigitalPinValue, FirmataCommandSetDigitalPinValue> {

    private static final Logger LOGGER = LoggerFactory.getLogger(FirmataCommandSetDigitalPinValueIO.class);

    @Override
    public FirmataCommandSetDigitalPinValue parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (FirmataCommandSetDigitalPinValue) new FirmataCommandIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, FirmataCommandSetDigitalPinValue value, Object... args) throws ParseException {
        new FirmataCommandIO().serialize(writeBuffer, value, args);
    }

    public static FirmataCommandSetDigitalPinValueBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("FirmataCommandSetDigitalPinValue");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (pin)
short pin = readBuffer.readUnsignedShort("pin", 8) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (on)
boolean on = readBuffer.readBit("on") ;
        readBuffer.closeContext("FirmataCommandSetDigitalPinValue");
        // Create the instance
        return new FirmataCommandSetDigitalPinValueBuilder(pin, on);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, FirmataCommandSetDigitalPinValue _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("FirmataCommandSetDigitalPinValue");

        // Simple Field (pin)
        short pin = (short) _value.getPin();
        writeBuffer.writeUnsignedShort("pin", 8, ((Number) (pin)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (on)
        boolean on = (boolean) _value.getOn();
        writeBuffer.writeBit("on", (boolean) (on));
        writeBuffer.popContext("FirmataCommandSetDigitalPinValue");
    }

    public static class FirmataCommandSetDigitalPinValueBuilder implements FirmataCommandIO.FirmataCommandBuilder {
        private final short pin;
        private final boolean on;

        public FirmataCommandSetDigitalPinValueBuilder(short pin, boolean on) {
            this.pin = pin;
            this.on = on;
        }

        public FirmataCommandSetDigitalPinValue build() {
            return new FirmataCommandSetDigitalPinValue(pin, on);
        }
    }

}
