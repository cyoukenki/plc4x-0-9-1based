/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.firmata.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.firmata.readwrite.*;
import org.apache.plc4x.java.firmata.readwrite.io.*;
import org.apache.plc4x.java.firmata.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SysexCommandIO implements MessageIO<SysexCommand, SysexCommand> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysexCommandIO.class);

    @Override
    public SysexCommand parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Boolean response;
        if(args[0] instanceof Boolean) {
            response = (Boolean) args[0];
        } else if (args[0] instanceof String) {
            response = Boolean.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean or a string which is parseable but was " + args[0].getClass().getName());
        }
        return SysexCommandIO.staticParse(readBuffer, response);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SysexCommand value, Object... args) throws ParseException {
        SysexCommandIO.staticSerialize(writeBuffer, value);
    }

    public static SysexCommand staticParse(ReadBuffer readBuffer, Boolean response) throws ParseException {
        readBuffer.pullContext("SysexCommand");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (commandType) (Used as input to a switch field)
        short commandType = readBuffer.readUnsignedShort("commandType", 8);


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        SysexCommandBuilder builder = null;
                if(EvaluationHelper.equals(commandType, 0x00)) {
            builder = SysexCommandExendedIdIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x69) && EvaluationHelper.equals(response, false)) {
            builder = SysexCommandAnalogMappingQueryRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x69) && EvaluationHelper.equals(response, true)) {
            builder = SysexCommandAnalogMappingQueryResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6A)) {
            builder = SysexCommandAnalogMappingResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6B)) {
            builder = SysexCommandCapabilityQueryIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6C)) {
            builder = SysexCommandCapabilityResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6D)) {
            builder = SysexCommandPinStateQueryIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6E)) {
            builder = SysexCommandPinStateResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x6F)) {
            builder = SysexCommandExtendedAnalogIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x71)) {
            builder = SysexCommandStringDataIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x79) && EvaluationHelper.equals(response, false)) {
            builder = SysexCommandReportFirmwareRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x79) && EvaluationHelper.equals(response, true)) {
            builder = SysexCommandReportFirmwareResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x7A)) {
            builder = SysexCommandSamplingIntervalIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x7E)) {
            builder = SysexCommandSysexNonRealtimeIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(commandType, 0x7F)) {
            builder = SysexCommandSysexRealtimeIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("SysexCommand");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SysexCommand _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SysexCommand");

        // Discriminator Field (commandType) (Used as input to a switch field)
        short commandType = (short) _value.getCommandType();
            writeBuffer.writeUnsignedShort("commandType", 8, ((Number) (commandType)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof SysexCommandExendedId) {
            SysexCommandExendedIdIO.staticSerialize(writeBuffer, (SysexCommandExendedId) _value);
        } else 
        if(_value instanceof SysexCommandAnalogMappingQueryRequest) {
            SysexCommandAnalogMappingQueryRequestIO.staticSerialize(writeBuffer, (SysexCommandAnalogMappingQueryRequest) _value);
        } else 
        if(_value instanceof SysexCommandAnalogMappingQueryResponse) {
            SysexCommandAnalogMappingQueryResponseIO.staticSerialize(writeBuffer, (SysexCommandAnalogMappingQueryResponse) _value);
        } else 
        if(_value instanceof SysexCommandAnalogMappingResponse) {
            SysexCommandAnalogMappingResponseIO.staticSerialize(writeBuffer, (SysexCommandAnalogMappingResponse) _value);
        } else 
        if(_value instanceof SysexCommandCapabilityQuery) {
            SysexCommandCapabilityQueryIO.staticSerialize(writeBuffer, (SysexCommandCapabilityQuery) _value);
        } else 
        if(_value instanceof SysexCommandCapabilityResponse) {
            SysexCommandCapabilityResponseIO.staticSerialize(writeBuffer, (SysexCommandCapabilityResponse) _value);
        } else 
        if(_value instanceof SysexCommandPinStateQuery) {
            SysexCommandPinStateQueryIO.staticSerialize(writeBuffer, (SysexCommandPinStateQuery) _value);
        } else 
        if(_value instanceof SysexCommandPinStateResponse) {
            SysexCommandPinStateResponseIO.staticSerialize(writeBuffer, (SysexCommandPinStateResponse) _value);
        } else 
        if(_value instanceof SysexCommandExtendedAnalog) {
            SysexCommandExtendedAnalogIO.staticSerialize(writeBuffer, (SysexCommandExtendedAnalog) _value);
        } else 
        if(_value instanceof SysexCommandStringData) {
            SysexCommandStringDataIO.staticSerialize(writeBuffer, (SysexCommandStringData) _value);
        } else 
        if(_value instanceof SysexCommandReportFirmwareRequest) {
            SysexCommandReportFirmwareRequestIO.staticSerialize(writeBuffer, (SysexCommandReportFirmwareRequest) _value);
        } else 
        if(_value instanceof SysexCommandReportFirmwareResponse) {
            SysexCommandReportFirmwareResponseIO.staticSerialize(writeBuffer, (SysexCommandReportFirmwareResponse) _value);
        } else 
        if(_value instanceof SysexCommandSamplingInterval) {
            SysexCommandSamplingIntervalIO.staticSerialize(writeBuffer, (SysexCommandSamplingInterval) _value);
        } else 
        if(_value instanceof SysexCommandSysexNonRealtime) {
            SysexCommandSysexNonRealtimeIO.staticSerialize(writeBuffer, (SysexCommandSysexNonRealtime) _value);
        } else 
        if(_value instanceof SysexCommandSysexRealtime) {
            SysexCommandSysexRealtimeIO.staticSerialize(writeBuffer, (SysexCommandSysexRealtime) _value);
        }
        writeBuffer.popContext("SysexCommand");
    }

    public static interface SysexCommandBuilder {
        SysexCommand build();
    }

}
