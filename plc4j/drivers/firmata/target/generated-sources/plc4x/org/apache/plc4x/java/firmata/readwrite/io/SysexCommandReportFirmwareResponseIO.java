/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.firmata.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.firmata.readwrite.*;
import org.apache.plc4x.java.firmata.readwrite.io.*;
import org.apache.plc4x.java.firmata.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SysexCommandReportFirmwareResponseIO implements MessageIO<SysexCommandReportFirmwareResponse, SysexCommandReportFirmwareResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysexCommandReportFirmwareResponseIO.class);

    @Override
    public SysexCommandReportFirmwareResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SysexCommandReportFirmwareResponse) new SysexCommandIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SysexCommandReportFirmwareResponse value, Object... args) throws ParseException {
        new SysexCommandIO().serialize(writeBuffer, value, args);
    }

    public static SysexCommandReportFirmwareResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SysexCommandReportFirmwareResponse");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (majorVersion)
short majorVersion = readBuffer.readUnsignedShort("majorVersion", 8) ;

        // Simple Field (minorVersion)
short minorVersion = readBuffer.readUnsignedShort("minorVersion", 8) ;
        readBuffer.pullContext("fileName", WithReaderWriterArgs.WithRenderAsList(true));
        // Manual Array Field (fileName)
        // Terminated array
        List<Byte> _fileNameList = new LinkedList<>();
        while(!((boolean) (org.apache.plc4x.java.firmata.readwrite.utils.FirmataUtils.isSysexEnd(readBuffer)))) {
            _fileNameList.add((byte) (org.apache.plc4x.java.firmata.readwrite.utils.FirmataUtils.parseSysexString(readBuffer)));

        }
        byte[] fileName = new byte[_fileNameList.size()];
        for(int i = 0; i < _fileNameList.size(); i++) {
            fileName[i] = (byte) _fileNameList.get(i);
        }
        readBuffer.closeContext("fileName", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("SysexCommandReportFirmwareResponse");
        // Create the instance
        return new SysexCommandReportFirmwareResponseBuilder(majorVersion, minorVersion, fileName);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SysexCommandReportFirmwareResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SysexCommandReportFirmwareResponse");

        // Simple Field (majorVersion)
        short majorVersion = (short) _value.getMajorVersion();
        writeBuffer.writeUnsignedShort("majorVersion", 8, ((Number) (majorVersion)).shortValue());

        // Simple Field (minorVersion)
        short minorVersion = (short) _value.getMinorVersion();
        writeBuffer.writeUnsignedShort("minorVersion", 8, ((Number) (minorVersion)).shortValue());

        // Manual Array Field (fileName)
        if(_value.getFileName() != null) {
            writeBuffer.pushContext("fileName", WithReaderWriterArgs.WithRenderAsList(true));
            for(byte element : _value.getFileName()) {
                org.apache.plc4x.java.firmata.readwrite.utils.FirmataUtils.serializeSysexString(writeBuffer, element);
            }
            writeBuffer.popContext("fileName", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("SysexCommandReportFirmwareResponse");
    }

    public static class SysexCommandReportFirmwareResponseBuilder implements SysexCommandIO.SysexCommandBuilder {
        private final short majorVersion;
        private final short minorVersion;
        private final byte[] fileName;

        public SysexCommandReportFirmwareResponseBuilder(short majorVersion, short minorVersion, byte[] fileName) {
            this.majorVersion = majorVersion;
            this.minorVersion = minorVersion;
            this.fileName = fileName;
        }

        public SysexCommandReportFirmwareResponse build() {
            return new SysexCommandReportFirmwareResponse(majorVersion, minorVersion, fileName);
        }
    }

}
