/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.serial.direct.readwrite.model.io;

import org.apache.plc4x.java.serial.direct.readwrite.model.SerialDirect;
import org.apache.plc4x.java.spi.generation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Code generated by code-generation. DO NOT EDIT.

public class SerialDirectIO implements MessageIO<SerialDirect, SerialDirect> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SerialDirectIO.class);

    @Override
    public SerialDirect parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return SerialDirectIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SerialDirect value, Object... args) throws ParseException {
        SerialDirectIO.staticSerialize(writeBuffer, value);
    }

    public static SerialDirect staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SerialDirect");
        int startPos = readBuffer.getPos();
        int curPos;
        long totalBytes = ((ReadBufferByteBased) readBuffer).getTotalBytes();

        // Simple Field (pcb)
String pcb = readBuffer.readString("pcb", (int) (totalBytes*8), "'UTF-8'") ;
        readBuffer.closeContext("SerialDirect");
        // Create the instance
        return new SerialDirect(pcb);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SerialDirect _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SerialDirect");

        // Simple Field (pcb)
        String pcb = (String) _value.getPcb();
        writeBuffer.writeString("pcb", pcb.length()*8, "'UTF-8'", (String) (pcb));
        writeBuffer.popContext("SerialDirect");
    }

}
