/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.genericcan.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum GenericCANDataType {

    BYTE((short) 8),
    BOOLEAN((short) 1),
    UNSIGNED8((short) 8),
    UNSIGNED16((short) 16),
    UNSIGNED24((short) 24),
    UNSIGNED32((short) 32),
    UNSIGNED40((short) 40),
    UNSIGNED48((short) 48),
    UNSIGNED56((short) 56),
    UNSIGNED64((short) 64),
    INTEGER8((short) 8),
    INTEGER16((short) 16),
    INTEGER24((short) 24),
    INTEGER32((short) 32),
    INTEGER40((short) 40),
    INTEGER48((short) 48),
    INTEGER56((short) 56),
    INTEGER64((short) 64),
    REAL32((short) 32),
    REAL64((short) 64);

        private short numBits;

    GenericCANDataType(short numBits) {

        this.numBits = numBits;
    }


    public short getNumBits() {
        return numBits;
    }

    public static GenericCANDataType firstEnumForFieldNumBits(short fieldValue) {
        for (GenericCANDataType _val : GenericCANDataType.values()) {
            if(_val.getNumBits() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<GenericCANDataType> enumsForFieldNumBits(short fieldValue) {
        List<GenericCANDataType> _values = new ArrayList();
        for (GenericCANDataType _val : GenericCANDataType.values()) {
            if(_val.getNumBits() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }



}
