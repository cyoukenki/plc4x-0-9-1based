/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.genericcan.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.api.model.PlcField;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.EvaluationHelper;
import org.apache.plc4x.java.spi.generation.ParseException;
import org.apache.plc4x.java.spi.generation.ReadBuffer;
import org.apache.plc4x.java.spi.generation.WriteBufferByteBased;
import org.apache.plc4x.java.genericcan.readwrite.*;
import org.apache.plc4x.java.genericcan.readwrite.types.*;
import org.apache.plc4x.java.spi.values.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.*;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataItemIO {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataItemIO.class);
    public static PlcValue staticParse(ReadBuffer readBuffer, GenericCANDataType dataType) throws ParseException {
if(EvaluationHelper.equals(dataType, GenericCANDataType.BYTE)) { // BYTE

            // Simple Field (value)
            Byte value = readBuffer.readByte("");

            return new PlcBYTE(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.BOOLEAN)) { // BOOL

            // Simple Field (value)
            Boolean value = readBuffer.readBit("");

            return new PlcBOOL(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED8)) { // USINT

            // Simple Field (value)
            Short value = readBuffer.readUnsignedShort("", 8);

            return new PlcUSINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED16)) { // UINT

            // Simple Field (value)
            Integer value = readBuffer.readUnsignedInt("", 16);

            return new PlcUINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED24)) { // UDINT

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 24);

            return new PlcUDINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED32)) { // UDINT

            // Simple Field (value)
            Long value = readBuffer.readUnsignedLong("", 32);

            return new PlcUDINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED40)) { // ULINT

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 40);

            return new PlcULINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED48)) { // ULINT

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 48);

            return new PlcULINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED56)) { // ULINT

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 56);

            return new PlcULINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.UNSIGNED64)) { // ULINT

            // Simple Field (value)
            BigInteger value = readBuffer.readUnsignedBigInteger("", 64);

            return new PlcULINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER8)) { // SINT

            // Simple Field (value)
            Byte value = readBuffer.readSignedByte("", 8);

            return new PlcSINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER16)) { // INT

            // Simple Field (value)
            Short value = readBuffer.readShort("", 16);

            return new PlcINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER24)) { // DINT

            // Simple Field (value)
            Integer value = readBuffer.readInt("", 24);

            return new PlcDINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER32)) { // DINT

            // Simple Field (value)
            Integer value = readBuffer.readInt("", 32);

            return new PlcDINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER40)) { // LINT

            // Simple Field (value)
            Long value = readBuffer.readLong("", 40);

            return new PlcLINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER48)) { // LINT

            // Simple Field (value)
            Long value = readBuffer.readLong("", 48);

            return new PlcLINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER56)) { // LINT

            // Simple Field (value)
            Long value = readBuffer.readLong("", 56);

            return new PlcLINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.INTEGER64)) { // LINT

            // Simple Field (value)
            Long value = readBuffer.readLong("", 64);

            return new PlcLINT(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.REAL32)) { // REAL

            // Simple Field (value)
            Float value = ((Supplier<Float>) (() -> {
            return (float) toFloat(readBuffer, "", true, 8, 23);
        })).get();

            return new PlcREAL(value);
        } else if(EvaluationHelper.equals(dataType, GenericCANDataType.REAL64)) { // LREAL

            // Simple Field (value)
            Double value = ((Supplier<Double>) (() -> {
            return (double) toFloat(readBuffer, "", true, 11, 52);
        })).get();

            return new PlcLREAL(value);
        }
        return null;
    }

    public static WriteBufferByteBased staticSerialize(PlcValue _value, GenericCANDataType dataType) throws ParseException {
        return staticSerialize(_value, dataType, false);
    }

    public static WriteBufferByteBased staticSerialize(PlcValue _value, GenericCANDataType dataType, boolean littleEndian) throws ParseException {
        if(EvaluationHelper.equals(dataType,GenericCANDataType.BYTE)) { // BYTE
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            byte value = (byte) _value.getByte();
            writeBuffer.writeByte("", ((Number) (value)).byteValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.BOOLEAN)) { // BOOL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 1) / 8.0f), littleEndian);

            // Simple Field (value)
            boolean value = (boolean) _value.getBoolean();
            writeBuffer.writeBit("", (boolean) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED8)) { // USINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            short value = (short) _value.getShort();
            writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED16)) { // UINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 16) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED24)) { // UDINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 24) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 24, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED32)) { // UDINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED40)) { // ULINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 40) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 40, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED48)) { // ULINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 48) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 48, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED56)) { // ULINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 56) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 56, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.UNSIGNED64)) { // ULINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            BigInteger value = (BigInteger) _value.getBigInteger();
            writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER8)) { // SINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 8) / 8.0f), littleEndian);

            // Simple Field (value)
            byte value = (byte) _value.getByte();
            writeBuffer.writeSignedByte("", 8, ((Number) (value)).byteValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER16)) { // INT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 16) / 8.0f), littleEndian);

            // Simple Field (value)
            short value = (short) _value.getShort();
            writeBuffer.writeShort("", 16, ((Number) (value)).shortValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER24)) { // DINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 24) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeInt("", 24, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER32)) { // DINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            int value = (int) _value.getInt();
            writeBuffer.writeInt("", 32, ((Number) (value)).intValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER40)) { // LINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 40) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeLong("", 40, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER48)) { // LINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 48) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeLong("", 48, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER56)) { // LINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 56) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeLong("", 56, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.INTEGER64)) { // LINT
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            long value = (long) _value.getLong();
            writeBuffer.writeLong("", 64, ((Number) (value)).longValue());
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.REAL32)) { // REAL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 32) / 8.0f), littleEndian);

            // Simple Field (value)
            float value = (float) _value.getFloat();
            writeBuffer.writeFloat("", (value),8,23);
            return writeBuffer;
        } else if(EvaluationHelper.equals(dataType,GenericCANDataType.REAL64)) { // LREAL
        WriteBufferByteBased writeBuffer = new WriteBufferByteBased((int) Math.ceil(((float) 64) / 8.0f), littleEndian);

            // Simple Field (value)
            double value = (double) _value.getDouble();
            writeBuffer.writeDouble("", (value),11,52);
            return writeBuffer;
        }
        return null;
    }

}
