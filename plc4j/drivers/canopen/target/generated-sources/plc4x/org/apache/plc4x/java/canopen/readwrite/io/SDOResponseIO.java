/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SDOResponseIO implements MessageIO<SDOResponse, SDOResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SDOResponseIO.class);

    @Override
    public SDOResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        SDOResponseCommand command;
        if(args[0] instanceof SDOResponseCommand) {
            command = (SDOResponseCommand) args[0];
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type SDOResponseCommand or a string which is parseable but was " + args[0].getClass().getName());
        }
        return SDOResponseIO.staticParse(readBuffer, command);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SDOResponse value, Object... args) throws ParseException {
        SDOResponseIO.staticSerialize(writeBuffer, value);
    }

    public static SDOResponse staticParse(ReadBuffer readBuffer, SDOResponseCommand command) throws ParseException {
        readBuffer.pullContext("SDOResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        SDOResponseBuilder builder = null;
                if(EvaluationHelper.equals(command, SDOResponseCommand.SEGMENT_UPLOAD)) {
            builder = SDOSegmentUploadResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, SDOResponseCommand.SEGMENT_DOWNLOAD)) {
            builder = SDOSegmentDownloadResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, SDOResponseCommand.INITIATE_UPLOAD)) {
            builder = SDOInitiateUploadResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, SDOResponseCommand.INITIATE_DOWNLOAD)) {
            builder = SDOInitiateDownloadResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, SDOResponseCommand.ABORT)) {
            builder = SDOAbortResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, SDOResponseCommand.BLOCK)) {
            builder = SDOBlockResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("SDOResponse");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SDOResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SDOResponse");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof SDOSegmentUploadResponse) {
            SDOSegmentUploadResponseIO.staticSerialize(writeBuffer, (SDOSegmentUploadResponse) _value);
        } else 
        if(_value instanceof SDOSegmentDownloadResponse) {
            SDOSegmentDownloadResponseIO.staticSerialize(writeBuffer, (SDOSegmentDownloadResponse) _value);
        } else 
        if(_value instanceof SDOInitiateUploadResponse) {
            SDOInitiateUploadResponseIO.staticSerialize(writeBuffer, (SDOInitiateUploadResponse) _value);
        } else 
        if(_value instanceof SDOInitiateDownloadResponse) {
            SDOInitiateDownloadResponseIO.staticSerialize(writeBuffer, (SDOInitiateDownloadResponse) _value);
        } else 
        if(_value instanceof SDOAbortResponse) {
            SDOAbortResponseIO.staticSerialize(writeBuffer, (SDOAbortResponse) _value);
        } else 
        if(_value instanceof SDOBlockResponse) {
            SDOBlockResponseIO.staticSerialize(writeBuffer, (SDOBlockResponse) _value);
        }
        writeBuffer.popContext("SDOResponse");
    }

    public static interface SDOResponseBuilder {
        SDOResponse build();
    }

}
