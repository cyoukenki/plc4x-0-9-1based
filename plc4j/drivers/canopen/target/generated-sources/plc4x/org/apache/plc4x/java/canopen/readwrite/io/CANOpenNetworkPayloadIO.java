/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CANOpenNetworkPayloadIO implements MessageIO<CANOpenNetworkPayload, CANOpenNetworkPayload> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CANOpenNetworkPayloadIO.class);

    @Override
    public CANOpenNetworkPayload parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CANOpenNetworkPayload) new CANOpenPayloadIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CANOpenNetworkPayload value, Object... args) throws ParseException {
        new CANOpenPayloadIO().serialize(writeBuffer, value, args);
    }

    public static CANOpenNetworkPayloadBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CANOpenNetworkPayload");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("request");
        // Enum field (request)
        NMTStateRequest request = NMTStateRequest.enumForValue(readBuffer.readUnsignedShort("NMTStateRequest", 8));
        readBuffer.closeContext("request");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (node)
short node = readBuffer.readUnsignedShort("node", 7) ;
        readBuffer.closeContext("CANOpenNetworkPayload");
        // Create the instance
        return new CANOpenNetworkPayloadBuilder(request, node);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CANOpenNetworkPayload _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CANOpenNetworkPayload");

        writeBuffer.pushContext("request");
        // Enum field (request)
        NMTStateRequest request = (NMTStateRequest) _value.getRequest();
        writeBuffer.writeUnsignedShort("NMTStateRequest", 8, ((Number) (request.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(request.name()));
        writeBuffer.popContext("request");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x00).byteValue());

        // Simple Field (node)
        short node = (short) _value.getNode();
        writeBuffer.writeUnsignedShort("node", 7, ((Number) (node)).shortValue());
        writeBuffer.popContext("CANOpenNetworkPayload");
    }

    public static class CANOpenNetworkPayloadBuilder implements CANOpenPayloadIO.CANOpenPayloadBuilder {
        private final NMTStateRequest request;
        private final short node;

        public CANOpenNetworkPayloadBuilder(NMTStateRequest request, short node) {
            this.request = request;
            this.node = node;
        }

        public CANOpenNetworkPayload build() {
            return new CANOpenNetworkPayload(request, node);
        }
    }

}
