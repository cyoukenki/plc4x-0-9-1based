/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SDOSegmentDownloadRequestIO implements MessageIO<SDOSegmentDownloadRequest, SDOSegmentDownloadRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SDOSegmentDownloadRequestIO.class);

    @Override
    public SDOSegmentDownloadRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SDOSegmentDownloadRequest) new SDORequestIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SDOSegmentDownloadRequest value, Object... args) throws ParseException {
        new SDORequestIO().serialize(writeBuffer, value, args);
    }

    public static SDOSegmentDownloadRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SDOSegmentDownloadRequest");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (toggle)
boolean toggle = readBuffer.readBit("toggle") ;
        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = readBuffer.readUnsignedByte("size", 3);


        // Simple Field (last)
boolean last = readBuffer.readBit("last") ;        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if((7) - (size) > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + ((7) - (size)) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] data;
        {
            int itemCount = Math.max(0, (int) (7) - (size));
            data = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((7) - (COUNT(data)));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("SDOSegmentDownloadRequest");
        // Create the instance
        return new SDOSegmentDownloadRequestBuilder(toggle, last, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SDOSegmentDownloadRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SDOSegmentDownloadRequest");

        // Simple Field (toggle)
        boolean toggle = (boolean) _value.getToggle();
        writeBuffer.writeBit("toggle", (boolean) (toggle));

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = (byte) ((7) - (COUNT(_value.getData())));
        writeBuffer.writeUnsignedByte("size", 3, ((Number) (size)).byteValue());

        // Simple Field (last)
        boolean last = (boolean) _value.getLast();
        writeBuffer.writeBit("last", (boolean) (last));

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((7) - (COUNT(_value.getData())));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("SDOSegmentDownloadRequest");
    }

    public static class SDOSegmentDownloadRequestBuilder implements SDORequestIO.SDORequestBuilder {
        private final boolean toggle;
        private final boolean last;
        private final byte[] data;

        public SDOSegmentDownloadRequestBuilder(boolean toggle, boolean last, byte[] data) {
            this.toggle = toggle;
            this.last = last;
            this.data = data;
        }

        public SDOSegmentDownloadRequest build() {
            return new SDOSegmentDownloadRequest(toggle, last, data);
        }
    }

}
