/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CANOpenPayloadIO implements MessageIO<CANOpenPayload, CANOpenPayload> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CANOpenPayloadIO.class);

    @Override
    public CANOpenPayload parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        CANOpenService service;
        if(args[0] instanceof CANOpenService) {
            service = (CANOpenService) args[0];
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type CANOpenService or a string which is parseable but was " + args[0].getClass().getName());
        }
        return CANOpenPayloadIO.staticParse(readBuffer, service);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CANOpenPayload value, Object... args) throws ParseException {
        CANOpenPayloadIO.staticSerialize(writeBuffer, value);
    }

    public static CANOpenPayload staticParse(ReadBuffer readBuffer, CANOpenService service) throws ParseException {
        readBuffer.pullContext("CANOpenPayload");
        int startPos = readBuffer.getPos();
        int curPos;

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        CANOpenPayloadBuilder builder = null;
                if(EvaluationHelper.equals(service, CANOpenService.NMT)) {
            builder = CANOpenNetworkPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TIME)) {
            builder = CANOpenTimeSynchronizationIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.RECEIVE_PDO_1)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TRANSMIT_PDO_1)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.RECEIVE_PDO_2)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TRANSMIT_PDO_2)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.RECEIVE_PDO_3)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TRANSMIT_PDO_3)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.RECEIVE_PDO_4)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TRANSMIT_PDO_4)) {
            builder = CANOpenPDOPayloadIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.RECEIVE_SDO)) {
            builder = CANOpenSDORequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.TRANSMIT_SDO)) {
            builder = CANOpenSDOResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(service, CANOpenService.HEARTBEAT)) {
            builder = CANOpenHeartbeatPayloadIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("CANOpenPayload");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CANOpenPayload _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CANOpenPayload");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof CANOpenNetworkPayload) {
            CANOpenNetworkPayloadIO.staticSerialize(writeBuffer, (CANOpenNetworkPayload) _value);
        } else 
        if(_value instanceof CANOpenTimeSynchronization) {
            CANOpenTimeSynchronizationIO.staticSerialize(writeBuffer, (CANOpenTimeSynchronization) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenPDOPayload) {
            CANOpenPDOPayloadIO.staticSerialize(writeBuffer, (CANOpenPDOPayload) _value);
        } else 
        if(_value instanceof CANOpenSDORequest) {
            CANOpenSDORequestIO.staticSerialize(writeBuffer, (CANOpenSDORequest) _value);
        } else 
        if(_value instanceof CANOpenSDOResponse) {
            CANOpenSDOResponseIO.staticSerialize(writeBuffer, (CANOpenSDOResponse) _value);
        } else 
        if(_value instanceof CANOpenHeartbeatPayload) {
            CANOpenHeartbeatPayloadIO.staticSerialize(writeBuffer, (CANOpenHeartbeatPayload) _value);
        }
        writeBuffer.popContext("CANOpenPayload");
    }

    public static interface CANOpenPayloadBuilder {
        CANOpenPayload build();
    }

}
