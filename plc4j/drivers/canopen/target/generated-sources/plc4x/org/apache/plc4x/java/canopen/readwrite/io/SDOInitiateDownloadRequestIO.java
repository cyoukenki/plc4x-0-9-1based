/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SDOInitiateDownloadRequestIO implements MessageIO<SDOInitiateDownloadRequest, SDOInitiateDownloadRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SDOInitiateDownloadRequestIO.class);

    @Override
    public SDOInitiateDownloadRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SDOInitiateDownloadRequest) new SDORequestIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SDOInitiateDownloadRequest value, Object... args) throws ParseException {
        new SDORequestIO().serialize(writeBuffer, value, args);
    }

    public static SDOInitiateDownloadRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SDOInitiateDownloadRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = readBuffer.readUnsignedByte("size", 2);


        // Simple Field (expedited)
boolean expedited = readBuffer.readBit("expedited") ;

        // Simple Field (indicated)
boolean indicated = readBuffer.readBit("indicated") ;
        readBuffer.pullContext("address");

        // Simple Field (address)
IndexAddress address = IndexAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("address");

        readBuffer.pullContext("payload");

        // Simple Field (payload)
SDOInitiateUploadResponsePayload payload = SDOInitiateUploadResponsePayloadIO.staticParse(readBuffer , (boolean) (expedited), (boolean) (indicated), (byte) (size) ) ;        readBuffer.closeContext("payload");

        readBuffer.closeContext("SDOInitiateDownloadRequest");
        // Create the instance
        return new SDOInitiateDownloadRequestBuilder(expedited, indicated, address, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SDOInitiateDownloadRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SDOInitiateDownloadRequest");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x00).byteValue());

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = (byte) (org.apache.plc4x.java.canopen.helper.CANOpenHelper.count(_value.getExpedited(), _value.getIndicated(), _value.getPayload()));
        writeBuffer.writeUnsignedByte("size", 2, ((Number) (size)).byteValue());

        // Simple Field (expedited)
        boolean expedited = (boolean) _value.getExpedited();
        writeBuffer.writeBit("expedited", (boolean) (expedited));

        // Simple Field (indicated)
        boolean indicated = (boolean) _value.getIndicated();
        writeBuffer.writeBit("indicated", (boolean) (indicated));

        // Simple Field (address)
        IndexAddress address = (IndexAddress) _value.getAddress();
        writeBuffer.pushContext("address");
        IndexAddressIO.staticSerialize(writeBuffer, address);
        writeBuffer.popContext("address");

        // Simple Field (payload)
        SDOInitiateUploadResponsePayload payload = (SDOInitiateUploadResponsePayload) _value.getPayload();
        writeBuffer.pushContext("payload");
        SDOInitiateUploadResponsePayloadIO.staticSerialize(writeBuffer, payload);
        writeBuffer.popContext("payload");
        writeBuffer.popContext("SDOInitiateDownloadRequest");
    }

    public static class SDOInitiateDownloadRequestBuilder implements SDORequestIO.SDORequestBuilder {
        private final boolean expedited;
        private final boolean indicated;
        private final IndexAddress address;
        private final SDOInitiateUploadResponsePayload payload;

        public SDOInitiateDownloadRequestBuilder(boolean expedited, boolean indicated, IndexAddress address, SDOInitiateUploadResponsePayload payload) {
            this.expedited = expedited;
            this.indicated = indicated;
            this.address = address;
            this.payload = payload;
        }

        public SDOInitiateDownloadRequest build() {
            return new SDOInitiateDownloadRequest(expedited, indicated, address, payload);
        }
    }

}
