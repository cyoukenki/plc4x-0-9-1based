/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SDOSegmentIO implements MessageIO<SDOSegment, SDOSegment> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SDOSegmentIO.class);

    @Override
    public SDOSegment parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return SDOSegmentIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SDOSegment value, Object... args) throws ParseException {
        SDOSegmentIO.staticSerialize(writeBuffer, value);
    }

    public static SDOSegment staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SDOSegment");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = readBuffer.readUnsignedByte("size", 2);


        // Simple Field (expedited)
boolean expedited = readBuffer.readBit("expedited") ;

        // Simple Field (indicated)
boolean indicated = readBuffer.readBit("indicated") ;
        readBuffer.pullContext("address");

        // Simple Field (address)
IndexAddress address = IndexAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("address");
        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(((((expedited) && (indicated))) ? (4) - (size) : 0) > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (((((expedited) && (indicated))) ? (4) - (size) : 0)) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] data;
        {
            int itemCount = Math.max(0, (int) ((((expedited) && (indicated))) ? (4) - (size) : 0));
            data = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((4) - ((COUNT(data))));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("SDOSegment");
        // Create the instance
        return new SDOSegment(expedited, indicated, address, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SDOSegment _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SDOSegment");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x00).byteValue());

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        byte size = (byte) ((((_value.getExpedited()) && (_value.getIndicated())) ? (4) - (COUNT(_value.getData())) : 0));
        writeBuffer.writeUnsignedByte("size", 2, ((Number) (size)).byteValue());

        // Simple Field (expedited)
        boolean expedited = (boolean) _value.getExpedited();
        writeBuffer.writeBit("expedited", (boolean) (expedited));

        // Simple Field (indicated)
        boolean indicated = (boolean) _value.getIndicated();
        writeBuffer.writeBit("indicated", (boolean) (indicated));

        // Simple Field (address)
        IndexAddress address = (IndexAddress) _value.getAddress();
        writeBuffer.pushContext("address");
        IndexAddressIO.staticSerialize(writeBuffer, address);
        writeBuffer.popContext("address");

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((4) - ((COUNT(_value.getData()))));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("SDOSegment");
    }

}
