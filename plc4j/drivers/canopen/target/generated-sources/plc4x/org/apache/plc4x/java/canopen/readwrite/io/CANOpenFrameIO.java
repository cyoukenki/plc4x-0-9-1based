/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.canopen.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.canopen.readwrite.*;
import org.apache.plc4x.java.canopen.readwrite.io.*;
import org.apache.plc4x.java.canopen.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CANOpenFrameIO implements MessageIO<CANOpenFrame, CANOpenFrame> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CANOpenFrameIO.class);

    @Override
    public CANOpenFrame parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return CANOpenFrameIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CANOpenFrame value, Object... args) throws ParseException {
        CANOpenFrameIO.staticSerialize(writeBuffer, value);
    }

    public static CANOpenFrame staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CANOpenFrame");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (nodeId)
short nodeId = readBuffer.readUnsignedShort("nodeId", 8) ;
        readBuffer.pullContext("service");

        // Simple Field (service)
        // enum based simple field with type CANOpenService
        CANOpenService service = CANOpenService.enumForValue(readBuffer.readUnsignedByte("CANOpenService", 4));
        readBuffer.closeContext("service");

        // Const Field (alignment)
        byte alignment = readBuffer.readUnsignedByte("alignment", 4);
        if(alignment != CANOpenFrame.ALIGNMENT) {
            throw new ParseException("Expected constant value " + CANOpenFrame.ALIGNMENT + " but got " + alignment);
        }

        readBuffer.pullContext("payload");

        // Simple Field (payload)
CANOpenPayload payload = CANOpenPayloadIO.staticParse(readBuffer , (CANOpenService) (service) ) ;        readBuffer.closeContext("payload");

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((8) - ((payload.getLengthInBytes())));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("CANOpenFrame");
        // Create the instance
        return new CANOpenFrame(nodeId, service, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CANOpenFrame _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CANOpenFrame");

        // Simple Field (nodeId)
        short nodeId = (short) _value.getNodeId();
        writeBuffer.writeUnsignedShort("nodeId", 8, ((Number) (nodeId)).shortValue());

        // Simple Field (service)
        CANOpenService service = (CANOpenService) _value.getService();
        writeBuffer.pushContext("service");
        // enum field with type CANOpenService
        writeBuffer.writeUnsignedByte("CANOpenService", 4, ((Number) (service.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(service.name()));
        writeBuffer.popContext("service");

        // Const Field (alignment)
        writeBuffer.writeUnsignedByte("alignment", 4, ((Number) 0x00).byteValue());

        // Simple Field (payload)
        CANOpenPayload payload = (CANOpenPayload) _value.getPayload();
        writeBuffer.pushContext("payload");
        CANOpenPayloadIO.staticSerialize(writeBuffer, payload);
        writeBuffer.popContext("payload");

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((8) - ((_value.getPayload().getLengthInBytes())));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("CANOpenFrame");
    }

}
