/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.simulated.readwrite.io.*;
import org.apache.plc4x.java.simulated.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public abstract class SecsPacket implements Message {

    // Abstract accessors for discriminator values.
    public abstract Integer getStreamFunction();

    // Properties.
    private final int deviceID;
    private final short PType;
    private final short Stype;
    private final long systemBytes;

    public SecsPacket(int deviceID, short PType, short Stype, long systemBytes) {
        this.deviceID = deviceID;
        this.PType = PType;
        this.Stype = Stype;
        this.systemBytes = systemBytes;
    }

    public int getDeviceID() {
        return deviceID;
    }

    public short getPType() {
        return PType;
    }

    public short getStype() {
        return Stype;
    }

    public long getSystemBytes() {
        return systemBytes;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        SecsPacket _value  = this;

        // Implicit Field (len)
        lengthInBits += 32;
        //long len = (long) ((_value.getLengthInBytes()) - (4));

        // Simple field (deviceID)
        lengthInBits += 16;

        // Discriminator Field (streamFunction)
        lengthInBits += 16;

        // Simple field (PType)
        lengthInBits += 8;

        // Simple field (Stype)
        lengthInBits += 8;

        // Simple field (systemBytes)
        lengthInBits += 32;

        // Length of sub-type elements will be added by sub-type...

        return lengthInBits;
    }

    @Override
    public MessageIO<SecsPacket, SecsPacket> getMessageIO() {
        return new SecsPacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SecsPacket)) {
            return false;
        }
        SecsPacket that = (SecsPacket) o;
        return
            (getDeviceID() == that.getDeviceID()) &&
            (getPType() == that.getPType()) &&
            (getStype() == that.getStype()) &&
            (getSystemBytes() == that.getSystemBytes()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getDeviceID(),
            getPType(),
            getStype(),
            getSystemBytes()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("deviceID", getDeviceID())
            .append("PType", getPType())
            .append("Stype", getStype())
            .append("systemBytes", getSystemBytes())
            .toString();
    }

}
