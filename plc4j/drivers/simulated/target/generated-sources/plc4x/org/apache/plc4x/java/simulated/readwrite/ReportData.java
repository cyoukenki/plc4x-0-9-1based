/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.simulated.readwrite.io.*;
import org.apache.plc4x.java.simulated.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ReportData implements Message {


    // Constant values.
    public static final short L = 0x01;
    public static final short L2 = 0x0102;
    public static final int LIST2 = 0x0102;

    // Properties.
    private final short dataLen;
    private final DataStruct aId;
    private final VidData[] vidData;
    private final DataStruct bId;

    public ReportData(short dataLen, DataStruct aId, VidData[] vidData, DataStruct bId) {
        this.dataLen = dataLen;
        this.aId = aId;
        this.vidData = vidData;
        this.bId = bId;
    }

    public short getDataLen() {
        return dataLen;
    }

    public DataStruct getAId() {
        return aId;
    }

    public VidData[] getVidData() {
        return vidData;
    }

    public DataStruct getBId() {
        return bId;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        ReportData _value  = this;

        // Const Field (L)
        lengthInBits += 8;

        // Simple field (dataLen)
        lengthInBits += 8;

        // Const Field (L2)
        lengthInBits += 8;

        // Simple field (aId)
        lengthInBits += aId.getLengthInBits();

        // Array field
        if(vidData != null) {
            int i=0;
            for(VidData element : vidData) {
                boolean last = ++i >= vidData.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Const Field (list2)
        lengthInBits += 16;

        // Simple field (bId)
        lengthInBits += bId.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ReportData, ReportData> getMessageIO() {
        return new ReportDataIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ReportData)) {
            return false;
        }
        ReportData that = (ReportData) o;
        return
            (getDataLen() == that.getDataLen()) &&
            (getAId() == that.getAId()) &&
            (getVidData() == that.getVidData()) &&
            (getBId() == that.getBId()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getDataLen(),
            getAId(),
            getVidData(),
            getBId()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("dataLen", getDataLen())
            .append("aId", getAId())
            .append("vidData", getVidData())
            .append("bId", getBId())
            .toString();
    }

}
