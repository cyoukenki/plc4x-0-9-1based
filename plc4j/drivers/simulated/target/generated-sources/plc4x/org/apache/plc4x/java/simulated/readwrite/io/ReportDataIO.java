/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.simulated.readwrite.*;
import org.apache.plc4x.java.simulated.readwrite.io.*;
import org.apache.plc4x.java.simulated.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ReportDataIO implements MessageIO<ReportData, ReportData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReportDataIO.class);

    @Override
    public ReportData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return ReportDataIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ReportData value, Object... args) throws ParseException {
        ReportDataIO.staticSerialize(writeBuffer, value);
    }

    public static ReportData staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ReportData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (L)
        short L = readBuffer.readUnsignedShort("L", 8);
        if(L != ReportData.L) {
            throw new ParseException("Expected constant value " + ReportData.L + " but got " + L);
        }


        // Simple Field (dataLen)
short dataLen = readBuffer.readUnsignedShort("dataLen", 8) ;
        // Const Field (L2)
        short L2 = readBuffer.readUnsignedShort("L2", 8);
        if(L2 != ReportData.L2) {
            throw new ParseException("Expected constant value " + ReportData.L2 + " but got " + L2);
        }

        readBuffer.pullContext("aId");

        // Simple Field (aId)
DataStruct aId = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("aId");
        // Array field (vidData)
        readBuffer.pullContext("vidData", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(8 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (8) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        VidData[] vidData;
        {
            int itemCount = Math.max(0, (int) 8);
            vidData = new VidData[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
vidData[curItem] = VidDataIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("vidData", WithReaderWriterArgs.WithRenderAsList(true));

        // Const Field (list2)
        int list2 = readBuffer.readUnsignedInt("list2", 16);
        if(list2 != ReportData.LIST2) {
            throw new ParseException("Expected constant value " + ReportData.LIST2 + " but got " + list2);
        }

        readBuffer.pullContext("bId");

        // Simple Field (bId)
DataStruct bId = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("bId");

        readBuffer.closeContext("ReportData");
        // Create the instance
        return new ReportData(dataLen, aId, vidData, bId);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ReportData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ReportData");

        // Const Field (L)
        writeBuffer.writeUnsignedShort("L", 8, ((Number) 0x01).shortValue());

        // Simple Field (dataLen)
        short dataLen = (short) _value.getDataLen();
        writeBuffer.writeUnsignedShort("dataLen", 8, ((Number) (dataLen)).shortValue());

        // Const Field (L2)
        writeBuffer.writeUnsignedShort("L2", 8, ((Number) 0x0102).shortValue());

        // Simple Field (aId)
        DataStruct aId = (DataStruct) _value.getAId();
        writeBuffer.pushContext("aId");
        DataStructIO.staticSerialize(writeBuffer, aId);
        writeBuffer.popContext("aId");

        // Array Field (vidData)
        if(_value.getVidData() != null) {
            writeBuffer.pushContext("vidData", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getVidData().length;
            int curItem = 0;
            for(VidData element : _value.getVidData()) {
                boolean lastItem = curItem == (itemCount - 1);
                VidDataIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("vidData", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Const Field (list2)
        writeBuffer.writeUnsignedInt("list2", 16, ((Number) 0x0102).intValue());

        // Simple Field (bId)
        DataStruct bId = (DataStruct) _value.getBId();
        writeBuffer.pushContext("bId");
        DataStructIO.staticSerialize(writeBuffer, bId);
        writeBuffer.popContext("bId");
        writeBuffer.popContext("ReportData");
    }

}
