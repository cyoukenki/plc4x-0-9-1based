/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum SecsDataTypeCode {

    List((int) 0X000L, (short) 01),
    Byte((int) 0X000B, (short) 21),
    Bool((int) 0X0025, (short) 25),
    STRING256((int) 0X000A, (short) 41),
    SINT((int) 0X0000, (short) 65),
    INT((int) 0X0000, (short) 69),
    DINT((int) 0X0000, (short) 71),
    REAL((int) 0X0000, (short) 91),
    LREAL((int) 0X0000, (short) 81),
    USINT((int) 0X0000, (short) 0xa5),
    UINT((int) 0X0000, (short) 9),
    UDINT((int) 0X0000, (short) 1);

    private static final Logger logger = LoggerFactory.getLogger(SecsDataTypeCode.class);

    private static final Map<Integer, SecsDataTypeCode> map;
    static {
        map = new HashMap<>();
        for (SecsDataTypeCode value : SecsDataTypeCode.values()) {
            map.put((int) value.getValue(), value);
        }
    }

    private int value;
        private short size;

    SecsDataTypeCode(int value, short size) {
        this.value = value;
        this.size = size;
    }

    public int getValue() {
        return value;
    }

    public short getSize() {
        return size;
    }

    public static SecsDataTypeCode firstEnumForFieldSize(short fieldValue) {
        for (SecsDataTypeCode _val : SecsDataTypeCode.values()) {
            if(_val.getSize() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<SecsDataTypeCode> enumsForFieldSize(short fieldValue) {
        List<SecsDataTypeCode> _values = new ArrayList();
        for (SecsDataTypeCode _val : SecsDataTypeCode.values()) {
            if(_val.getSize() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }

    public static SecsDataTypeCode enumForValue(int value) {
        if (!map.containsKey(value)) {
            logger.error("No SecsDataTypeCode for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(int value) {
        return map.containsKey(value);
    }

}
