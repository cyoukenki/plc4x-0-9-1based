/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.simulated.readwrite.*;
import org.apache.plc4x.java.simulated.readwrite.io.*;
import org.apache.plc4x.java.simulated.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S6F11RequestIO implements MessageIO<S6F11Request, S6F11Request> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S6F11RequestIO.class);

    @Override
    public S6F11Request parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S6F11Request) new SecsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S6F11Request value, Object... args) throws ParseException {
        new SecsPacketIO().serialize(writeBuffer, value, args);
    }

    public static S6F11RequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S6F11Request");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (list3)
        int list3 = readBuffer.readUnsignedInt("list3", 16);
        if(list3 != S6F11Request.LIST3) {
            throw new ParseException("Expected constant value " + S6F11Request.LIST3 + " but got " + list3);
        }

        readBuffer.pullContext("dataId");

        // Simple Field (dataId)
DataStruct dataId = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("dataId");

        readBuffer.pullContext("secId");

        // Simple Field (secId)
DataStruct secId = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("secId");
        // Array field (reportData)
        readBuffer.pullContext("reportData", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(8 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (8) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ReportData[] reportData;
        {
            int itemCount = Math.max(0, (int) 8);
            reportData = new ReportData[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
reportData[curItem] = ReportDataIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("reportData", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("S6F11Request");
        // Create the instance
        return new S6F11RequestBuilder(dataId, secId, reportData);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S6F11Request _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S6F11Request");

        // Const Field (list3)
        writeBuffer.writeUnsignedInt("list3", 16, ((Number) 0x0103).intValue());

        // Simple Field (dataId)
        DataStruct dataId = (DataStruct) _value.getDataId();
        writeBuffer.pushContext("dataId");
        DataStructIO.staticSerialize(writeBuffer, dataId);
        writeBuffer.popContext("dataId");

        // Simple Field (secId)
        DataStruct secId = (DataStruct) _value.getSecId();
        writeBuffer.pushContext("secId");
        DataStructIO.staticSerialize(writeBuffer, secId);
        writeBuffer.popContext("secId");

        // Array Field (reportData)
        if(_value.getReportData() != null) {
            writeBuffer.pushContext("reportData", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getReportData().length;
            int curItem = 0;
            for(ReportData element : _value.getReportData()) {
                boolean lastItem = curItem == (itemCount - 1);
                ReportDataIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("reportData", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S6F11Request");
    }

    public static class S6F11RequestBuilder implements SecsPacketIO.SecsPacketBuilder {
        private final DataStruct dataId;
        private final DataStruct secId;
        private final ReportData[] reportData;

        public S6F11RequestBuilder(DataStruct dataId, DataStruct secId, ReportData[] reportData) {
            this.dataId = dataId;
            this.secId = secId;
            this.reportData = reportData;
        }

        public S6F11Request build(int deviceID, short PType, short Stype, long systemBytes) {
            return new S6F11Request(deviceID, PType, Stype, systemBytes, dataId, secId, reportData);
        }
    }

}
