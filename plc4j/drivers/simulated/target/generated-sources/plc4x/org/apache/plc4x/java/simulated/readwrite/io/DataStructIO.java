/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.simulated.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.simulated.readwrite.*;
import org.apache.plc4x.java.simulated.readwrite.io.*;
import org.apache.plc4x.java.simulated.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataStructIO implements MessageIO<DataStruct, DataStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataStructIO.class);

    @Override
    public DataStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DataStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataStruct value, Object... args) throws ParseException {
        DataStructIO.staticSerialize(writeBuffer, value);
    }

    public static DataStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataStruct");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("dataType");
        // Enum field (dataType)
        SecsDataTypeCode dataType = SecsDataTypeCode.enumForValue(readBuffer.readUnsignedInt("SecsDataTypeCode", 16));
        readBuffer.closeContext("dataType");


        // Simple Field (elementNb)
int elementNb = readBuffer.readUnsignedInt("elementNb", 16) ;        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _dataLength = (dataType.getSize()) * (elementNb);
        List<Byte> _dataList = new LinkedList<>();
        long dataEndPos = readBuffer.getPos() + _dataLength;
        while(readBuffer.getPos() < dataEndPos) {
            _dataList.add(readBuffer.readSignedByte("", 8));
        }
        byte[] data = new byte[_dataList.size()];
        for(int i = 0; i < _dataList.size(); i++) {
            data[i] = (byte) _dataList.get(i);
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("DataStruct");
        // Create the instance
        return new DataStruct(dataType, elementNb, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataStruct");

        writeBuffer.pushContext("dataType");
        // Enum field (dataType)
        SecsDataTypeCode dataType = (SecsDataTypeCode) _value.getDataType();
        writeBuffer.writeUnsignedInt("SecsDataTypeCode", 16, ((Number) (dataType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(dataType.name()));
        writeBuffer.popContext("dataType");

        // Simple Field (elementNb)
        int elementNb = (int) _value.getElementNb();
        writeBuffer.writeUnsignedInt("elementNb", 16, ((Number) (elementNb)).intValue());

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("DataStruct");
    }

}
