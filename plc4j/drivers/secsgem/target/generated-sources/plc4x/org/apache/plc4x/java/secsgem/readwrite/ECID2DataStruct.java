/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ECID2DataStruct implements Message {


    // Constant values.
    public static final int L6 = 0x0106;

    // Properties.
    private final DataStruct ECID;
    private final DataStruct ECNAME;
    private final DataStruct ECMIN;
    private final DataStruct ECMAX;
    private final DataStruct ECDEF;
    private final DataStruct UNITS;

    public ECID2DataStruct(DataStruct ECID, DataStruct ECNAME, DataStruct ECMIN, DataStruct ECMAX, DataStruct ECDEF, DataStruct UNITS) {
        this.ECID = ECID;
        this.ECNAME = ECNAME;
        this.ECMIN = ECMIN;
        this.ECMAX = ECMAX;
        this.ECDEF = ECDEF;
        this.UNITS = UNITS;
    }

    public DataStruct getECID() {
        return ECID;
    }

    public DataStruct getECNAME() {
        return ECNAME;
    }

    public DataStruct getECMIN() {
        return ECMIN;
    }

    public DataStruct getECMAX() {
        return ECMAX;
    }

    public DataStruct getECDEF() {
        return ECDEF;
    }

    public DataStruct getUNITS() {
        return UNITS;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        ECID2DataStruct _value  = this;

        // Const Field (L6)
        lengthInBits += 16;

        // Simple field (ECID)
        lengthInBits += ECID.getLengthInBits();

        // Simple field (ECNAME)
        lengthInBits += ECNAME.getLengthInBits();

        // Simple field (ECMIN)
        lengthInBits += ECMIN.getLengthInBits();

        // Simple field (ECMAX)
        lengthInBits += ECMAX.getLengthInBits();

        // Simple field (ECDEF)
        lengthInBits += ECDEF.getLengthInBits();

        // Simple field (UNITS)
        lengthInBits += UNITS.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ECID2DataStruct, ECID2DataStruct> getMessageIO() {
        return new ECID2DataStructIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ECID2DataStruct)) {
            return false;
        }
        ECID2DataStruct that = (ECID2DataStruct) o;
        return
            (getECID() == that.getECID()) &&
            (getECNAME() == that.getECNAME()) &&
            (getECMIN() == that.getECMIN()) &&
            (getECMAX() == that.getECMAX()) &&
            (getECDEF() == that.getECDEF()) &&
            (getUNITS() == that.getUNITS()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getECID(),
            getECNAME(),
            getECMIN(),
            getECMAX(),
            getECDEF(),
            getUNITS()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("ECID", getECID())
            .append("ECNAME", getECNAME())
            .append("ECMIN", getECMIN())
            .append("ECMAX", getECMAX())
            .append("ECDEF", getECDEF())
            .append("UNITS", getUNITS())
            .toString();
    }

}
