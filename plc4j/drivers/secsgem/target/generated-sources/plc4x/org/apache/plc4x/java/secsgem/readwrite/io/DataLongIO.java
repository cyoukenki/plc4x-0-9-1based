/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataLongIO implements MessageIO<DataLong, DataLong> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataLongIO.class);

    @Override
    public DataLong parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DataLong) new DataStruct2IO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataLong value, Object... args) throws ParseException {
        new DataStruct2IO().serialize(writeBuffer, value, args);
    }

    public static DataLongBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataLong");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (elementNb)
long elementNb = readBuffer.readUnsignedLong("elementNb", 24) ;
        // Virtual field (Just declare a local variable so we can access it in the parser)
        long identifier = (long) (elementNb);

        readBuffer.closeContext("DataLong");
        // Create the instance
        return new DataLongBuilder(elementNb);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataLong _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataLong");

        // Simple Field (elementNb)
        long elementNb = (long) _value.getElementNb();
        writeBuffer.writeUnsignedLong("elementNb", 24, ((Number) (elementNb)).longValue());
        writeBuffer.popContext("DataLong");
    }

    public static class DataLongBuilder implements DataStruct2IO.DataStruct2Builder {
        private final long elementNb;

        public DataLongBuilder(long elementNb) {
            this.elementNb = elementNb;
        }

        public DataLong build(short symbolType) {
            return new DataLong(symbolType, elementNb);
        }
    }

}
