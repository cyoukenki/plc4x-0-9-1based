/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataStructIO implements MessageIO<DataStruct, DataStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataStructIO.class);

    @Override
    public DataStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DataStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataStruct value, Object... args) throws ParseException {
        DataStructIO.staticSerialize(writeBuffer, value);
    }

    public static DataStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataStruct");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("dataType");
        // Enum field (dataType)
        SecsDataTypeCode dataType = SecsDataTypeCode.enumForValue(readBuffer.readUnsignedShort("SecsDataTypeCode", 8));
        readBuffer.closeContext("dataType");

        // Virtual field (Just declare a local variable so we can access it in the parser)
        short NLB = (short) ((dataType.getValue()) & (3));

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        DataStructBuilder builder = null;
                if(EvaluationHelper.equals(NLB, 1)) {
            builder = DataStructNormalIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(NLB, 2)) {
            builder = DataStructMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(NLB, 3)) {
            builder = DataStructLongIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("DataStruct");
        // Create the instance
        return builder.build(dataType);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataStruct");

        writeBuffer.pushContext("dataType");
        // Enum field (dataType)
        SecsDataTypeCode dataType = (SecsDataTypeCode) _value.getDataType();
        writeBuffer.writeUnsignedShort("SecsDataTypeCode", 8, ((Number) (dataType.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(dataType.name()));
        writeBuffer.popContext("dataType");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof DataStructNormal) {
            DataStructNormalIO.staticSerialize(writeBuffer, (DataStructNormal) _value);
        } else 
        if(_value instanceof DataStructMedium) {
            DataStructMediumIO.staticSerialize(writeBuffer, (DataStructMedium) _value);
        } else 
        if(_value instanceof DataStructLong) {
            DataStructLongIO.staticSerialize(writeBuffer, (DataStructLong) _value);
        }
        writeBuffer.popContext("DataStruct");
    }

    public static interface DataStructBuilder {
        DataStruct build(SecsDataTypeCode dataType);
    }

}
