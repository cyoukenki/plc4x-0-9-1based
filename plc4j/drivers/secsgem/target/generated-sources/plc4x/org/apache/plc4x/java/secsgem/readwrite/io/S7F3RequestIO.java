/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7F3RequestIO implements MessageIO<S7F3Request, S7F3Request> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7F3RequestIO.class);

    @Override
    public S7F3Request parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7F3Request) new SecsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7F3Request value, Object... args) throws ParseException {
        new SecsPacketIO().serialize(writeBuffer, value, args);
    }

    public static S7F3RequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7F3Request");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (L)
        short L = readBuffer.readUnsignedShort("L", 8);
        if(L != S7F3Request.L) {
            throw new ParseException("Expected constant value " + S7F3Request.L + " but got " + L);
        }

        // Const Field (Number)
        short Number = readBuffer.readUnsignedShort("Number", 8);
        if(Number != S7F3Request.NUMBER) {
            throw new ParseException("Expected constant value " + S7F3Request.NUMBER + " but got " + Number);
        }

        readBuffer.pullContext("ppid");

        // Simple Field (ppid)
DataStruct ppid = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ppid");

        readBuffer.pullContext("symbolTypeDS");

        // Simple Field (symbolTypeDS)
DataStruct3 symbolTypeDS = DataStruct3IO.staticParse(readBuffer ) ;        readBuffer.closeContext("symbolTypeDS");

        // Virtual field (Just declare a local variable so we can access it in the parser)
        short dataType = (short) (symbolTypeDS.getDataType());
        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _dataLength = symbolTypeDS.getIdentifier();
        List<Byte> _dataList = new LinkedList<>();
        long dataEndPos = readBuffer.getPos() + _dataLength;
        while(readBuffer.getPos() < dataEndPos) {
            _dataList.add(readBuffer.readSignedByte("", 8));
        }
        byte[] data = new byte[_dataList.size()];
        for(int i = 0; i < _dataList.size(); i++) {
            data[i] = (byte) _dataList.get(i);
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("S7F3Request");
        // Create the instance
        return new S7F3RequestBuilder(ppid, symbolTypeDS, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7F3Request _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7F3Request");

        // Const Field (L)
        writeBuffer.writeUnsignedShort("L", 8, ((Number) 0x01).shortValue());

        // Const Field (Number)
        writeBuffer.writeUnsignedShort("Number", 8, ((Number) 0x02).shortValue());

        // Simple Field (ppid)
        DataStruct ppid = (DataStruct) _value.getPpid();
        writeBuffer.pushContext("ppid");
        DataStructIO.staticSerialize(writeBuffer, ppid);
        writeBuffer.popContext("ppid");

        // Simple Field (symbolTypeDS)
        DataStruct3 symbolTypeDS = (DataStruct3) _value.getSymbolTypeDS();
        writeBuffer.pushContext("symbolTypeDS");
        DataStruct3IO.staticSerialize(writeBuffer, symbolTypeDS);
        writeBuffer.popContext("symbolTypeDS");

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S7F3Request");
    }

    public static class S7F3RequestBuilder implements SecsPacketIO.SecsPacketBuilder {
        private final DataStruct ppid;
        private final DataStruct3 symbolTypeDS;
        private final byte[] data;

        public S7F3RequestBuilder(DataStruct ppid, DataStruct3 symbolTypeDS, byte[] data) {
            this.ppid = ppid;
            this.symbolTypeDS = symbolTypeDS;
            this.data = data;
        }

        public S7F3Request build(int deviceID, short PType, short Stype, long systemBytes) {
            return new S7F3Request(deviceID, PType, Stype, systemBytes, ppid, symbolTypeDS, data);
        }
    }

}
