/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AlarmStructIO implements MessageIO<AlarmStruct, AlarmStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlarmStructIO.class);

    @Override
    public AlarmStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return AlarmStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AlarmStruct value, Object... args) throws ParseException {
        AlarmStructIO.staticSerialize(writeBuffer, value);
    }

    public static AlarmStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AlarmStruct");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (L3)
        int L3 = readBuffer.readUnsignedInt("L3", 16);
        if(L3 != AlarmStruct.L3) {
            throw new ParseException("Expected constant value " + AlarmStruct.L3 + " but got " + L3);
        }

        readBuffer.pullContext("ALCD");

        // Simple Field (ALCD)
DataStruct ALCD = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ALCD");

        readBuffer.pullContext("ALID");

        // Simple Field (ALID)
DataStruct ALID = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ALID");

        readBuffer.pullContext("ALTX");

        // Simple Field (ALTX)
DataStruct ALTX = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ALTX");

        readBuffer.closeContext("AlarmStruct");
        // Create the instance
        return new AlarmStruct(ALCD, ALID, ALTX);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AlarmStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AlarmStruct");

        // Const Field (L3)
        writeBuffer.writeUnsignedInt("L3", 16, ((Number) 0x0103).intValue());

        // Simple Field (ALCD)
        DataStruct ALCD = (DataStruct) _value.getALCD();
        writeBuffer.pushContext("ALCD");
        DataStructIO.staticSerialize(writeBuffer, ALCD);
        writeBuffer.popContext("ALCD");

        // Simple Field (ALID)
        DataStruct ALID = (DataStruct) _value.getALID();
        writeBuffer.pushContext("ALID");
        DataStructIO.staticSerialize(writeBuffer, ALID);
        writeBuffer.popContext("ALID");

        // Simple Field (ALTX)
        DataStruct ALTX = (DataStruct) _value.getALTX();
        writeBuffer.pushContext("ALTX");
        DataStructIO.staticSerialize(writeBuffer, ALTX);
        writeBuffer.popContext("ALTX");
        writeBuffer.popContext("AlarmStruct");
    }

}
