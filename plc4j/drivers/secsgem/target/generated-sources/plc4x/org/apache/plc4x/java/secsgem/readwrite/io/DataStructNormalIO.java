/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataStructNormalIO implements MessageIO<DataStructNormal, DataStructNormal> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataStructNormalIO.class);

    @Override
    public DataStructNormal parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DataStructNormal) new DataStructIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataStructNormal value, Object... args) throws ParseException {
        new DataStructIO().serialize(writeBuffer, value, args);
    }

    public static DataStructNormalBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataStructNormal");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (elementNb)
short elementNb = readBuffer.readUnsignedShort("elementNb", 8) ;        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _dataLength = elementNb;
        List<Byte> _dataList = new LinkedList<>();
        long dataEndPos = readBuffer.getPos() + _dataLength;
        while(readBuffer.getPos() < dataEndPos) {
            _dataList.add(readBuffer.readSignedByte("", 8));
        }
        byte[] data = new byte[_dataList.size()];
        for(int i = 0; i < _dataList.size(); i++) {
            data[i] = (byte) _dataList.get(i);
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("DataStructNormal");
        // Create the instance
        return new DataStructNormalBuilder(elementNb, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataStructNormal _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataStructNormal");

        // Simple Field (elementNb)
        short elementNb = (short) _value.getElementNb();
        writeBuffer.writeUnsignedShort("elementNb", 8, ((Number) (elementNb)).shortValue());

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("DataStructNormal");
    }

    public static class DataStructNormalBuilder implements DataStructIO.DataStructBuilder {
        private final short elementNb;
        private final byte[] data;

        public DataStructNormalBuilder(short elementNb, byte[] data) {
            this.elementNb = elementNb;
            this.data = data;
        }

        public DataStructNormal build(SecsDataTypeCode dataType) {
            return new DataStructNormal(dataType, elementNb, data);
        }
    }

}
