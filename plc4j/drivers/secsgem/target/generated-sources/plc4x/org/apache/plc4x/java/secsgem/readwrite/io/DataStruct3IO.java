/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataStruct3IO implements MessageIO<DataStruct3, DataStruct3> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataStruct3IO.class);

    @Override
    public DataStruct3 parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DataStruct3IO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataStruct3 value, Object... args) throws ParseException {
        DataStruct3IO.staticSerialize(writeBuffer, value);
    }

    public static DataStruct3 staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataStruct3");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (symbolType1)
short symbolType1 = readBuffer.readUnsignedShort("symbolType1", 8) ;
        // Virtual field (Just declare a local variable so we can access it in the parser)
        short NLB = (short) ((symbolType1) & (3));

        // Virtual field (Just declare a local variable so we can access it in the parser)
        short dataType = (short) ((((symbolType1) >> (2))) & (63));

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        DataStruct3Builder builder = null;
                if(EvaluationHelper.equals(dataType, 26) && EvaluationHelper.equals(NLB, 1)) {
            builder = INTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 26) && EvaluationHelper.equals(NLB, 2)) {
            builder = INTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 26) && EvaluationHelper.equals(NLB, 3)) {
            builder = INTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 28) && EvaluationHelper.equals(NLB, 1)) {
            builder = DINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 28) && EvaluationHelper.equals(NLB, 2)) {
            builder = DINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 28) && EvaluationHelper.equals(NLB, 3)) {
            builder = DINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 8) && EvaluationHelper.equals(NLB, 1)) {
            builder = BYTETypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 8) && EvaluationHelper.equals(NLB, 2)) {
            builder = BYTETypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 8) && EvaluationHelper.equals(NLB, 3)) {
            builder = BYTETypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 9) && EvaluationHelper.equals(NLB, 1)) {
            builder = BOOLTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 9) && EvaluationHelper.equals(NLB, 2)) {
            builder = BOOLTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 9) && EvaluationHelper.equals(NLB, 3)) {
            builder = BOOLTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 16) && EvaluationHelper.equals(NLB, 1)) {
            builder = ASCTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 16) && EvaluationHelper.equals(NLB, 2)) {
            builder = ASCTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 16) && EvaluationHelper.equals(NLB, 3)) {
            builder = ASCTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 24) && EvaluationHelper.equals(NLB, 1)) {
            builder = LINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 24) && EvaluationHelper.equals(NLB, 2)) {
            builder = LINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 24) && EvaluationHelper.equals(NLB, 3)) {
            builder = LINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 25) && EvaluationHelper.equals(NLB, 1)) {
            builder = SINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 25) && EvaluationHelper.equals(NLB, 2)) {
            builder = SINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 25) && EvaluationHelper.equals(NLB, 3)) {
            builder = SINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 32) && EvaluationHelper.equals(NLB, 1)) {
            builder = LREALTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 32) && EvaluationHelper.equals(NLB, 2)) {
            builder = LREALTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 32) && EvaluationHelper.equals(NLB, 3)) {
            builder = LREALTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 36) && EvaluationHelper.equals(NLB, 1)) {
            builder = REALTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 36) && EvaluationHelper.equals(NLB, 2)) {
            builder = REALTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 36) && EvaluationHelper.equals(NLB, 3)) {
            builder = REALTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 40) && EvaluationHelper.equals(NLB, 1)) {
            builder = ULINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 40) && EvaluationHelper.equals(NLB, 2)) {
            builder = ULINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 40) && EvaluationHelper.equals(NLB, 3)) {
            builder = ULINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 41) && EvaluationHelper.equals(NLB, 1)) {
            builder = USINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 41) && EvaluationHelper.equals(NLB, 2)) {
            builder = USINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 41) && EvaluationHelper.equals(NLB, 3)) {
            builder = USINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 42) && EvaluationHelper.equals(NLB, 1)) {
            builder = UINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 42) && EvaluationHelper.equals(NLB, 2)) {
            builder = UINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 42) && EvaluationHelper.equals(NLB, 3)) {
            builder = UINTTypeLongIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 44) && EvaluationHelper.equals(NLB, 1)) {
            builder = UDINTTypeShortIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 44) && EvaluationHelper.equals(NLB, 2)) {
            builder = UDINTTypeMediumIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(dataType, 44) && EvaluationHelper.equals(NLB, 3)) {
            builder = UDINTTypeLongIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("DataStruct3");
        // Create the instance
        return builder.build(symbolType1);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataStruct3 _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataStruct3");

        // Simple Field (symbolType1)
        short symbolType1 = (short) _value.getSymbolType1();
        writeBuffer.writeUnsignedShort("symbolType1", 8, ((Number) (symbolType1)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof INTTypeShort) {
            INTTypeShortIO.staticSerialize(writeBuffer, (INTTypeShort) _value);
        } else 
        if(_value instanceof INTTypeMedium) {
            INTTypeMediumIO.staticSerialize(writeBuffer, (INTTypeMedium) _value);
        } else 
        if(_value instanceof INTTypeLong) {
            INTTypeLongIO.staticSerialize(writeBuffer, (INTTypeLong) _value);
        } else 
        if(_value instanceof DINTTypeShort) {
            DINTTypeShortIO.staticSerialize(writeBuffer, (DINTTypeShort) _value);
        } else 
        if(_value instanceof DINTTypeMedium) {
            DINTTypeMediumIO.staticSerialize(writeBuffer, (DINTTypeMedium) _value);
        } else 
        if(_value instanceof DINTTypeLong) {
            DINTTypeLongIO.staticSerialize(writeBuffer, (DINTTypeLong) _value);
        } else 
        if(_value instanceof BYTETypeShort) {
            BYTETypeShortIO.staticSerialize(writeBuffer, (BYTETypeShort) _value);
        } else 
        if(_value instanceof BYTETypeMedium) {
            BYTETypeMediumIO.staticSerialize(writeBuffer, (BYTETypeMedium) _value);
        } else 
        if(_value instanceof BYTETypeLong) {
            BYTETypeLongIO.staticSerialize(writeBuffer, (BYTETypeLong) _value);
        } else 
        if(_value instanceof BOOLTypeShort) {
            BOOLTypeShortIO.staticSerialize(writeBuffer, (BOOLTypeShort) _value);
        } else 
        if(_value instanceof BOOLTypeMedium) {
            BOOLTypeMediumIO.staticSerialize(writeBuffer, (BOOLTypeMedium) _value);
        } else 
        if(_value instanceof BOOLTypeLong) {
            BOOLTypeLongIO.staticSerialize(writeBuffer, (BOOLTypeLong) _value);
        } else 
        if(_value instanceof ASCTypeShort) {
            ASCTypeShortIO.staticSerialize(writeBuffer, (ASCTypeShort) _value);
        } else 
        if(_value instanceof ASCTypeMedium) {
            ASCTypeMediumIO.staticSerialize(writeBuffer, (ASCTypeMedium) _value);
        } else 
        if(_value instanceof ASCTypeLong) {
            ASCTypeLongIO.staticSerialize(writeBuffer, (ASCTypeLong) _value);
        } else 
        if(_value instanceof LINTTypeShort) {
            LINTTypeShortIO.staticSerialize(writeBuffer, (LINTTypeShort) _value);
        } else 
        if(_value instanceof LINTTypeMedium) {
            LINTTypeMediumIO.staticSerialize(writeBuffer, (LINTTypeMedium) _value);
        } else 
        if(_value instanceof LINTTypeLong) {
            LINTTypeLongIO.staticSerialize(writeBuffer, (LINTTypeLong) _value);
        } else 
        if(_value instanceof SINTTypeShort) {
            SINTTypeShortIO.staticSerialize(writeBuffer, (SINTTypeShort) _value);
        } else 
        if(_value instanceof SINTTypeMedium) {
            SINTTypeMediumIO.staticSerialize(writeBuffer, (SINTTypeMedium) _value);
        } else 
        if(_value instanceof SINTTypeLong) {
            SINTTypeLongIO.staticSerialize(writeBuffer, (SINTTypeLong) _value);
        } else 
        if(_value instanceof LREALTypeShort) {
            LREALTypeShortIO.staticSerialize(writeBuffer, (LREALTypeShort) _value);
        } else 
        if(_value instanceof LREALTypeMedium) {
            LREALTypeMediumIO.staticSerialize(writeBuffer, (LREALTypeMedium) _value);
        } else 
        if(_value instanceof LREALTypeLong) {
            LREALTypeLongIO.staticSerialize(writeBuffer, (LREALTypeLong) _value);
        } else 
        if(_value instanceof REALTypeShort) {
            REALTypeShortIO.staticSerialize(writeBuffer, (REALTypeShort) _value);
        } else 
        if(_value instanceof REALTypeMedium) {
            REALTypeMediumIO.staticSerialize(writeBuffer, (REALTypeMedium) _value);
        } else 
        if(_value instanceof REALTypeLong) {
            REALTypeLongIO.staticSerialize(writeBuffer, (REALTypeLong) _value);
        } else 
        if(_value instanceof ULINTTypeShort) {
            ULINTTypeShortIO.staticSerialize(writeBuffer, (ULINTTypeShort) _value);
        } else 
        if(_value instanceof ULINTTypeMedium) {
            ULINTTypeMediumIO.staticSerialize(writeBuffer, (ULINTTypeMedium) _value);
        } else 
        if(_value instanceof ULINTTypeLong) {
            ULINTTypeLongIO.staticSerialize(writeBuffer, (ULINTTypeLong) _value);
        } else 
        if(_value instanceof USINTTypeShort) {
            USINTTypeShortIO.staticSerialize(writeBuffer, (USINTTypeShort) _value);
        } else 
        if(_value instanceof USINTTypeMedium) {
            USINTTypeMediumIO.staticSerialize(writeBuffer, (USINTTypeMedium) _value);
        } else 
        if(_value instanceof USINTTypeLong) {
            USINTTypeLongIO.staticSerialize(writeBuffer, (USINTTypeLong) _value);
        } else 
        if(_value instanceof UINTTypeShort) {
            UINTTypeShortIO.staticSerialize(writeBuffer, (UINTTypeShort) _value);
        } else 
        if(_value instanceof UINTTypeMedium) {
            UINTTypeMediumIO.staticSerialize(writeBuffer, (UINTTypeMedium) _value);
        } else 
        if(_value instanceof UINTTypeLong) {
            UINTTypeLongIO.staticSerialize(writeBuffer, (UINTTypeLong) _value);
        } else 
        if(_value instanceof UDINTTypeShort) {
            UDINTTypeShortIO.staticSerialize(writeBuffer, (UDINTTypeShort) _value);
        } else 
        if(_value instanceof UDINTTypeMedium) {
            UDINTTypeMediumIO.staticSerialize(writeBuffer, (UDINTTypeMedium) _value);
        } else 
        if(_value instanceof UDINTTypeLong) {
            UDINTTypeLongIO.staticSerialize(writeBuffer, (UDINTTypeLong) _value);
        }
        writeBuffer.popContext("DataStruct3");
    }

    public static interface DataStruct3Builder {
        DataStruct3 build(short symbolType1);
    }

}
