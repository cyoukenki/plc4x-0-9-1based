/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CEIDListDataStructIO implements MessageIO<CEIDListDataStruct, CEIDListDataStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CEIDListDataStructIO.class);

    @Override
    public CEIDListDataStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return CEIDListDataStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CEIDListDataStruct value, Object... args) throws ParseException {
        CEIDListDataStructIO.staticSerialize(writeBuffer, value);
    }

    public static CEIDListDataStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CEIDListDataStruct");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (L2)
        int L2 = readBuffer.readUnsignedInt("L2", 16);
        if(L2 != CEIDListDataStruct.L2) {
            throw new ParseException("Expected constant value " + CEIDListDataStruct.L2 + " but got " + L2);
        }

        readBuffer.pullContext("CEID");

        // Simple Field (CEID)
DataStruct CEID = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("CEID");

        readBuffer.pullContext("symbolTypeDS");

        // Simple Field (symbolTypeDS)
DataStruct2 symbolTypeDS = DataStruct2IO.staticParse(readBuffer ) ;        readBuffer.closeContext("symbolTypeDS");
        // Array field (values)
        readBuffer.pullContext("values", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(symbolTypeDS.getIdentifier() > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (symbolTypeDS.getIdentifier()) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct[] values;
        {
            int itemCount = Math.max(0, (int) symbolTypeDS.getIdentifier());
            values = new DataStruct[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
values[curItem] = DataStructIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("values", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("CEIDListDataStruct");
        // Create the instance
        return new CEIDListDataStruct(CEID, symbolTypeDS, values);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CEIDListDataStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CEIDListDataStruct");

        // Const Field (L2)
        writeBuffer.writeUnsignedInt("L2", 16, ((Number) 0x0102).intValue());

        // Simple Field (CEID)
        DataStruct CEID = (DataStruct) _value.getCEID();
        writeBuffer.pushContext("CEID");
        DataStructIO.staticSerialize(writeBuffer, CEID);
        writeBuffer.popContext("CEID");

        // Simple Field (symbolTypeDS)
        DataStruct2 symbolTypeDS = (DataStruct2) _value.getSymbolTypeDS();
        writeBuffer.pushContext("symbolTypeDS");
        DataStruct2IO.staticSerialize(writeBuffer, symbolTypeDS);
        writeBuffer.popContext("symbolTypeDS");

        // Array Field (values)
        if(_value.getValues() != null) {
            writeBuffer.pushContext("values", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getValues().length;
            int curItem = 0;
            for(DataStruct element : _value.getValues()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStructIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("values", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("CEIDListDataStruct");
    }

}
