/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S5F1RequestIO implements MessageIO<S5F1Request, S5F1Request> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S5F1RequestIO.class);

    @Override
    public S5F1Request parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S5F1Request) new SecsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S5F1Request value, Object... args) throws ParseException {
        new SecsPacketIO().serialize(writeBuffer, value, args);
    }

    public static S5F1RequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S5F1Request");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (list3)
        int list3 = readBuffer.readUnsignedInt("list3", 16);
        if(list3 != S5F1Request.LIST3) {
            throw new ParseException("Expected constant value " + S5F1Request.LIST3 + " but got " + list3);
        }

        readBuffer.pullContext("alcd");

        // Simple Field (alcd)
DataStruct alcd = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("alcd");

        readBuffer.pullContext("alid");

        // Simple Field (alid)
DataStruct alid = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("alid");

        readBuffer.pullContext("altx");

        // Simple Field (altx)
DataStruct altx = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("altx");

        readBuffer.closeContext("S5F1Request");
        // Create the instance
        return new S5F1RequestBuilder(alcd, alid, altx);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S5F1Request _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S5F1Request");

        // Const Field (list3)
        writeBuffer.writeUnsignedInt("list3", 16, ((Number) 0x0103).intValue());

        // Simple Field (alcd)
        DataStruct alcd = (DataStruct) _value.getAlcd();
        writeBuffer.pushContext("alcd");
        DataStructIO.staticSerialize(writeBuffer, alcd);
        writeBuffer.popContext("alcd");

        // Simple Field (alid)
        DataStruct alid = (DataStruct) _value.getAlid();
        writeBuffer.pushContext("alid");
        DataStructIO.staticSerialize(writeBuffer, alid);
        writeBuffer.popContext("alid");

        // Simple Field (altx)
        DataStruct altx = (DataStruct) _value.getAltx();
        writeBuffer.pushContext("altx");
        DataStructIO.staticSerialize(writeBuffer, altx);
        writeBuffer.popContext("altx");
        writeBuffer.popContext("S5F1Request");
    }

    public static class S5F1RequestBuilder implements SecsPacketIO.SecsPacketBuilder {
        private final DataStruct alcd;
        private final DataStruct alid;
        private final DataStruct altx;

        public S5F1RequestBuilder(DataStruct alcd, DataStruct alid, DataStruct altx) {
            this.alcd = alcd;
            this.alid = alid;
            this.altx = altx;
        }

        public S5F1Request build(int deviceID, short PType, short Stype, long systemBytes) {
            return new S5F1Request(deviceID, PType, Stype, systemBytes, alcd, alid, altx);
        }
    }

}
