/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S6F1RequestIO implements MessageIO<S6F1Request, S6F1Request> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S6F1RequestIO.class);

    @Override
    public S6F1Request parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S6F1Request) new SecsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S6F1Request value, Object... args) throws ParseException {
        new SecsPacketIO().serialize(writeBuffer, value, args);
    }

    public static S6F1RequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S6F1Request");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (list4)
        int list4 = readBuffer.readUnsignedInt("list4", 16);
        if(list4 != S6F1Request.LIST4) {
            throw new ParseException("Expected constant value " + S6F1Request.LIST4 + " but got " + list4);
        }

        readBuffer.pullContext("trid");

        // Simple Field (trid)
DataStruct trid = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("trid");

        readBuffer.pullContext("smpln");

        // Simple Field (smpln)
DataStruct smpln = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("smpln");

        readBuffer.pullContext("stime");

        // Simple Field (stime)
DataStruct stime = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("stime");

        readBuffer.pullContext("symbolTypeDS");

        // Simple Field (symbolTypeDS)
DataStruct2 symbolTypeDS = DataStruct2IO.staticParse(readBuffer ) ;        readBuffer.closeContext("symbolTypeDS");
        // Array field (values)
        readBuffer.pullContext("values", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(symbolTypeDS.getIdentifier() > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (symbolTypeDS.getIdentifier()) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct[] values;
        {
            int itemCount = Math.max(0, (int) symbolTypeDS.getIdentifier());
            values = new DataStruct[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
values[curItem] = DataStructIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("values", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("S6F1Request");
        // Create the instance
        return new S6F1RequestBuilder(trid, smpln, stime, symbolTypeDS, values);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S6F1Request _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S6F1Request");

        // Const Field (list4)
        writeBuffer.writeUnsignedInt("list4", 16, ((Number) 0x0104).intValue());

        // Simple Field (trid)
        DataStruct trid = (DataStruct) _value.getTrid();
        writeBuffer.pushContext("trid");
        DataStructIO.staticSerialize(writeBuffer, trid);
        writeBuffer.popContext("trid");

        // Simple Field (smpln)
        DataStruct smpln = (DataStruct) _value.getSmpln();
        writeBuffer.pushContext("smpln");
        DataStructIO.staticSerialize(writeBuffer, smpln);
        writeBuffer.popContext("smpln");

        // Simple Field (stime)
        DataStruct stime = (DataStruct) _value.getStime();
        writeBuffer.pushContext("stime");
        DataStructIO.staticSerialize(writeBuffer, stime);
        writeBuffer.popContext("stime");

        // Simple Field (symbolTypeDS)
        DataStruct2 symbolTypeDS = (DataStruct2) _value.getSymbolTypeDS();
        writeBuffer.pushContext("symbolTypeDS");
        DataStruct2IO.staticSerialize(writeBuffer, symbolTypeDS);
        writeBuffer.popContext("symbolTypeDS");

        // Array Field (values)
        if(_value.getValues() != null) {
            writeBuffer.pushContext("values", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getValues().length;
            int curItem = 0;
            for(DataStruct element : _value.getValues()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStructIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("values", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S6F1Request");
    }

    public static class S6F1RequestBuilder implements SecsPacketIO.SecsPacketBuilder {
        private final DataStruct trid;
        private final DataStruct smpln;
        private final DataStruct stime;
        private final DataStruct2 symbolTypeDS;
        private final DataStruct[] values;

        public S6F1RequestBuilder(DataStruct trid, DataStruct smpln, DataStruct stime, DataStruct2 symbolTypeDS, DataStruct[] values) {
            this.trid = trid;
            this.smpln = smpln;
            this.stime = stime;
            this.symbolTypeDS = symbolTypeDS;
            this.values = values;
        }

        public S6F1Request build(int deviceID, short PType, short Stype, long systemBytes) {
            return new S6F1Request(deviceID, PType, Stype, systemBytes, trid, smpln, stime, symbolTypeDS, values);
        }
    }

}
