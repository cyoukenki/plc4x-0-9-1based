/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S10F6ReplyIO implements MessageIO<S10F6Reply, S10F6Reply> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S10F6ReplyIO.class);

    @Override
    public S10F6Reply parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S10F6Reply) new SecsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S10F6Reply value, Object... args) throws ParseException {
        new SecsPacketIO().serialize(writeBuffer, value, args);
    }

    public static S10F6ReplyBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S10F6Reply");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("ACKC10");

        // Simple Field (ACKC10)
DataStruct ACKC10 = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ACKC10");

        readBuffer.closeContext("S10F6Reply");
        // Create the instance
        return new S10F6ReplyBuilder(ACKC10);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S10F6Reply _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S10F6Reply");

        // Simple Field (ACKC10)
        DataStruct ACKC10 = (DataStruct) _value.getACKC10();
        writeBuffer.pushContext("ACKC10");
        DataStructIO.staticSerialize(writeBuffer, ACKC10);
        writeBuffer.popContext("ACKC10");
        writeBuffer.popContext("S10F6Reply");
    }

    public static class S10F6ReplyBuilder implements SecsPacketIO.SecsPacketBuilder {
        private final DataStruct ACKC10;

        public S10F6ReplyBuilder(DataStruct ACKC10) {
            this.ACKC10 = ACKC10;
        }

        public S10F6Reply build(int deviceID, short PType, short Stype, long systemBytes) {
            return new S10F6Reply(deviceID, PType, Stype, systemBytes, ACKC10);
        }
    }

}
