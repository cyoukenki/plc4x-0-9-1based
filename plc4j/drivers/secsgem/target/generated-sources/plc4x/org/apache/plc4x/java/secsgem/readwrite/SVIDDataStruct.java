/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SVIDDataStruct implements Message {


    // Constant values.
    public static final int L3 = 0x0103;

    // Properties.
    private final DataStruct SVID;
    private final DataStruct SVNAME;
    private final DataStruct UNITS;

    public SVIDDataStruct(DataStruct SVID, DataStruct SVNAME, DataStruct UNITS) {
        this.SVID = SVID;
        this.SVNAME = SVNAME;
        this.UNITS = UNITS;
    }

    public DataStruct getSVID() {
        return SVID;
    }

    public DataStruct getSVNAME() {
        return SVNAME;
    }

    public DataStruct getUNITS() {
        return UNITS;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        SVIDDataStruct _value  = this;

        // Const Field (L3)
        lengthInBits += 16;

        // Simple field (SVID)
        lengthInBits += SVID.getLengthInBits();

        // Simple field (SVNAME)
        lengthInBits += SVNAME.getLengthInBits();

        // Simple field (UNITS)
        lengthInBits += UNITS.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<SVIDDataStruct, SVIDDataStruct> getMessageIO() {
        return new SVIDDataStructIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SVIDDataStruct)) {
            return false;
        }
        SVIDDataStruct that = (SVIDDataStruct) o;
        return
            (getSVID() == that.getSVID()) &&
            (getSVNAME() == that.getSVNAME()) &&
            (getUNITS() == that.getUNITS()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getSVID(),
            getSVNAME(),
            getUNITS()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("SVID", getSVID())
            .append("SVNAME", getSVNAME())
            .append("UNITS", getUNITS())
            .toString();
    }

}
