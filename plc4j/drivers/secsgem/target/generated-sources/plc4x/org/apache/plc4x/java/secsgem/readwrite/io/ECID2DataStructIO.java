/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.secsgem.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.secsgem.readwrite.*;
import org.apache.plc4x.java.secsgem.readwrite.io.*;
import org.apache.plc4x.java.secsgem.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ECID2DataStructIO implements MessageIO<ECID2DataStruct, ECID2DataStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ECID2DataStructIO.class);

    @Override
    public ECID2DataStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return ECID2DataStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ECID2DataStruct value, Object... args) throws ParseException {
        ECID2DataStructIO.staticSerialize(writeBuffer, value);
    }

    public static ECID2DataStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ECID2DataStruct");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (L6)
        int L6 = readBuffer.readUnsignedInt("L6", 16);
        if(L6 != ECID2DataStruct.L6) {
            throw new ParseException("Expected constant value " + ECID2DataStruct.L6 + " but got " + L6);
        }

        readBuffer.pullContext("ECID");

        // Simple Field (ECID)
DataStruct ECID = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ECID");

        readBuffer.pullContext("ECNAME");

        // Simple Field (ECNAME)
DataStruct ECNAME = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ECNAME");

        readBuffer.pullContext("ECMIN");

        // Simple Field (ECMIN)
DataStruct ECMIN = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ECMIN");

        readBuffer.pullContext("ECMAX");

        // Simple Field (ECMAX)
DataStruct ECMAX = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ECMAX");

        readBuffer.pullContext("ECDEF");

        // Simple Field (ECDEF)
DataStruct ECDEF = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ECDEF");

        readBuffer.pullContext("UNITS");

        // Simple Field (UNITS)
DataStruct UNITS = DataStructIO.staticParse(readBuffer ) ;        readBuffer.closeContext("UNITS");

        readBuffer.closeContext("ECID2DataStruct");
        // Create the instance
        return new ECID2DataStruct(ECID, ECNAME, ECMIN, ECMAX, ECDEF, UNITS);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ECID2DataStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ECID2DataStruct");

        // Const Field (L6)
        writeBuffer.writeUnsignedInt("L6", 16, ((Number) 0x0106).intValue());

        // Simple Field (ECID)
        DataStruct ECID = (DataStruct) _value.getECID();
        writeBuffer.pushContext("ECID");
        DataStructIO.staticSerialize(writeBuffer, ECID);
        writeBuffer.popContext("ECID");

        // Simple Field (ECNAME)
        DataStruct ECNAME = (DataStruct) _value.getECNAME();
        writeBuffer.pushContext("ECNAME");
        DataStructIO.staticSerialize(writeBuffer, ECNAME);
        writeBuffer.popContext("ECNAME");

        // Simple Field (ECMIN)
        DataStruct ECMIN = (DataStruct) _value.getECMIN();
        writeBuffer.pushContext("ECMIN");
        DataStructIO.staticSerialize(writeBuffer, ECMIN);
        writeBuffer.popContext("ECMIN");

        // Simple Field (ECMAX)
        DataStruct ECMAX = (DataStruct) _value.getECMAX();
        writeBuffer.pushContext("ECMAX");
        DataStructIO.staticSerialize(writeBuffer, ECMAX);
        writeBuffer.popContext("ECMAX");

        // Simple Field (ECDEF)
        DataStruct ECDEF = (DataStruct) _value.getECDEF();
        writeBuffer.pushContext("ECDEF");
        DataStructIO.staticSerialize(writeBuffer, ECDEF);
        writeBuffer.popContext("ECDEF");

        // Simple Field (UNITS)
        DataStruct UNITS = (DataStruct) _value.getUNITS();
        writeBuffer.pushContext("UNITS");
        DataStructIO.staticSerialize(writeBuffer, UNITS);
        writeBuffer.popContext("UNITS");
        writeBuffer.popContext("ECID2DataStruct");
    }

}
