/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class OpcuaOpenResponseIO implements MessageIO<OpcuaOpenResponse, OpcuaOpenResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpcuaOpenResponseIO.class);

    @Override
    public OpcuaOpenResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (OpcuaOpenResponse) new MessagePDUIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, OpcuaOpenResponse value, Object... args) throws ParseException {
        new MessagePDUIO().serialize(writeBuffer, value, args);
    }

    public static OpcuaOpenResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("OpcuaOpenResponse");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (chunk)
String chunk = readBuffer.readString("chunk", 8, "UTF-8") ;
        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = readBuffer.readInt("messageSize", 32);


        // Simple Field (secureChannelId)
int secureChannelId = readBuffer.readInt("secureChannelId", 32) ;
        readBuffer.pullContext("securityPolicyUri");

        // Simple Field (securityPolicyUri)
PascalString securityPolicyUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("securityPolicyUri");

        readBuffer.pullContext("senderCertificate");

        // Simple Field (senderCertificate)
PascalByteString senderCertificate = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("senderCertificate");

        readBuffer.pullContext("receiverCertificateThumbprint");

        // Simple Field (receiverCertificateThumbprint)
PascalByteString receiverCertificateThumbprint = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("receiverCertificateThumbprint");


        // Simple Field (sequenceNumber)
int sequenceNumber = readBuffer.readInt("sequenceNumber", 32) ;

        // Simple Field (requestId)
int requestId = readBuffer.readInt("requestId", 32) ;        // Array field (message)
        readBuffer.pullContext("message", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(((((messageSize) - (((((securityPolicyUri.getStringLength()) == (-(1))) ? 0 : securityPolicyUri.getStringLength())))) - (((((senderCertificate.getStringLength()) == (-(1))) ? 0 : senderCertificate.getStringLength())))) - (((((receiverCertificateThumbprint.getStringLength()) == (-(1))) ? 0 : receiverCertificateThumbprint.getStringLength())))) - (32) > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (((((messageSize) - (((((securityPolicyUri.getStringLength()) == (-(1))) ? 0 : securityPolicyUri.getStringLength())))) - (((((senderCertificate.getStringLength()) == (-(1))) ? 0 : senderCertificate.getStringLength())))) - (((((receiverCertificateThumbprint.getStringLength()) == (-(1))) ? 0 : receiverCertificateThumbprint.getStringLength())))) - (32)) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] message;
        {
            int itemCount = Math.max(0, (int) ((((messageSize) - (((((securityPolicyUri.getStringLength()) == (-(1))) ? 0 : securityPolicyUri.getStringLength())))) - (((((senderCertificate.getStringLength()) == (-(1))) ? 0 : senderCertificate.getStringLength())))) - (((((receiverCertificateThumbprint.getStringLength()) == (-(1))) ? 0 : receiverCertificateThumbprint.getStringLength())))) - (32));
            message = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
message[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("message", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("OpcuaOpenResponse");
        // Create the instance
        return new OpcuaOpenResponseBuilder(chunk, secureChannelId, securityPolicyUri, senderCertificate, receiverCertificateThumbprint, sequenceNumber, requestId, message);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, OpcuaOpenResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("OpcuaOpenResponse");

        // Simple Field (chunk)
        String chunk = (String) _value.getChunk();
        writeBuffer.writeString("chunk", 8, "UTF-8", (String) (chunk));

        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = (int) (_value.getLengthInBytes());
        writeBuffer.writeInt("messageSize", 32, ((Number) (messageSize)).intValue());

        // Simple Field (secureChannelId)
        int secureChannelId = (int) _value.getSecureChannelId();
        writeBuffer.writeInt("secureChannelId", 32, ((Number) (secureChannelId)).intValue());

        // Simple Field (securityPolicyUri)
        PascalString securityPolicyUri = (PascalString) _value.getSecurityPolicyUri();
        writeBuffer.pushContext("securityPolicyUri");
        PascalStringIO.staticSerialize(writeBuffer, securityPolicyUri);
        writeBuffer.popContext("securityPolicyUri");

        // Simple Field (senderCertificate)
        PascalByteString senderCertificate = (PascalByteString) _value.getSenderCertificate();
        writeBuffer.pushContext("senderCertificate");
        PascalByteStringIO.staticSerialize(writeBuffer, senderCertificate);
        writeBuffer.popContext("senderCertificate");

        // Simple Field (receiverCertificateThumbprint)
        PascalByteString receiverCertificateThumbprint = (PascalByteString) _value.getReceiverCertificateThumbprint();
        writeBuffer.pushContext("receiverCertificateThumbprint");
        PascalByteStringIO.staticSerialize(writeBuffer, receiverCertificateThumbprint);
        writeBuffer.popContext("receiverCertificateThumbprint");

        // Simple Field (sequenceNumber)
        int sequenceNumber = (int) _value.getSequenceNumber();
        writeBuffer.writeInt("sequenceNumber", 32, ((Number) (sequenceNumber)).intValue());

        // Simple Field (requestId)
        int requestId = (int) _value.getRequestId();
        writeBuffer.writeInt("requestId", 32, ((Number) (requestId)).intValue());

        // Array Field (message)
        if(_value.getMessage() != null) {
            writeBuffer.pushContext("message", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getMessage().length;
            int curItem = 0;
            for(byte element : _value.getMessage()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("message", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("OpcuaOpenResponse");
    }

    public static class OpcuaOpenResponseBuilder implements MessagePDUIO.MessagePDUBuilder {
        private final String chunk;
        private final int secureChannelId;
        private final PascalString securityPolicyUri;
        private final PascalByteString senderCertificate;
        private final PascalByteString receiverCertificateThumbprint;
        private final int sequenceNumber;
        private final int requestId;
        private final byte[] message;

        public OpcuaOpenResponseBuilder(String chunk, int secureChannelId, PascalString securityPolicyUri, PascalByteString senderCertificate, PascalByteString receiverCertificateThumbprint, int sequenceNumber, int requestId, byte[] message) {
            this.chunk = chunk;
            this.secureChannelId = secureChannelId;
            this.securityPolicyUri = securityPolicyUri;
            this.senderCertificate = senderCertificate;
            this.receiverCertificateThumbprint = receiverCertificateThumbprint;
            this.sequenceNumber = sequenceNumber;
            this.requestId = requestId;
            this.message = message;
        }

        public OpcuaOpenResponse build() {
            return new OpcuaOpenResponse(chunk, secureChannelId, securityPolicyUri, senderCertificate, receiverCertificateThumbprint, sequenceNumber, requestId, message);
        }
    }

}
