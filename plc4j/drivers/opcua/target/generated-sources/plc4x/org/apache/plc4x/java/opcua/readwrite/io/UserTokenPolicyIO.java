/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class UserTokenPolicyIO implements MessageIO<UserTokenPolicy, UserTokenPolicy> {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTokenPolicyIO.class);

    @Override
    public UserTokenPolicy parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (UserTokenPolicy) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, UserTokenPolicy value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static UserTokenPolicyBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("UserTokenPolicy");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("policyId");

        // Simple Field (policyId)
PascalString policyId = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("policyId");

        readBuffer.pullContext("tokenType");

        // Simple Field (tokenType)
        // enum based simple field with type UserTokenType
        UserTokenType tokenType = UserTokenType.enumForValue(readBuffer.readUnsignedLong("UserTokenType", 32));
        readBuffer.closeContext("tokenType");

        readBuffer.pullContext("issuedTokenType");

        // Simple Field (issuedTokenType)
PascalString issuedTokenType = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("issuedTokenType");

        readBuffer.pullContext("issuerEndpointUrl");

        // Simple Field (issuerEndpointUrl)
PascalString issuerEndpointUrl = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("issuerEndpointUrl");

        readBuffer.pullContext("securityPolicyUri");

        // Simple Field (securityPolicyUri)
PascalString securityPolicyUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("securityPolicyUri");

        readBuffer.closeContext("UserTokenPolicy");
        // Create the instance
        return new UserTokenPolicyBuilder(policyId, tokenType, issuedTokenType, issuerEndpointUrl, securityPolicyUri);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, UserTokenPolicy _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("UserTokenPolicy");

        // Simple Field (policyId)
        PascalString policyId = (PascalString) _value.getPolicyId();
        writeBuffer.pushContext("policyId");
        PascalStringIO.staticSerialize(writeBuffer, policyId);
        writeBuffer.popContext("policyId");

        // Simple Field (tokenType)
        UserTokenType tokenType = (UserTokenType) _value.getTokenType();
        writeBuffer.pushContext("tokenType");
        // enum field with type UserTokenType
        writeBuffer.writeUnsignedLong("UserTokenType", 32, ((Number) (tokenType.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(tokenType.name()));
        writeBuffer.popContext("tokenType");

        // Simple Field (issuedTokenType)
        PascalString issuedTokenType = (PascalString) _value.getIssuedTokenType();
        writeBuffer.pushContext("issuedTokenType");
        PascalStringIO.staticSerialize(writeBuffer, issuedTokenType);
        writeBuffer.popContext("issuedTokenType");

        // Simple Field (issuerEndpointUrl)
        PascalString issuerEndpointUrl = (PascalString) _value.getIssuerEndpointUrl();
        writeBuffer.pushContext("issuerEndpointUrl");
        PascalStringIO.staticSerialize(writeBuffer, issuerEndpointUrl);
        writeBuffer.popContext("issuerEndpointUrl");

        // Simple Field (securityPolicyUri)
        PascalString securityPolicyUri = (PascalString) _value.getSecurityPolicyUri();
        writeBuffer.pushContext("securityPolicyUri");
        PascalStringIO.staticSerialize(writeBuffer, securityPolicyUri);
        writeBuffer.popContext("securityPolicyUri");
        writeBuffer.popContext("UserTokenPolicy");
    }

    public static class UserTokenPolicyBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString policyId;
        private final UserTokenType tokenType;
        private final PascalString issuedTokenType;
        private final PascalString issuerEndpointUrl;
        private final PascalString securityPolicyUri;

        public UserTokenPolicyBuilder(PascalString policyId, UserTokenType tokenType, PascalString issuedTokenType, PascalString issuerEndpointUrl, PascalString securityPolicyUri) {
            this.policyId = policyId;
            this.tokenType = tokenType;
            this.issuedTokenType = issuedTokenType;
            this.issuerEndpointUrl = issuerEndpointUrl;
            this.securityPolicyUri = securityPolicyUri;
        }

        public UserTokenPolicy build() {
            return new UserTokenPolicy(policyId, tokenType, issuedTokenType, issuerEndpointUrl, securityPolicyUri);
        }
    }

}
