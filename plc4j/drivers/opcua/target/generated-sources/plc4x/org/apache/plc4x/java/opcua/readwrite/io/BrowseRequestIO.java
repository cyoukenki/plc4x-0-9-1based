/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class BrowseRequestIO implements MessageIO<BrowseRequest, BrowseRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrowseRequestIO.class);

    @Override
    public BrowseRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (BrowseRequest) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, BrowseRequest value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static BrowseRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("BrowseRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("requestHeader");

        // Simple Field (requestHeader)
ExtensionObjectDefinition requestHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(391) ) ;        readBuffer.closeContext("requestHeader");

        readBuffer.pullContext("view");

        // Simple Field (view)
ExtensionObjectDefinition view = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(513) ) ;        readBuffer.closeContext("view");


        // Simple Field (requestedMaxReferencesPerNode)
long requestedMaxReferencesPerNode = readBuffer.readUnsignedLong("requestedMaxReferencesPerNode", 32) ;

        // Simple Field (noOfNodesToBrowse)
int noOfNodesToBrowse = readBuffer.readInt("noOfNodesToBrowse", 32) ;        // Array field (nodesToBrowse)
        readBuffer.pullContext("nodesToBrowse", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfNodesToBrowse > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfNodesToBrowse) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] nodesToBrowse;
        {
            int itemCount = Math.max(0, (int) noOfNodesToBrowse);
            nodesToBrowse = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
nodesToBrowse[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(516) ) ;            }
        }
            readBuffer.closeContext("nodesToBrowse", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("BrowseRequest");
        // Create the instance
        return new BrowseRequestBuilder(requestHeader, view, requestedMaxReferencesPerNode, noOfNodesToBrowse, nodesToBrowse);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, BrowseRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("BrowseRequest");

        // Simple Field (requestHeader)
        ExtensionObjectDefinition requestHeader = (ExtensionObjectDefinition) _value.getRequestHeader();
        writeBuffer.pushContext("requestHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, requestHeader);
        writeBuffer.popContext("requestHeader");

        // Simple Field (view)
        ExtensionObjectDefinition view = (ExtensionObjectDefinition) _value.getView();
        writeBuffer.pushContext("view");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, view);
        writeBuffer.popContext("view");

        // Simple Field (requestedMaxReferencesPerNode)
        long requestedMaxReferencesPerNode = (long) _value.getRequestedMaxReferencesPerNode();
        writeBuffer.writeUnsignedLong("requestedMaxReferencesPerNode", 32, ((Number) (requestedMaxReferencesPerNode)).longValue());

        // Simple Field (noOfNodesToBrowse)
        int noOfNodesToBrowse = (int) _value.getNoOfNodesToBrowse();
        writeBuffer.writeInt("noOfNodesToBrowse", 32, ((Number) (noOfNodesToBrowse)).intValue());

        // Array Field (nodesToBrowse)
        if(_value.getNodesToBrowse() != null) {
            writeBuffer.pushContext("nodesToBrowse", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getNodesToBrowse().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getNodesToBrowse()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("nodesToBrowse", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("BrowseRequest");
    }

    public static class BrowseRequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition requestHeader;
        private final ExtensionObjectDefinition view;
        private final long requestedMaxReferencesPerNode;
        private final int noOfNodesToBrowse;
        private final ExtensionObjectDefinition[] nodesToBrowse;

        public BrowseRequestBuilder(ExtensionObjectDefinition requestHeader, ExtensionObjectDefinition view, long requestedMaxReferencesPerNode, int noOfNodesToBrowse, ExtensionObjectDefinition[] nodesToBrowse) {
            this.requestHeader = requestHeader;
            this.view = view;
            this.requestedMaxReferencesPerNode = requestedMaxReferencesPerNode;
            this.noOfNodesToBrowse = noOfNodesToBrowse;
            this.nodesToBrowse = nodesToBrowse;
        }

        public BrowseRequest build() {
            return new BrowseRequest(requestHeader, view, requestedMaxReferencesPerNode, noOfNodesToBrowse, nodesToBrowse);
        }
    }

}
