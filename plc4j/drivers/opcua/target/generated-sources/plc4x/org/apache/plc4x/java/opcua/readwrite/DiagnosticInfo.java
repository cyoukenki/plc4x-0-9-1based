/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DiagnosticInfo implements Message {


    // Properties.
    private final boolean innerDiagnosticInfoSpecified;
    private final boolean innerStatusCodeSpecified;
    private final boolean additionalInfoSpecified;
    private final boolean localeSpecified;
    private final boolean localizedTextSpecified;
    private final boolean namespaceURISpecified;
    private final boolean symbolicIdSpecified;
    private final Integer symbolicId;
    private final Integer namespaceURI;
    private final Integer locale;
    private final Integer localizedText;
    private final PascalString additionalInfo;
    private final StatusCode innerStatusCode;
    private final DiagnosticInfo innerDiagnosticInfo;

    public DiagnosticInfo(boolean innerDiagnosticInfoSpecified, boolean innerStatusCodeSpecified, boolean additionalInfoSpecified, boolean localeSpecified, boolean localizedTextSpecified, boolean namespaceURISpecified, boolean symbolicIdSpecified, Integer symbolicId, Integer namespaceURI, Integer locale, Integer localizedText, PascalString additionalInfo, StatusCode innerStatusCode, DiagnosticInfo innerDiagnosticInfo) {
        this.innerDiagnosticInfoSpecified = innerDiagnosticInfoSpecified;
        this.innerStatusCodeSpecified = innerStatusCodeSpecified;
        this.additionalInfoSpecified = additionalInfoSpecified;
        this.localeSpecified = localeSpecified;
        this.localizedTextSpecified = localizedTextSpecified;
        this.namespaceURISpecified = namespaceURISpecified;
        this.symbolicIdSpecified = symbolicIdSpecified;
        this.symbolicId = symbolicId;
        this.namespaceURI = namespaceURI;
        this.locale = locale;
        this.localizedText = localizedText;
        this.additionalInfo = additionalInfo;
        this.innerStatusCode = innerStatusCode;
        this.innerDiagnosticInfo = innerDiagnosticInfo;
    }

    public boolean getInnerDiagnosticInfoSpecified() {
        return innerDiagnosticInfoSpecified;
    }

    public boolean getInnerStatusCodeSpecified() {
        return innerStatusCodeSpecified;
    }

    public boolean getAdditionalInfoSpecified() {
        return additionalInfoSpecified;
    }

    public boolean getLocaleSpecified() {
        return localeSpecified;
    }

    public boolean getLocalizedTextSpecified() {
        return localizedTextSpecified;
    }

    public boolean getNamespaceURISpecified() {
        return namespaceURISpecified;
    }

    public boolean getSymbolicIdSpecified() {
        return symbolicIdSpecified;
    }

    public Integer getSymbolicId() {
        return symbolicId;
    }

    public Integer getNamespaceURI() {
        return namespaceURI;
    }

    public Integer getLocale() {
        return locale;
    }

    public Integer getLocalizedText() {
        return localizedText;
    }

    public PascalString getAdditionalInfo() {
        return additionalInfo;
    }

    public StatusCode getInnerStatusCode() {
        return innerStatusCode;
    }

    public DiagnosticInfo getInnerDiagnosticInfo() {
        return innerDiagnosticInfo;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        DiagnosticInfo _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 1;

        // Simple field (innerDiagnosticInfoSpecified)
        lengthInBits += 1;

        // Simple field (innerStatusCodeSpecified)
        lengthInBits += 1;

        // Simple field (additionalInfoSpecified)
        lengthInBits += 1;

        // Simple field (localeSpecified)
        lengthInBits += 1;

        // Simple field (localizedTextSpecified)
        lengthInBits += 1;

        // Simple field (namespaceURISpecified)
        lengthInBits += 1;

        // Simple field (symbolicIdSpecified)
        lengthInBits += 1;

        // Optional Field (symbolicId)
        if(symbolicId != null) {
            lengthInBits += 32;
        }

        // Optional Field (namespaceURI)
        if(namespaceURI != null) {
            lengthInBits += 32;
        }

        // Optional Field (locale)
        if(locale != null) {
            lengthInBits += 32;
        }

        // Optional Field (localizedText)
        if(localizedText != null) {
            lengthInBits += 32;
        }

        // Optional Field (additionalInfo)
        if(additionalInfo != null) {
            lengthInBits += additionalInfo.getLengthInBits();
        }

        // Optional Field (innerStatusCode)
        if(innerStatusCode != null) {
            lengthInBits += innerStatusCode.getLengthInBits();
        }

        // Optional Field (innerDiagnosticInfo)
        if(innerDiagnosticInfo != null) {
            lengthInBits += innerDiagnosticInfo.getLengthInBits();
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<DiagnosticInfo, DiagnosticInfo> getMessageIO() {
        return new DiagnosticInfoIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DiagnosticInfo)) {
            return false;
        }
        DiagnosticInfo that = (DiagnosticInfo) o;
        return
            (getInnerDiagnosticInfoSpecified() == that.getInnerDiagnosticInfoSpecified()) &&
            (getInnerStatusCodeSpecified() == that.getInnerStatusCodeSpecified()) &&
            (getAdditionalInfoSpecified() == that.getAdditionalInfoSpecified()) &&
            (getLocaleSpecified() == that.getLocaleSpecified()) &&
            (getLocalizedTextSpecified() == that.getLocalizedTextSpecified()) &&
            (getNamespaceURISpecified() == that.getNamespaceURISpecified()) &&
            (getSymbolicIdSpecified() == that.getSymbolicIdSpecified()) &&
            (getSymbolicId() == that.getSymbolicId()) &&
            (getNamespaceURI() == that.getNamespaceURI()) &&
            (getLocale() == that.getLocale()) &&
            (getLocalizedText() == that.getLocalizedText()) &&
            (getAdditionalInfo() == that.getAdditionalInfo()) &&
            (getInnerStatusCode() == that.getInnerStatusCode()) &&
            (getInnerDiagnosticInfo() == that.getInnerDiagnosticInfo()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getInnerDiagnosticInfoSpecified(),
            getInnerStatusCodeSpecified(),
            getAdditionalInfoSpecified(),
            getLocaleSpecified(),
            getLocalizedTextSpecified(),
            getNamespaceURISpecified(),
            getSymbolicIdSpecified(),
            getSymbolicId(),
            getNamespaceURI(),
            getLocale(),
            getLocalizedText(),
            getAdditionalInfo(),
            getInnerStatusCode(),
            getInnerDiagnosticInfo()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("innerDiagnosticInfoSpecified", getInnerDiagnosticInfoSpecified())
            .append("innerStatusCodeSpecified", getInnerStatusCodeSpecified())
            .append("additionalInfoSpecified", getAdditionalInfoSpecified())
            .append("localeSpecified", getLocaleSpecified())
            .append("localizedTextSpecified", getLocalizedTextSpecified())
            .append("namespaceURISpecified", getNamespaceURISpecified())
            .append("symbolicIdSpecified", getSymbolicIdSpecified())
            .append("symbolicId", getSymbolicId())
            .append("namespaceURI", getNamespaceURI())
            .append("locale", getLocale())
            .append("localizedText", getLocalizedText())
            .append("additionalInfo", getAdditionalInfo())
            .append("innerStatusCode", getInnerStatusCode())
            .append("innerDiagnosticInfo", getInnerDiagnosticInfo())
            .toString();
    }

}
