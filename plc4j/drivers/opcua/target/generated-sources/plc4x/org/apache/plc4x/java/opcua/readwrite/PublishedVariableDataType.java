/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PublishedVariableDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "14275";
    }

    // Properties.
    private final NodeId publishedVariable;
    private final long attributeId;
    private final double samplingIntervalHint;
    private final long deadbandType;
    private final double deadbandValue;
    private final PascalString indexRange;
    private final Variant substituteValue;
    private final int noOfMetaDataProperties;
    private final QualifiedName[] metaDataProperties;

    public PublishedVariableDataType(NodeId publishedVariable, long attributeId, double samplingIntervalHint, long deadbandType, double deadbandValue, PascalString indexRange, Variant substituteValue, int noOfMetaDataProperties, QualifiedName[] metaDataProperties) {
        this.publishedVariable = publishedVariable;
        this.attributeId = attributeId;
        this.samplingIntervalHint = samplingIntervalHint;
        this.deadbandType = deadbandType;
        this.deadbandValue = deadbandValue;
        this.indexRange = indexRange;
        this.substituteValue = substituteValue;
        this.noOfMetaDataProperties = noOfMetaDataProperties;
        this.metaDataProperties = metaDataProperties;
    }

    public NodeId getPublishedVariable() {
        return publishedVariable;
    }

    public long getAttributeId() {
        return attributeId;
    }

    public double getSamplingIntervalHint() {
        return samplingIntervalHint;
    }

    public long getDeadbandType() {
        return deadbandType;
    }

    public double getDeadbandValue() {
        return deadbandValue;
    }

    public PascalString getIndexRange() {
        return indexRange;
    }

    public Variant getSubstituteValue() {
        return substituteValue;
    }

    public int getNoOfMetaDataProperties() {
        return noOfMetaDataProperties;
    }

    public QualifiedName[] getMetaDataProperties() {
        return metaDataProperties;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PublishedVariableDataType _value  = this;

        // Simple field (publishedVariable)
        lengthInBits += publishedVariable.getLengthInBits();

        // Simple field (attributeId)
        lengthInBits += 32;

        // Simple field (samplingIntervalHint)
        lengthInBits += 64;

        // Simple field (deadbandType)
        lengthInBits += 32;

        // Simple field (deadbandValue)
        lengthInBits += 64;

        // Simple field (indexRange)
        lengthInBits += indexRange.getLengthInBits();

        // Simple field (substituteValue)
        lengthInBits += substituteValue.getLengthInBits();

        // Simple field (noOfMetaDataProperties)
        lengthInBits += 32;

        // Array field
        if(metaDataProperties != null) {
            int i=0;
            for(QualifiedName element : metaDataProperties) {
                boolean last = ++i >= metaDataProperties.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PublishedVariableDataType)) {
            return false;
        }
        PublishedVariableDataType that = (PublishedVariableDataType) o;
        return
            (getPublishedVariable() == that.getPublishedVariable()) &&
            (getAttributeId() == that.getAttributeId()) &&
            (getSamplingIntervalHint() == that.getSamplingIntervalHint()) &&
            (getDeadbandType() == that.getDeadbandType()) &&
            (getDeadbandValue() == that.getDeadbandValue()) &&
            (getIndexRange() == that.getIndexRange()) &&
            (getSubstituteValue() == that.getSubstituteValue()) &&
            (getNoOfMetaDataProperties() == that.getNoOfMetaDataProperties()) &&
            (getMetaDataProperties() == that.getMetaDataProperties()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getPublishedVariable(),
            getAttributeId(),
            getSamplingIntervalHint(),
            getDeadbandType(),
            getDeadbandValue(),
            getIndexRange(),
            getSubstituteValue(),
            getNoOfMetaDataProperties(),
            getMetaDataProperties()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("publishedVariable", getPublishedVariable())
            .append("attributeId", getAttributeId())
            .append("samplingIntervalHint", getSamplingIntervalHint())
            .append("deadbandType", getDeadbandType())
            .append("deadbandValue", getDeadbandValue())
            .append("indexRange", getIndexRange())
            .append("substituteValue", getSubstituteValue())
            .append("noOfMetaDataProperties", getNoOfMetaDataProperties())
            .append("metaDataProperties", getMetaDataProperties())
            .toString();
    }

}
