/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class EndpointConfigurationIO implements MessageIO<EndpointConfiguration, EndpointConfiguration> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EndpointConfigurationIO.class);

    @Override
    public EndpointConfiguration parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (EndpointConfiguration) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, EndpointConfiguration value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static EndpointConfigurationBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("EndpointConfiguration");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (operationTimeout)
int operationTimeout = readBuffer.readInt("operationTimeout", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (useBinaryEncoding)
boolean useBinaryEncoding = readBuffer.readBit("useBinaryEncoding") ;

        // Simple Field (maxStringLength)
int maxStringLength = readBuffer.readInt("maxStringLength", 32) ;

        // Simple Field (maxByteStringLength)
int maxByteStringLength = readBuffer.readInt("maxByteStringLength", 32) ;

        // Simple Field (maxArrayLength)
int maxArrayLength = readBuffer.readInt("maxArrayLength", 32) ;

        // Simple Field (maxMessageSize)
int maxMessageSize = readBuffer.readInt("maxMessageSize", 32) ;

        // Simple Field (maxBufferSize)
int maxBufferSize = readBuffer.readInt("maxBufferSize", 32) ;

        // Simple Field (channelLifetime)
int channelLifetime = readBuffer.readInt("channelLifetime", 32) ;

        // Simple Field (securityTokenLifetime)
int securityTokenLifetime = readBuffer.readInt("securityTokenLifetime", 32) ;
        readBuffer.closeContext("EndpointConfiguration");
        // Create the instance
        return new EndpointConfigurationBuilder(operationTimeout, useBinaryEncoding, maxStringLength, maxByteStringLength, maxArrayLength, maxMessageSize, maxBufferSize, channelLifetime, securityTokenLifetime);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, EndpointConfiguration _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("EndpointConfiguration");

        // Simple Field (operationTimeout)
        int operationTimeout = (int) _value.getOperationTimeout();
        writeBuffer.writeInt("operationTimeout", 32, ((Number) (operationTimeout)).intValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (useBinaryEncoding)
        boolean useBinaryEncoding = (boolean) _value.getUseBinaryEncoding();
        writeBuffer.writeBit("useBinaryEncoding", (boolean) (useBinaryEncoding));

        // Simple Field (maxStringLength)
        int maxStringLength = (int) _value.getMaxStringLength();
        writeBuffer.writeInt("maxStringLength", 32, ((Number) (maxStringLength)).intValue());

        // Simple Field (maxByteStringLength)
        int maxByteStringLength = (int) _value.getMaxByteStringLength();
        writeBuffer.writeInt("maxByteStringLength", 32, ((Number) (maxByteStringLength)).intValue());

        // Simple Field (maxArrayLength)
        int maxArrayLength = (int) _value.getMaxArrayLength();
        writeBuffer.writeInt("maxArrayLength", 32, ((Number) (maxArrayLength)).intValue());

        // Simple Field (maxMessageSize)
        int maxMessageSize = (int) _value.getMaxMessageSize();
        writeBuffer.writeInt("maxMessageSize", 32, ((Number) (maxMessageSize)).intValue());

        // Simple Field (maxBufferSize)
        int maxBufferSize = (int) _value.getMaxBufferSize();
        writeBuffer.writeInt("maxBufferSize", 32, ((Number) (maxBufferSize)).intValue());

        // Simple Field (channelLifetime)
        int channelLifetime = (int) _value.getChannelLifetime();
        writeBuffer.writeInt("channelLifetime", 32, ((Number) (channelLifetime)).intValue());

        // Simple Field (securityTokenLifetime)
        int securityTokenLifetime = (int) _value.getSecurityTokenLifetime();
        writeBuffer.writeInt("securityTokenLifetime", 32, ((Number) (securityTokenLifetime)).intValue());
        writeBuffer.popContext("EndpointConfiguration");
    }

    public static class EndpointConfigurationBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final int operationTimeout;
        private final boolean useBinaryEncoding;
        private final int maxStringLength;
        private final int maxByteStringLength;
        private final int maxArrayLength;
        private final int maxMessageSize;
        private final int maxBufferSize;
        private final int channelLifetime;
        private final int securityTokenLifetime;

        public EndpointConfigurationBuilder(int operationTimeout, boolean useBinaryEncoding, int maxStringLength, int maxByteStringLength, int maxArrayLength, int maxMessageSize, int maxBufferSize, int channelLifetime, int securityTokenLifetime) {
            this.operationTimeout = operationTimeout;
            this.useBinaryEncoding = useBinaryEncoding;
            this.maxStringLength = maxStringLength;
            this.maxByteStringLength = maxByteStringLength;
            this.maxArrayLength = maxArrayLength;
            this.maxMessageSize = maxMessageSize;
            this.maxBufferSize = maxBufferSize;
            this.channelLifetime = channelLifetime;
            this.securityTokenLifetime = securityTokenLifetime;
        }

        public EndpointConfiguration build() {
            return new EndpointConfiguration(operationTimeout, useBinaryEncoding, maxStringLength, maxByteStringLength, maxArrayLength, maxMessageSize, maxBufferSize, channelLifetime, securityTokenLifetime);
        }
    }

}
