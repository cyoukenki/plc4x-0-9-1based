/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SetTriggeringRequest extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "775";
    }

    // Properties.
    private final ExtensionObjectDefinition requestHeader;
    private final long subscriptionId;
    private final long triggeringItemId;
    private final int noOfLinksToAdd;
    private final long[] linksToAdd;
    private final int noOfLinksToRemove;
    private final long[] linksToRemove;

    public SetTriggeringRequest(ExtensionObjectDefinition requestHeader, long subscriptionId, long triggeringItemId, int noOfLinksToAdd, long[] linksToAdd, int noOfLinksToRemove, long[] linksToRemove) {
        this.requestHeader = requestHeader;
        this.subscriptionId = subscriptionId;
        this.triggeringItemId = triggeringItemId;
        this.noOfLinksToAdd = noOfLinksToAdd;
        this.linksToAdd = linksToAdd;
        this.noOfLinksToRemove = noOfLinksToRemove;
        this.linksToRemove = linksToRemove;
    }

    public ExtensionObjectDefinition getRequestHeader() {
        return requestHeader;
    }

    public long getSubscriptionId() {
        return subscriptionId;
    }

    public long getTriggeringItemId() {
        return triggeringItemId;
    }

    public int getNoOfLinksToAdd() {
        return noOfLinksToAdd;
    }

    public long[] getLinksToAdd() {
        return linksToAdd;
    }

    public int getNoOfLinksToRemove() {
        return noOfLinksToRemove;
    }

    public long[] getLinksToRemove() {
        return linksToRemove;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        SetTriggeringRequest _value  = this;

        // Simple field (requestHeader)
        lengthInBits += requestHeader.getLengthInBits();

        // Simple field (subscriptionId)
        lengthInBits += 32;

        // Simple field (triggeringItemId)
        lengthInBits += 32;

        // Simple field (noOfLinksToAdd)
        lengthInBits += 32;

        // Array field
        if(linksToAdd != null) {
            lengthInBits += 32 * linksToAdd.length;
        }

        // Simple field (noOfLinksToRemove)
        lengthInBits += 32;

        // Array field
        if(linksToRemove != null) {
            lengthInBits += 32 * linksToRemove.length;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SetTriggeringRequest)) {
            return false;
        }
        SetTriggeringRequest that = (SetTriggeringRequest) o;
        return
            (getRequestHeader() == that.getRequestHeader()) &&
            (getSubscriptionId() == that.getSubscriptionId()) &&
            (getTriggeringItemId() == that.getTriggeringItemId()) &&
            (getNoOfLinksToAdd() == that.getNoOfLinksToAdd()) &&
            (getLinksToAdd() == that.getLinksToAdd()) &&
            (getNoOfLinksToRemove() == that.getNoOfLinksToRemove()) &&
            (getLinksToRemove() == that.getLinksToRemove()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getRequestHeader(),
            getSubscriptionId(),
            getTriggeringItemId(),
            getNoOfLinksToAdd(),
            getLinksToAdd(),
            getNoOfLinksToRemove(),
            getLinksToRemove()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("requestHeader", getRequestHeader())
            .append("subscriptionId", getSubscriptionId())
            .append("triggeringItemId", getTriggeringItemId())
            .append("noOfLinksToAdd", getNoOfLinksToAdd())
            .append("linksToAdd", getLinksToAdd())
            .append("noOfLinksToRemove", getNoOfLinksToRemove())
            .append("linksToRemove", getLinksToRemove())
            .toString();
    }

}
