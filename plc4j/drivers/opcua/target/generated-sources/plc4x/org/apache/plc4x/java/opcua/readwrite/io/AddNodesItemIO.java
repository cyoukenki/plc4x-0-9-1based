/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AddNodesItemIO implements MessageIO<AddNodesItem, AddNodesItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddNodesItemIO.class);

    @Override
    public AddNodesItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AddNodesItem) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AddNodesItem value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static AddNodesItemBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AddNodesItem");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("parentNodeId");

        // Simple Field (parentNodeId)
ExpandedNodeId parentNodeId = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("parentNodeId");

        readBuffer.pullContext("referenceTypeId");

        // Simple Field (referenceTypeId)
NodeId referenceTypeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("referenceTypeId");

        readBuffer.pullContext("requestedNewNodeId");

        // Simple Field (requestedNewNodeId)
ExpandedNodeId requestedNewNodeId = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("requestedNewNodeId");

        readBuffer.pullContext("browseName");

        // Simple Field (browseName)
QualifiedName browseName = QualifiedNameIO.staticParse(readBuffer ) ;        readBuffer.closeContext("browseName");

        readBuffer.pullContext("nodeClass");

        // Simple Field (nodeClass)
        // enum based simple field with type NodeClass
        NodeClass nodeClass = NodeClass.enumForValue(readBuffer.readUnsignedLong("NodeClass", 32));
        readBuffer.closeContext("nodeClass");

        readBuffer.pullContext("nodeAttributes");

        // Simple Field (nodeAttributes)
ExtensionObject nodeAttributes = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("nodeAttributes");

        readBuffer.pullContext("typeDefinition");

        // Simple Field (typeDefinition)
ExpandedNodeId typeDefinition = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("typeDefinition");

        readBuffer.closeContext("AddNodesItem");
        // Create the instance
        return new AddNodesItemBuilder(parentNodeId, referenceTypeId, requestedNewNodeId, browseName, nodeClass, nodeAttributes, typeDefinition);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AddNodesItem _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AddNodesItem");

        // Simple Field (parentNodeId)
        ExpandedNodeId parentNodeId = (ExpandedNodeId) _value.getParentNodeId();
        writeBuffer.pushContext("parentNodeId");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, parentNodeId);
        writeBuffer.popContext("parentNodeId");

        // Simple Field (referenceTypeId)
        NodeId referenceTypeId = (NodeId) _value.getReferenceTypeId();
        writeBuffer.pushContext("referenceTypeId");
        NodeIdIO.staticSerialize(writeBuffer, referenceTypeId);
        writeBuffer.popContext("referenceTypeId");

        // Simple Field (requestedNewNodeId)
        ExpandedNodeId requestedNewNodeId = (ExpandedNodeId) _value.getRequestedNewNodeId();
        writeBuffer.pushContext("requestedNewNodeId");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, requestedNewNodeId);
        writeBuffer.popContext("requestedNewNodeId");

        // Simple Field (browseName)
        QualifiedName browseName = (QualifiedName) _value.getBrowseName();
        writeBuffer.pushContext("browseName");
        QualifiedNameIO.staticSerialize(writeBuffer, browseName);
        writeBuffer.popContext("browseName");

        // Simple Field (nodeClass)
        NodeClass nodeClass = (NodeClass) _value.getNodeClass();
        writeBuffer.pushContext("nodeClass");
        // enum field with type NodeClass
        writeBuffer.writeUnsignedLong("NodeClass", 32, ((Number) (nodeClass.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(nodeClass.name()));
        writeBuffer.popContext("nodeClass");

        // Simple Field (nodeAttributes)
        ExtensionObject nodeAttributes = (ExtensionObject) _value.getNodeAttributes();
        writeBuffer.pushContext("nodeAttributes");
        ExtensionObjectIO.staticSerialize(writeBuffer, nodeAttributes);
        writeBuffer.popContext("nodeAttributes");

        // Simple Field (typeDefinition)
        ExpandedNodeId typeDefinition = (ExpandedNodeId) _value.getTypeDefinition();
        writeBuffer.pushContext("typeDefinition");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, typeDefinition);
        writeBuffer.popContext("typeDefinition");
        writeBuffer.popContext("AddNodesItem");
    }

    public static class AddNodesItemBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExpandedNodeId parentNodeId;
        private final NodeId referenceTypeId;
        private final ExpandedNodeId requestedNewNodeId;
        private final QualifiedName browseName;
        private final NodeClass nodeClass;
        private final ExtensionObject nodeAttributes;
        private final ExpandedNodeId typeDefinition;

        public AddNodesItemBuilder(ExpandedNodeId parentNodeId, NodeId referenceTypeId, ExpandedNodeId requestedNewNodeId, QualifiedName browseName, NodeClass nodeClass, ExtensionObject nodeAttributes, ExpandedNodeId typeDefinition) {
            this.parentNodeId = parentNodeId;
            this.referenceTypeId = referenceTypeId;
            this.requestedNewNodeId = requestedNewNodeId;
            this.browseName = browseName;
            this.nodeClass = nodeClass;
            this.nodeAttributes = nodeAttributes;
            this.typeDefinition = typeDefinition;
        }

        public AddNodesItem build() {
            return new AddNodesItem(parentNodeId, referenceTypeId, requestedNewNodeId, browseName, nodeClass, nodeAttributes, typeDefinition);
        }
    }

}
