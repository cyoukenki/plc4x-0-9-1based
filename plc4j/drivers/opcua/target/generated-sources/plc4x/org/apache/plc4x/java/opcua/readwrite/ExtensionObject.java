/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ExtensionObject implements Message {


    // Properties.
    private final ExpandedNodeId typeId;
    private final ExtensionObjectEncodingMask encodingMask;
    private final ExtensionObjectDefinition body;

    public ExtensionObject(ExpandedNodeId typeId, ExtensionObjectEncodingMask encodingMask, ExtensionObjectDefinition body) {
        this.typeId = typeId;
        this.encodingMask = encodingMask;
        this.body = body;
    }

    public ExpandedNodeId getTypeId() {
        return typeId;
    }

    public ExtensionObjectEncodingMask getEncodingMask() {
        return encodingMask;
    }

    public ExtensionObjectDefinition getBody() {
        return body;
    }

    public String getIdentifier() {
        return String.valueOf(typeId.getIdentifier());
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        ExtensionObject _value  = this;

        // Simple field (typeId)
        lengthInBits += typeId.getLengthInBits();

        // Optional Field (encodingMask)
        if(encodingMask != null) {
            lengthInBits += encodingMask.getLengthInBits();
        }

        // A virtual field doesn't have any in- or output.

        // Simple field (body)
        lengthInBits += body.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObject, ExtensionObject> getMessageIO() {
        return new ExtensionObjectIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ExtensionObject)) {
            return false;
        }
        ExtensionObject that = (ExtensionObject) o;
        return
            (getTypeId() == that.getTypeId()) &&
            (getEncodingMask() == that.getEncodingMask()) &&
            (getBody() == that.getBody()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTypeId(),
            getEncodingMask(),
            getBody()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("typeId", getTypeId())
            .append("encodingMask", getEncodingMask())
            .append("body", getBody())
            .append("identifier", getIdentifier())
            .toString();
    }

}
