/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CurrencyUnitTypeIO implements MessageIO<CurrencyUnitType, CurrencyUnitType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CurrencyUnitTypeIO.class);

    @Override
    public CurrencyUnitType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CurrencyUnitType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CurrencyUnitType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static CurrencyUnitTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CurrencyUnitType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (numericCode)
short numericCode = readBuffer.readShort("numericCode", 16) ;

        // Simple Field (exponent)
byte exponent = readBuffer.readSignedByte("exponent", 8) ;
        readBuffer.pullContext("alphabeticCode");

        // Simple Field (alphabeticCode)
PascalString alphabeticCode = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("alphabeticCode");

        readBuffer.pullContext("currency");

        // Simple Field (currency)
LocalizedText currency = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("currency");

        readBuffer.closeContext("CurrencyUnitType");
        // Create the instance
        return new CurrencyUnitTypeBuilder(numericCode, exponent, alphabeticCode, currency);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CurrencyUnitType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CurrencyUnitType");

        // Simple Field (numericCode)
        short numericCode = (short) _value.getNumericCode();
        writeBuffer.writeShort("numericCode", 16, ((Number) (numericCode)).shortValue());

        // Simple Field (exponent)
        byte exponent = (byte) _value.getExponent();
        writeBuffer.writeSignedByte("exponent", 8, ((Number) (exponent)).byteValue());

        // Simple Field (alphabeticCode)
        PascalString alphabeticCode = (PascalString) _value.getAlphabeticCode();
        writeBuffer.pushContext("alphabeticCode");
        PascalStringIO.staticSerialize(writeBuffer, alphabeticCode);
        writeBuffer.popContext("alphabeticCode");

        // Simple Field (currency)
        LocalizedText currency = (LocalizedText) _value.getCurrency();
        writeBuffer.pushContext("currency");
        LocalizedTextIO.staticSerialize(writeBuffer, currency);
        writeBuffer.popContext("currency");
        writeBuffer.popContext("CurrencyUnitType");
    }

    public static class CurrencyUnitTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final short numericCode;
        private final byte exponent;
        private final PascalString alphabeticCode;
        private final LocalizedText currency;

        public CurrencyUnitTypeBuilder(short numericCode, byte exponent, PascalString alphabeticCode, LocalizedText currency) {
            this.numericCode = numericCode;
            this.exponent = exponent;
            this.alphabeticCode = alphabeticCode;
            this.currency = currency;
        }

        public CurrencyUnitType build() {
            return new CurrencyUnitType(numericCode, exponent, alphabeticCode, currency);
        }
    }

}
