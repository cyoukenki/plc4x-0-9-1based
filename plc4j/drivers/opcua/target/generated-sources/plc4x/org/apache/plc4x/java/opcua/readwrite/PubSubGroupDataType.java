/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PubSubGroupDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "15611";
    }

    // Properties.
    private final PascalString name;
    private final boolean enabled;
    private final MessageSecurityMode securityMode;
    private final PascalString securityGroupId;
    private final int noOfSecurityKeyServices;
    private final ExtensionObjectDefinition[] securityKeyServices;
    private final long maxNetworkMessageSize;
    private final int noOfGroupProperties;
    private final ExtensionObjectDefinition[] groupProperties;

    public PubSubGroupDataType(PascalString name, boolean enabled, MessageSecurityMode securityMode, PascalString securityGroupId, int noOfSecurityKeyServices, ExtensionObjectDefinition[] securityKeyServices, long maxNetworkMessageSize, int noOfGroupProperties, ExtensionObjectDefinition[] groupProperties) {
        this.name = name;
        this.enabled = enabled;
        this.securityMode = securityMode;
        this.securityGroupId = securityGroupId;
        this.noOfSecurityKeyServices = noOfSecurityKeyServices;
        this.securityKeyServices = securityKeyServices;
        this.maxNetworkMessageSize = maxNetworkMessageSize;
        this.noOfGroupProperties = noOfGroupProperties;
        this.groupProperties = groupProperties;
    }

    public PascalString getName() {
        return name;
    }

    public boolean getEnabled() {
        return enabled;
    }

    public MessageSecurityMode getSecurityMode() {
        return securityMode;
    }

    public PascalString getSecurityGroupId() {
        return securityGroupId;
    }

    public int getNoOfSecurityKeyServices() {
        return noOfSecurityKeyServices;
    }

    public ExtensionObjectDefinition[] getSecurityKeyServices() {
        return securityKeyServices;
    }

    public long getMaxNetworkMessageSize() {
        return maxNetworkMessageSize;
    }

    public int getNoOfGroupProperties() {
        return noOfGroupProperties;
    }

    public ExtensionObjectDefinition[] getGroupProperties() {
        return groupProperties;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PubSubGroupDataType _value  = this;

        // Simple field (name)
        lengthInBits += name.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 7;

        // Simple field (enabled)
        lengthInBits += 1;

        // Simple field (securityMode)
        lengthInBits += 32;

        // Simple field (securityGroupId)
        lengthInBits += securityGroupId.getLengthInBits();

        // Simple field (noOfSecurityKeyServices)
        lengthInBits += 32;

        // Array field
        if(securityKeyServices != null) {
            int i=0;
            for(ExtensionObjectDefinition element : securityKeyServices) {
                boolean last = ++i >= securityKeyServices.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (maxNetworkMessageSize)
        lengthInBits += 32;

        // Simple field (noOfGroupProperties)
        lengthInBits += 32;

        // Array field
        if(groupProperties != null) {
            int i=0;
            for(ExtensionObjectDefinition element : groupProperties) {
                boolean last = ++i >= groupProperties.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PubSubGroupDataType)) {
            return false;
        }
        PubSubGroupDataType that = (PubSubGroupDataType) o;
        return
            (getName() == that.getName()) &&
            (getEnabled() == that.getEnabled()) &&
            (getSecurityMode() == that.getSecurityMode()) &&
            (getSecurityGroupId() == that.getSecurityGroupId()) &&
            (getNoOfSecurityKeyServices() == that.getNoOfSecurityKeyServices()) &&
            (getSecurityKeyServices() == that.getSecurityKeyServices()) &&
            (getMaxNetworkMessageSize() == that.getMaxNetworkMessageSize()) &&
            (getNoOfGroupProperties() == that.getNoOfGroupProperties()) &&
            (getGroupProperties() == that.getGroupProperties()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getName(),
            getEnabled(),
            getSecurityMode(),
            getSecurityGroupId(),
            getNoOfSecurityKeyServices(),
            getSecurityKeyServices(),
            getMaxNetworkMessageSize(),
            getNoOfGroupProperties(),
            getGroupProperties()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("name", getName())
            .append("enabled", getEnabled())
            .append("securityMode", getSecurityMode())
            .append("securityGroupId", getSecurityGroupId())
            .append("noOfSecurityKeyServices", getNoOfSecurityKeyServices())
            .append("securityKeyServices", getSecurityKeyServices())
            .append("maxNetworkMessageSize", getMaxNetworkMessageSize())
            .append("noOfGroupProperties", getNoOfGroupProperties())
            .append("groupProperties", getGroupProperties())
            .toString();
    }

}
