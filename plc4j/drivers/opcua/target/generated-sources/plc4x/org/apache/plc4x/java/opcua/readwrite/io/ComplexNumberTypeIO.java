/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ComplexNumberTypeIO implements MessageIO<ComplexNumberType, ComplexNumberType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ComplexNumberTypeIO.class);

    @Override
    public ComplexNumberType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ComplexNumberType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ComplexNumberType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ComplexNumberTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ComplexNumberType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (real)
float real = ((Supplier<Float>) (() -> { return (float) toFloat(readBuffer, "real", true, 8, 23); })).get() ;

        // Simple Field (imaginary)
float imaginary = ((Supplier<Float>) (() -> { return (float) toFloat(readBuffer, "imaginary", true, 8, 23); })).get() ;
        readBuffer.closeContext("ComplexNumberType");
        // Create the instance
        return new ComplexNumberTypeBuilder(real, imaginary);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ComplexNumberType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ComplexNumberType");

        // Simple Field (real)
        float real = (float) _value.getReal();
        writeBuffer.writeFloat("real", (real),8,23);

        // Simple Field (imaginary)
        float imaginary = (float) _value.getImaginary();
        writeBuffer.writeFloat("imaginary", (imaginary),8,23);
        writeBuffer.popContext("ComplexNumberType");
    }

    public static class ComplexNumberTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final float real;
        private final float imaginary;

        public ComplexNumberTypeBuilder(float real, float imaginary) {
            this.real = real;
            this.imaginary = imaginary;
        }

        public ComplexNumberType build() {
            return new ComplexNumberType(real, imaginary);
        }
    }

}
