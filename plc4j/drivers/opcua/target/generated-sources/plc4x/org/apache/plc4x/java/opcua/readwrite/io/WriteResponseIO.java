/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class WriteResponseIO implements MessageIO<WriteResponse, WriteResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(WriteResponseIO.class);

    @Override
    public WriteResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (WriteResponse) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, WriteResponse value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static WriteResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("WriteResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("responseHeader");

        // Simple Field (responseHeader)
ExtensionObjectDefinition responseHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(394) ) ;        readBuffer.closeContext("responseHeader");


        // Simple Field (noOfResults)
int noOfResults = readBuffer.readInt("noOfResults", 32) ;        // Array field (results)
        readBuffer.pullContext("results", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfResults > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfResults) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] results;
        {
            int itemCount = Math.max(0, (int) noOfResults);
            results = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
results[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("results", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfDiagnosticInfos)
int noOfDiagnosticInfos = readBuffer.readInt("noOfDiagnosticInfos", 32) ;        // Array field (diagnosticInfos)
        readBuffer.pullContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] diagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfDiagnosticInfos);
            diagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
diagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("WriteResponse");
        // Create the instance
        return new WriteResponseBuilder(responseHeader, noOfResults, results, noOfDiagnosticInfos, diagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, WriteResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("WriteResponse");

        // Simple Field (responseHeader)
        ExtensionObjectDefinition responseHeader = (ExtensionObjectDefinition) _value.getResponseHeader();
        writeBuffer.pushContext("responseHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, responseHeader);
        writeBuffer.popContext("responseHeader");

        // Simple Field (noOfResults)
        int noOfResults = (int) _value.getNoOfResults();
        writeBuffer.writeInt("noOfResults", 32, ((Number) (noOfResults)).intValue());

        // Array Field (results)
        if(_value.getResults() != null) {
            writeBuffer.pushContext("results", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getResults().length;
            int curItem = 0;
            for(StatusCode element : _value.getResults()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("results", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfDiagnosticInfos)
        int noOfDiagnosticInfos = (int) _value.getNoOfDiagnosticInfos();
        writeBuffer.writeInt("noOfDiagnosticInfos", 32, ((Number) (noOfDiagnosticInfos)).intValue());

        // Array Field (diagnosticInfos)
        if(_value.getDiagnosticInfos() != null) {
            writeBuffer.pushContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("WriteResponse");
    }

    public static class WriteResponseBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition responseHeader;
        private final int noOfResults;
        private final StatusCode[] results;
        private final int noOfDiagnosticInfos;
        private final DiagnosticInfo[] diagnosticInfos;

        public WriteResponseBuilder(ExtensionObjectDefinition responseHeader, int noOfResults, StatusCode[] results, int noOfDiagnosticInfos, DiagnosticInfo[] diagnosticInfos) {
            this.responseHeader = responseHeader;
            this.noOfResults = noOfResults;
            this.results = results;
            this.noOfDiagnosticInfos = noOfDiagnosticInfos;
            this.diagnosticInfos = diagnosticInfos;
        }

        public WriteResponse build() {
            return new WriteResponse(responseHeader, noOfResults, results, noOfDiagnosticInfos, diagnosticInfos);
        }
    }

}
