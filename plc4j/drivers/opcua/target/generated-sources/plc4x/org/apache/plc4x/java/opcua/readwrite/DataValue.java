/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DataValue implements Message {


    // Properties.
    private final boolean serverPicosecondsSpecified;
    private final boolean sourcePicosecondsSpecified;
    private final boolean serverTimestampSpecified;
    private final boolean sourceTimestampSpecified;
    private final boolean statusCodeSpecified;
    private final boolean valueSpecified;
    private final Variant value;
    private final StatusCode statusCode;
    private final Long sourceTimestamp;
    private final Integer sourcePicoseconds;
    private final Long serverTimestamp;
    private final Integer serverPicoseconds;

    public DataValue(boolean serverPicosecondsSpecified, boolean sourcePicosecondsSpecified, boolean serverTimestampSpecified, boolean sourceTimestampSpecified, boolean statusCodeSpecified, boolean valueSpecified, Variant value, StatusCode statusCode, Long sourceTimestamp, Integer sourcePicoseconds, Long serverTimestamp, Integer serverPicoseconds) {
        this.serverPicosecondsSpecified = serverPicosecondsSpecified;
        this.sourcePicosecondsSpecified = sourcePicosecondsSpecified;
        this.serverTimestampSpecified = serverTimestampSpecified;
        this.sourceTimestampSpecified = sourceTimestampSpecified;
        this.statusCodeSpecified = statusCodeSpecified;
        this.valueSpecified = valueSpecified;
        this.value = value;
        this.statusCode = statusCode;
        this.sourceTimestamp = sourceTimestamp;
        this.sourcePicoseconds = sourcePicoseconds;
        this.serverTimestamp = serverTimestamp;
        this.serverPicoseconds = serverPicoseconds;
    }

    public boolean getServerPicosecondsSpecified() {
        return serverPicosecondsSpecified;
    }

    public boolean getSourcePicosecondsSpecified() {
        return sourcePicosecondsSpecified;
    }

    public boolean getServerTimestampSpecified() {
        return serverTimestampSpecified;
    }

    public boolean getSourceTimestampSpecified() {
        return sourceTimestampSpecified;
    }

    public boolean getStatusCodeSpecified() {
        return statusCodeSpecified;
    }

    public boolean getValueSpecified() {
        return valueSpecified;
    }

    public Variant getValue() {
        return value;
    }

    public StatusCode getStatusCode() {
        return statusCode;
    }

    public Long getSourceTimestamp() {
        return sourceTimestamp;
    }

    public Integer getSourcePicoseconds() {
        return sourcePicoseconds;
    }

    public Long getServerTimestamp() {
        return serverTimestamp;
    }

    public Integer getServerPicoseconds() {
        return serverPicoseconds;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        DataValue _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 2;

        // Simple field (serverPicosecondsSpecified)
        lengthInBits += 1;

        // Simple field (sourcePicosecondsSpecified)
        lengthInBits += 1;

        // Simple field (serverTimestampSpecified)
        lengthInBits += 1;

        // Simple field (sourceTimestampSpecified)
        lengthInBits += 1;

        // Simple field (statusCodeSpecified)
        lengthInBits += 1;

        // Simple field (valueSpecified)
        lengthInBits += 1;

        // Optional Field (value)
        if(value != null) {
            lengthInBits += value.getLengthInBits();
        }

        // Optional Field (statusCode)
        if(statusCode != null) {
            lengthInBits += statusCode.getLengthInBits();
        }

        // Optional Field (sourceTimestamp)
        if(sourceTimestamp != null) {
            lengthInBits += 64;
        }

        // Optional Field (sourcePicoseconds)
        if(sourcePicoseconds != null) {
            lengthInBits += 16;
        }

        // Optional Field (serverTimestamp)
        if(serverTimestamp != null) {
            lengthInBits += 64;
        }

        // Optional Field (serverPicoseconds)
        if(serverPicoseconds != null) {
            lengthInBits += 16;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<DataValue, DataValue> getMessageIO() {
        return new DataValueIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DataValue)) {
            return false;
        }
        DataValue that = (DataValue) o;
        return
            (getServerPicosecondsSpecified() == that.getServerPicosecondsSpecified()) &&
            (getSourcePicosecondsSpecified() == that.getSourcePicosecondsSpecified()) &&
            (getServerTimestampSpecified() == that.getServerTimestampSpecified()) &&
            (getSourceTimestampSpecified() == that.getSourceTimestampSpecified()) &&
            (getStatusCodeSpecified() == that.getStatusCodeSpecified()) &&
            (getValueSpecified() == that.getValueSpecified()) &&
            (getValue() == that.getValue()) &&
            (getStatusCode() == that.getStatusCode()) &&
            (getSourceTimestamp() == that.getSourceTimestamp()) &&
            (getSourcePicoseconds() == that.getSourcePicoseconds()) &&
            (getServerTimestamp() == that.getServerTimestamp()) &&
            (getServerPicoseconds() == that.getServerPicoseconds()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getServerPicosecondsSpecified(),
            getSourcePicosecondsSpecified(),
            getServerTimestampSpecified(),
            getSourceTimestampSpecified(),
            getStatusCodeSpecified(),
            getValueSpecified(),
            getValue(),
            getStatusCode(),
            getSourceTimestamp(),
            getSourcePicoseconds(),
            getServerTimestamp(),
            getServerPicoseconds()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("serverPicosecondsSpecified", getServerPicosecondsSpecified())
            .append("sourcePicosecondsSpecified", getSourcePicosecondsSpecified())
            .append("serverTimestampSpecified", getServerTimestampSpecified())
            .append("sourceTimestampSpecified", getSourceTimestampSpecified())
            .append("statusCodeSpecified", getStatusCodeSpecified())
            .append("valueSpecified", getValueSpecified())
            .append("value", getValue())
            .append("statusCode", getStatusCode())
            .append("sourceTimestamp", getSourceTimestamp())
            .append("sourcePicoseconds", getSourcePicoseconds())
            .append("serverTimestamp", getServerTimestamp())
            .append("serverPicoseconds", getServerPicoseconds())
            .toString();
    }

}
