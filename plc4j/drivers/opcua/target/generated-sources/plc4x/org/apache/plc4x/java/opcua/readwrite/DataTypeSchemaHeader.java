/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DataTypeSchemaHeader extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "15536";
    }

    // Properties.
    private final int noOfNamespaces;
    private final PascalString[] namespaces;
    private final int noOfStructureDataTypes;
    private final DataTypeDescription[] structureDataTypes;
    private final int noOfEnumDataTypes;
    private final DataTypeDescription[] enumDataTypes;
    private final int noOfSimpleDataTypes;
    private final DataTypeDescription[] simpleDataTypes;

    public DataTypeSchemaHeader(int noOfNamespaces, PascalString[] namespaces, int noOfStructureDataTypes, DataTypeDescription[] structureDataTypes, int noOfEnumDataTypes, DataTypeDescription[] enumDataTypes, int noOfSimpleDataTypes, DataTypeDescription[] simpleDataTypes) {
        this.noOfNamespaces = noOfNamespaces;
        this.namespaces = namespaces;
        this.noOfStructureDataTypes = noOfStructureDataTypes;
        this.structureDataTypes = structureDataTypes;
        this.noOfEnumDataTypes = noOfEnumDataTypes;
        this.enumDataTypes = enumDataTypes;
        this.noOfSimpleDataTypes = noOfSimpleDataTypes;
        this.simpleDataTypes = simpleDataTypes;
    }

    public int getNoOfNamespaces() {
        return noOfNamespaces;
    }

    public PascalString[] getNamespaces() {
        return namespaces;
    }

    public int getNoOfStructureDataTypes() {
        return noOfStructureDataTypes;
    }

    public DataTypeDescription[] getStructureDataTypes() {
        return structureDataTypes;
    }

    public int getNoOfEnumDataTypes() {
        return noOfEnumDataTypes;
    }

    public DataTypeDescription[] getEnumDataTypes() {
        return enumDataTypes;
    }

    public int getNoOfSimpleDataTypes() {
        return noOfSimpleDataTypes;
    }

    public DataTypeDescription[] getSimpleDataTypes() {
        return simpleDataTypes;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        DataTypeSchemaHeader _value  = this;

        // Simple field (noOfNamespaces)
        lengthInBits += 32;

        // Array field
        if(namespaces != null) {
            int i=0;
            for(PascalString element : namespaces) {
                boolean last = ++i >= namespaces.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfStructureDataTypes)
        lengthInBits += 32;

        // Array field
        if(structureDataTypes != null) {
            int i=0;
            for(DataTypeDescription element : structureDataTypes) {
                boolean last = ++i >= structureDataTypes.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfEnumDataTypes)
        lengthInBits += 32;

        // Array field
        if(enumDataTypes != null) {
            int i=0;
            for(DataTypeDescription element : enumDataTypes) {
                boolean last = ++i >= enumDataTypes.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfSimpleDataTypes)
        lengthInBits += 32;

        // Array field
        if(simpleDataTypes != null) {
            int i=0;
            for(DataTypeDescription element : simpleDataTypes) {
                boolean last = ++i >= simpleDataTypes.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DataTypeSchemaHeader)) {
            return false;
        }
        DataTypeSchemaHeader that = (DataTypeSchemaHeader) o;
        return
            (getNoOfNamespaces() == that.getNoOfNamespaces()) &&
            (getNamespaces() == that.getNamespaces()) &&
            (getNoOfStructureDataTypes() == that.getNoOfStructureDataTypes()) &&
            (getStructureDataTypes() == that.getStructureDataTypes()) &&
            (getNoOfEnumDataTypes() == that.getNoOfEnumDataTypes()) &&
            (getEnumDataTypes() == that.getEnumDataTypes()) &&
            (getNoOfSimpleDataTypes() == that.getNoOfSimpleDataTypes()) &&
            (getSimpleDataTypes() == that.getSimpleDataTypes()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getNoOfNamespaces(),
            getNamespaces(),
            getNoOfStructureDataTypes(),
            getStructureDataTypes(),
            getNoOfEnumDataTypes(),
            getEnumDataTypes(),
            getNoOfSimpleDataTypes(),
            getSimpleDataTypes()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("noOfNamespaces", getNoOfNamespaces())
            .append("namespaces", getNamespaces())
            .append("noOfStructureDataTypes", getNoOfStructureDataTypes())
            .append("structureDataTypes", getStructureDataTypes())
            .append("noOfEnumDataTypes", getNoOfEnumDataTypes())
            .append("enumDataTypes", getEnumDataTypes())
            .append("noOfSimpleDataTypes", getNoOfSimpleDataTypes())
            .append("simpleDataTypes", getSimpleDataTypes())
            .toString();
    }

}
