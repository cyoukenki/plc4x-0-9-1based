/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class GuidValue implements Message {


    // Properties.
    private final long data1;
    private final int data2;
    private final int data3;
    private final byte[] data4;
    private final byte[] data5;

    public GuidValue(long data1, int data2, int data3, byte[] data4, byte[] data5) {
        this.data1 = data1;
        this.data2 = data2;
        this.data3 = data3;
        this.data4 = data4;
        this.data5 = data5;
    }

    public long getData1() {
        return data1;
    }

    public int getData2() {
        return data2;
    }

    public int getData3() {
        return data3;
    }

    public byte[] getData4() {
        return data4;
    }

    public byte[] getData5() {
        return data5;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        GuidValue _value  = this;

        // Simple field (data1)
        lengthInBits += 32;

        // Simple field (data2)
        lengthInBits += 16;

        // Simple field (data3)
        lengthInBits += 16;

        // Array field
        if(data4 != null) {
            lengthInBits += 8 * data4.length;
        }

        // Array field
        if(data5 != null) {
            lengthInBits += 8 * data5.length;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<GuidValue, GuidValue> getMessageIO() {
        return new GuidValueIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof GuidValue)) {
            return false;
        }
        GuidValue that = (GuidValue) o;
        return
            (getData1() == that.getData1()) &&
            (getData2() == that.getData2()) &&
            (getData3() == that.getData3()) &&
            (getData4() == that.getData4()) &&
            (getData5() == that.getData5()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getData1(),
            getData2(),
            getData3(),
            getData4(),
            getData5()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("data1", getData1())
            .append("data2", getData2())
            .append("data3", getData3())
            .append("data4", getData4())
            .append("data5", getData5())
            .toString();
    }

}
