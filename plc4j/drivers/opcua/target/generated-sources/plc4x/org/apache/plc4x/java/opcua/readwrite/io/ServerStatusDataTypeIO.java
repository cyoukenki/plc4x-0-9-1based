/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ServerStatusDataTypeIO implements MessageIO<ServerStatusDataType, ServerStatusDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerStatusDataTypeIO.class);

    @Override
    public ServerStatusDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ServerStatusDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ServerStatusDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ServerStatusDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ServerStatusDataType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (startTime)
long startTime = readBuffer.readLong("startTime", 64) ;

        // Simple Field (currentTime)
long currentTime = readBuffer.readLong("currentTime", 64) ;
        readBuffer.pullContext("state");

        // Simple Field (state)
        // enum based simple field with type ServerState
        ServerState state = ServerState.enumForValue(readBuffer.readUnsignedLong("ServerState", 32));
        readBuffer.closeContext("state");

        readBuffer.pullContext("buildInfo");

        // Simple Field (buildInfo)
ExtensionObjectDefinition buildInfo = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(340) ) ;        readBuffer.closeContext("buildInfo");


        // Simple Field (secondsTillShutdown)
long secondsTillShutdown = readBuffer.readUnsignedLong("secondsTillShutdown", 32) ;
        readBuffer.pullContext("shutdownReason");

        // Simple Field (shutdownReason)
LocalizedText shutdownReason = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("shutdownReason");

        readBuffer.closeContext("ServerStatusDataType");
        // Create the instance
        return new ServerStatusDataTypeBuilder(startTime, currentTime, state, buildInfo, secondsTillShutdown, shutdownReason);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ServerStatusDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ServerStatusDataType");

        // Simple Field (startTime)
        long startTime = (long) _value.getStartTime();
        writeBuffer.writeLong("startTime", 64, ((Number) (startTime)).longValue());

        // Simple Field (currentTime)
        long currentTime = (long) _value.getCurrentTime();
        writeBuffer.writeLong("currentTime", 64, ((Number) (currentTime)).longValue());

        // Simple Field (state)
        ServerState state = (ServerState) _value.getState();
        writeBuffer.pushContext("state");
        // enum field with type ServerState
        writeBuffer.writeUnsignedLong("ServerState", 32, ((Number) (state.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(state.name()));
        writeBuffer.popContext("state");

        // Simple Field (buildInfo)
        ExtensionObjectDefinition buildInfo = (ExtensionObjectDefinition) _value.getBuildInfo();
        writeBuffer.pushContext("buildInfo");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, buildInfo);
        writeBuffer.popContext("buildInfo");

        // Simple Field (secondsTillShutdown)
        long secondsTillShutdown = (long) _value.getSecondsTillShutdown();
        writeBuffer.writeUnsignedLong("secondsTillShutdown", 32, ((Number) (secondsTillShutdown)).longValue());

        // Simple Field (shutdownReason)
        LocalizedText shutdownReason = (LocalizedText) _value.getShutdownReason();
        writeBuffer.pushContext("shutdownReason");
        LocalizedTextIO.staticSerialize(writeBuffer, shutdownReason);
        writeBuffer.popContext("shutdownReason");
        writeBuffer.popContext("ServerStatusDataType");
    }

    public static class ServerStatusDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long startTime;
        private final long currentTime;
        private final ServerState state;
        private final ExtensionObjectDefinition buildInfo;
        private final long secondsTillShutdown;
        private final LocalizedText shutdownReason;

        public ServerStatusDataTypeBuilder(long startTime, long currentTime, ServerState state, ExtensionObjectDefinition buildInfo, long secondsTillShutdown, LocalizedText shutdownReason) {
            this.startTime = startTime;
            this.currentTime = currentTime;
            this.state = state;
            this.buildInfo = buildInfo;
            this.secondsTillShutdown = secondsTillShutdown;
            this.shutdownReason = shutdownReason;
        }

        public ServerStatusDataType build() {
            return new ServerStatusDataType(startTime, currentTime, state, buildInfo, secondsTillShutdown, shutdownReason);
        }
    }

}
