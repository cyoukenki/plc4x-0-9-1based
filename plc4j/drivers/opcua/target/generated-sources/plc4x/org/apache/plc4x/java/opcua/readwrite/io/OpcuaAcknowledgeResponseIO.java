/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class OpcuaAcknowledgeResponseIO implements MessageIO<OpcuaAcknowledgeResponse, OpcuaAcknowledgeResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpcuaAcknowledgeResponseIO.class);

    @Override
    public OpcuaAcknowledgeResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (OpcuaAcknowledgeResponse) new MessagePDUIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, OpcuaAcknowledgeResponse value, Object... args) throws ParseException {
        new MessagePDUIO().serialize(writeBuffer, value, args);
    }

    public static OpcuaAcknowledgeResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("OpcuaAcknowledgeResponse");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (chunk)
String chunk = readBuffer.readString("chunk", 8, "UTF-8") ;
        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = readBuffer.readInt("messageSize", 32);


        // Simple Field (version)
int version = readBuffer.readInt("version", 32) ;

        // Simple Field (receiveBufferSize)
int receiveBufferSize = readBuffer.readInt("receiveBufferSize", 32) ;

        // Simple Field (sendBufferSize)
int sendBufferSize = readBuffer.readInt("sendBufferSize", 32) ;

        // Simple Field (maxMessageSize)
int maxMessageSize = readBuffer.readInt("maxMessageSize", 32) ;

        // Simple Field (maxChunkCount)
int maxChunkCount = readBuffer.readInt("maxChunkCount", 32) ;
        readBuffer.closeContext("OpcuaAcknowledgeResponse");
        // Create the instance
        return new OpcuaAcknowledgeResponseBuilder(chunk, version, receiveBufferSize, sendBufferSize, maxMessageSize, maxChunkCount);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, OpcuaAcknowledgeResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("OpcuaAcknowledgeResponse");

        // Simple Field (chunk)
        String chunk = (String) _value.getChunk();
        writeBuffer.writeString("chunk", 8, "UTF-8", (String) (chunk));

        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = (int) (_value.getLengthInBytes());
        writeBuffer.writeInt("messageSize", 32, ((Number) (messageSize)).intValue());

        // Simple Field (version)
        int version = (int) _value.getVersion();
        writeBuffer.writeInt("version", 32, ((Number) (version)).intValue());

        // Simple Field (receiveBufferSize)
        int receiveBufferSize = (int) _value.getReceiveBufferSize();
        writeBuffer.writeInt("receiveBufferSize", 32, ((Number) (receiveBufferSize)).intValue());

        // Simple Field (sendBufferSize)
        int sendBufferSize = (int) _value.getSendBufferSize();
        writeBuffer.writeInt("sendBufferSize", 32, ((Number) (sendBufferSize)).intValue());

        // Simple Field (maxMessageSize)
        int maxMessageSize = (int) _value.getMaxMessageSize();
        writeBuffer.writeInt("maxMessageSize", 32, ((Number) (maxMessageSize)).intValue());

        // Simple Field (maxChunkCount)
        int maxChunkCount = (int) _value.getMaxChunkCount();
        writeBuffer.writeInt("maxChunkCount", 32, ((Number) (maxChunkCount)).intValue());
        writeBuffer.popContext("OpcuaAcknowledgeResponse");
    }

    public static class OpcuaAcknowledgeResponseBuilder implements MessagePDUIO.MessagePDUBuilder {
        private final String chunk;
        private final int version;
        private final int receiveBufferSize;
        private final int sendBufferSize;
        private final int maxMessageSize;
        private final int maxChunkCount;

        public OpcuaAcknowledgeResponseBuilder(String chunk, int version, int receiveBufferSize, int sendBufferSize, int maxMessageSize, int maxChunkCount) {
            this.chunk = chunk;
            this.version = version;
            this.receiveBufferSize = receiveBufferSize;
            this.sendBufferSize = sendBufferSize;
            this.maxMessageSize = maxMessageSize;
            this.maxChunkCount = maxChunkCount;
        }

        public OpcuaAcknowledgeResponse build() {
            return new OpcuaAcknowledgeResponse(chunk, version, receiveBufferSize, sendBufferSize, maxMessageSize, maxChunkCount);
        }
    }

}
