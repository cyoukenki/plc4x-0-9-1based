/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CallMethodResultIO implements MessageIO<CallMethodResult, CallMethodResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CallMethodResultIO.class);

    @Override
    public CallMethodResult parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CallMethodResult) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CallMethodResult value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static CallMethodResultBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CallMethodResult");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("statusCode");

        // Simple Field (statusCode)
StatusCode statusCode = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("statusCode");


        // Simple Field (noOfInputArgumentResults)
int noOfInputArgumentResults = readBuffer.readInt("noOfInputArgumentResults", 32) ;        // Array field (inputArgumentResults)
        readBuffer.pullContext("inputArgumentResults", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfInputArgumentResults > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfInputArgumentResults) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] inputArgumentResults;
        {
            int itemCount = Math.max(0, (int) noOfInputArgumentResults);
            inputArgumentResults = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
inputArgumentResults[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("inputArgumentResults", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfInputArgumentDiagnosticInfos)
int noOfInputArgumentDiagnosticInfos = readBuffer.readInt("noOfInputArgumentDiagnosticInfos", 32) ;        // Array field (inputArgumentDiagnosticInfos)
        readBuffer.pullContext("inputArgumentDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfInputArgumentDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfInputArgumentDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] inputArgumentDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfInputArgumentDiagnosticInfos);
            inputArgumentDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
inputArgumentDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("inputArgumentDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfOutputArguments)
int noOfOutputArguments = readBuffer.readInt("noOfOutputArguments", 32) ;        // Array field (outputArguments)
        readBuffer.pullContext("outputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfOutputArguments > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfOutputArguments) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        Variant[] outputArguments;
        {
            int itemCount = Math.max(0, (int) noOfOutputArguments);
            outputArguments = new Variant[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
outputArguments[curItem] = VariantIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("outputArguments", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("CallMethodResult");
        // Create the instance
        return new CallMethodResultBuilder(statusCode, noOfInputArgumentResults, inputArgumentResults, noOfInputArgumentDiagnosticInfos, inputArgumentDiagnosticInfos, noOfOutputArguments, outputArguments);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CallMethodResult _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CallMethodResult");

        // Simple Field (statusCode)
        StatusCode statusCode = (StatusCode) _value.getStatusCode();
        writeBuffer.pushContext("statusCode");
        StatusCodeIO.staticSerialize(writeBuffer, statusCode);
        writeBuffer.popContext("statusCode");

        // Simple Field (noOfInputArgumentResults)
        int noOfInputArgumentResults = (int) _value.getNoOfInputArgumentResults();
        writeBuffer.writeInt("noOfInputArgumentResults", 32, ((Number) (noOfInputArgumentResults)).intValue());

        // Array Field (inputArgumentResults)
        if(_value.getInputArgumentResults() != null) {
            writeBuffer.pushContext("inputArgumentResults", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getInputArgumentResults().length;
            int curItem = 0;
            for(StatusCode element : _value.getInputArgumentResults()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("inputArgumentResults", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfInputArgumentDiagnosticInfos)
        int noOfInputArgumentDiagnosticInfos = (int) _value.getNoOfInputArgumentDiagnosticInfos();
        writeBuffer.writeInt("noOfInputArgumentDiagnosticInfos", 32, ((Number) (noOfInputArgumentDiagnosticInfos)).intValue());

        // Array Field (inputArgumentDiagnosticInfos)
        if(_value.getInputArgumentDiagnosticInfos() != null) {
            writeBuffer.pushContext("inputArgumentDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getInputArgumentDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getInputArgumentDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("inputArgumentDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfOutputArguments)
        int noOfOutputArguments = (int) _value.getNoOfOutputArguments();
        writeBuffer.writeInt("noOfOutputArguments", 32, ((Number) (noOfOutputArguments)).intValue());

        // Array Field (outputArguments)
        if(_value.getOutputArguments() != null) {
            writeBuffer.pushContext("outputArguments", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getOutputArguments().length;
            int curItem = 0;
            for(Variant element : _value.getOutputArguments()) {
                boolean lastItem = curItem == (itemCount - 1);
                VariantIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("outputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("CallMethodResult");
    }

    public static class CallMethodResultBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final StatusCode statusCode;
        private final int noOfInputArgumentResults;
        private final StatusCode[] inputArgumentResults;
        private final int noOfInputArgumentDiagnosticInfos;
        private final DiagnosticInfo[] inputArgumentDiagnosticInfos;
        private final int noOfOutputArguments;
        private final Variant[] outputArguments;

        public CallMethodResultBuilder(StatusCode statusCode, int noOfInputArgumentResults, StatusCode[] inputArgumentResults, int noOfInputArgumentDiagnosticInfos, DiagnosticInfo[] inputArgumentDiagnosticInfos, int noOfOutputArguments, Variant[] outputArguments) {
            this.statusCode = statusCode;
            this.noOfInputArgumentResults = noOfInputArgumentResults;
            this.inputArgumentResults = inputArgumentResults;
            this.noOfInputArgumentDiagnosticInfos = noOfInputArgumentDiagnosticInfos;
            this.inputArgumentDiagnosticInfos = inputArgumentDiagnosticInfos;
            this.noOfOutputArguments = noOfOutputArguments;
            this.outputArguments = outputArguments;
        }

        public CallMethodResult build() {
            return new CallMethodResult(statusCode, noOfInputArgumentResults, inputArgumentResults, noOfInputArgumentDiagnosticInfos, inputArgumentDiagnosticInfos, noOfOutputArguments, outputArguments);
        }
    }

}
