/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ServerDiagnosticsSummaryDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "861";
    }

    // Properties.
    private final long serverViewCount;
    private final long currentSessionCount;
    private final long cumulatedSessionCount;
    private final long securityRejectedSessionCount;
    private final long rejectedSessionCount;
    private final long sessionTimeoutCount;
    private final long sessionAbortCount;
    private final long currentSubscriptionCount;
    private final long cumulatedSubscriptionCount;
    private final long publishingIntervalCount;
    private final long securityRejectedRequestsCount;
    private final long rejectedRequestsCount;

    public ServerDiagnosticsSummaryDataType(long serverViewCount, long currentSessionCount, long cumulatedSessionCount, long securityRejectedSessionCount, long rejectedSessionCount, long sessionTimeoutCount, long sessionAbortCount, long currentSubscriptionCount, long cumulatedSubscriptionCount, long publishingIntervalCount, long securityRejectedRequestsCount, long rejectedRequestsCount) {
        this.serverViewCount = serverViewCount;
        this.currentSessionCount = currentSessionCount;
        this.cumulatedSessionCount = cumulatedSessionCount;
        this.securityRejectedSessionCount = securityRejectedSessionCount;
        this.rejectedSessionCount = rejectedSessionCount;
        this.sessionTimeoutCount = sessionTimeoutCount;
        this.sessionAbortCount = sessionAbortCount;
        this.currentSubscriptionCount = currentSubscriptionCount;
        this.cumulatedSubscriptionCount = cumulatedSubscriptionCount;
        this.publishingIntervalCount = publishingIntervalCount;
        this.securityRejectedRequestsCount = securityRejectedRequestsCount;
        this.rejectedRequestsCount = rejectedRequestsCount;
    }

    public long getServerViewCount() {
        return serverViewCount;
    }

    public long getCurrentSessionCount() {
        return currentSessionCount;
    }

    public long getCumulatedSessionCount() {
        return cumulatedSessionCount;
    }

    public long getSecurityRejectedSessionCount() {
        return securityRejectedSessionCount;
    }

    public long getRejectedSessionCount() {
        return rejectedSessionCount;
    }

    public long getSessionTimeoutCount() {
        return sessionTimeoutCount;
    }

    public long getSessionAbortCount() {
        return sessionAbortCount;
    }

    public long getCurrentSubscriptionCount() {
        return currentSubscriptionCount;
    }

    public long getCumulatedSubscriptionCount() {
        return cumulatedSubscriptionCount;
    }

    public long getPublishingIntervalCount() {
        return publishingIntervalCount;
    }

    public long getSecurityRejectedRequestsCount() {
        return securityRejectedRequestsCount;
    }

    public long getRejectedRequestsCount() {
        return rejectedRequestsCount;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        ServerDiagnosticsSummaryDataType _value  = this;

        // Simple field (serverViewCount)
        lengthInBits += 32;

        // Simple field (currentSessionCount)
        lengthInBits += 32;

        // Simple field (cumulatedSessionCount)
        lengthInBits += 32;

        // Simple field (securityRejectedSessionCount)
        lengthInBits += 32;

        // Simple field (rejectedSessionCount)
        lengthInBits += 32;

        // Simple field (sessionTimeoutCount)
        lengthInBits += 32;

        // Simple field (sessionAbortCount)
        lengthInBits += 32;

        // Simple field (currentSubscriptionCount)
        lengthInBits += 32;

        // Simple field (cumulatedSubscriptionCount)
        lengthInBits += 32;

        // Simple field (publishingIntervalCount)
        lengthInBits += 32;

        // Simple field (securityRejectedRequestsCount)
        lengthInBits += 32;

        // Simple field (rejectedRequestsCount)
        lengthInBits += 32;

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ServerDiagnosticsSummaryDataType)) {
            return false;
        }
        ServerDiagnosticsSummaryDataType that = (ServerDiagnosticsSummaryDataType) o;
        return
            (getServerViewCount() == that.getServerViewCount()) &&
            (getCurrentSessionCount() == that.getCurrentSessionCount()) &&
            (getCumulatedSessionCount() == that.getCumulatedSessionCount()) &&
            (getSecurityRejectedSessionCount() == that.getSecurityRejectedSessionCount()) &&
            (getRejectedSessionCount() == that.getRejectedSessionCount()) &&
            (getSessionTimeoutCount() == that.getSessionTimeoutCount()) &&
            (getSessionAbortCount() == that.getSessionAbortCount()) &&
            (getCurrentSubscriptionCount() == that.getCurrentSubscriptionCount()) &&
            (getCumulatedSubscriptionCount() == that.getCumulatedSubscriptionCount()) &&
            (getPublishingIntervalCount() == that.getPublishingIntervalCount()) &&
            (getSecurityRejectedRequestsCount() == that.getSecurityRejectedRequestsCount()) &&
            (getRejectedRequestsCount() == that.getRejectedRequestsCount()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getServerViewCount(),
            getCurrentSessionCount(),
            getCumulatedSessionCount(),
            getSecurityRejectedSessionCount(),
            getRejectedSessionCount(),
            getSessionTimeoutCount(),
            getSessionAbortCount(),
            getCurrentSubscriptionCount(),
            getCumulatedSubscriptionCount(),
            getPublishingIntervalCount(),
            getSecurityRejectedRequestsCount(),
            getRejectedRequestsCount()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("serverViewCount", getServerViewCount())
            .append("currentSessionCount", getCurrentSessionCount())
            .append("cumulatedSessionCount", getCumulatedSessionCount())
            .append("securityRejectedSessionCount", getSecurityRejectedSessionCount())
            .append("rejectedSessionCount", getRejectedSessionCount())
            .append("sessionTimeoutCount", getSessionTimeoutCount())
            .append("sessionAbortCount", getSessionAbortCount())
            .append("currentSubscriptionCount", getCurrentSubscriptionCount())
            .append("cumulatedSubscriptionCount", getCumulatedSubscriptionCount())
            .append("publishingIntervalCount", getPublishingIntervalCount())
            .append("securityRejectedRequestsCount", getSecurityRejectedRequestsCount())
            .append("rejectedRequestsCount", getRejectedRequestsCount())
            .toString();
    }

}
