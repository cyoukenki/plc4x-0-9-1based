/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ProgramDiagnostic2DataTypeIO implements MessageIO<ProgramDiagnostic2DataType, ProgramDiagnostic2DataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramDiagnostic2DataTypeIO.class);

    @Override
    public ProgramDiagnostic2DataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ProgramDiagnostic2DataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ProgramDiagnostic2DataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ProgramDiagnostic2DataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ProgramDiagnostic2DataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("createSessionId");

        // Simple Field (createSessionId)
NodeId createSessionId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("createSessionId");

        readBuffer.pullContext("createClientName");

        // Simple Field (createClientName)
PascalString createClientName = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("createClientName");


        // Simple Field (invocationCreationTime)
long invocationCreationTime = readBuffer.readLong("invocationCreationTime", 64) ;

        // Simple Field (lastTransitionTime)
long lastTransitionTime = readBuffer.readLong("lastTransitionTime", 64) ;
        readBuffer.pullContext("lastMethodCall");

        // Simple Field (lastMethodCall)
PascalString lastMethodCall = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("lastMethodCall");

        readBuffer.pullContext("lastMethodSessionId");

        // Simple Field (lastMethodSessionId)
NodeId lastMethodSessionId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("lastMethodSessionId");


        // Simple Field (noOfLastMethodInputArguments)
int noOfLastMethodInputArguments = readBuffer.readInt("noOfLastMethodInputArguments", 32) ;        // Array field (lastMethodInputArguments)
        readBuffer.pullContext("lastMethodInputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfLastMethodInputArguments > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfLastMethodInputArguments) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] lastMethodInputArguments;
        {
            int itemCount = Math.max(0, (int) noOfLastMethodInputArguments);
            lastMethodInputArguments = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
lastMethodInputArguments[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(298) ) ;            }
        }
            readBuffer.closeContext("lastMethodInputArguments", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfLastMethodOutputArguments)
int noOfLastMethodOutputArguments = readBuffer.readInt("noOfLastMethodOutputArguments", 32) ;        // Array field (lastMethodOutputArguments)
        readBuffer.pullContext("lastMethodOutputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfLastMethodOutputArguments > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfLastMethodOutputArguments) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] lastMethodOutputArguments;
        {
            int itemCount = Math.max(0, (int) noOfLastMethodOutputArguments);
            lastMethodOutputArguments = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
lastMethodOutputArguments[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(298) ) ;            }
        }
            readBuffer.closeContext("lastMethodOutputArguments", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfLastMethodInputValues)
int noOfLastMethodInputValues = readBuffer.readInt("noOfLastMethodInputValues", 32) ;        // Array field (lastMethodInputValues)
        readBuffer.pullContext("lastMethodInputValues", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfLastMethodInputValues > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfLastMethodInputValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        Variant[] lastMethodInputValues;
        {
            int itemCount = Math.max(0, (int) noOfLastMethodInputValues);
            lastMethodInputValues = new Variant[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
lastMethodInputValues[curItem] = VariantIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("lastMethodInputValues", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfLastMethodOutputValues)
int noOfLastMethodOutputValues = readBuffer.readInt("noOfLastMethodOutputValues", 32) ;        // Array field (lastMethodOutputValues)
        readBuffer.pullContext("lastMethodOutputValues", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfLastMethodOutputValues > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfLastMethodOutputValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        Variant[] lastMethodOutputValues;
        {
            int itemCount = Math.max(0, (int) noOfLastMethodOutputValues);
            lastMethodOutputValues = new Variant[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
lastMethodOutputValues[curItem] = VariantIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("lastMethodOutputValues", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (lastMethodCallTime)
long lastMethodCallTime = readBuffer.readLong("lastMethodCallTime", 64) ;
        readBuffer.pullContext("lastMethodReturnStatus");

        // Simple Field (lastMethodReturnStatus)
StatusCode lastMethodReturnStatus = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("lastMethodReturnStatus");

        readBuffer.closeContext("ProgramDiagnostic2DataType");
        // Create the instance
        return new ProgramDiagnostic2DataTypeBuilder(createSessionId, createClientName, invocationCreationTime, lastTransitionTime, lastMethodCall, lastMethodSessionId, noOfLastMethodInputArguments, lastMethodInputArguments, noOfLastMethodOutputArguments, lastMethodOutputArguments, noOfLastMethodInputValues, lastMethodInputValues, noOfLastMethodOutputValues, lastMethodOutputValues, lastMethodCallTime, lastMethodReturnStatus);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ProgramDiagnostic2DataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ProgramDiagnostic2DataType");

        // Simple Field (createSessionId)
        NodeId createSessionId = (NodeId) _value.getCreateSessionId();
        writeBuffer.pushContext("createSessionId");
        NodeIdIO.staticSerialize(writeBuffer, createSessionId);
        writeBuffer.popContext("createSessionId");

        // Simple Field (createClientName)
        PascalString createClientName = (PascalString) _value.getCreateClientName();
        writeBuffer.pushContext("createClientName");
        PascalStringIO.staticSerialize(writeBuffer, createClientName);
        writeBuffer.popContext("createClientName");

        // Simple Field (invocationCreationTime)
        long invocationCreationTime = (long) _value.getInvocationCreationTime();
        writeBuffer.writeLong("invocationCreationTime", 64, ((Number) (invocationCreationTime)).longValue());

        // Simple Field (lastTransitionTime)
        long lastTransitionTime = (long) _value.getLastTransitionTime();
        writeBuffer.writeLong("lastTransitionTime", 64, ((Number) (lastTransitionTime)).longValue());

        // Simple Field (lastMethodCall)
        PascalString lastMethodCall = (PascalString) _value.getLastMethodCall();
        writeBuffer.pushContext("lastMethodCall");
        PascalStringIO.staticSerialize(writeBuffer, lastMethodCall);
        writeBuffer.popContext("lastMethodCall");

        // Simple Field (lastMethodSessionId)
        NodeId lastMethodSessionId = (NodeId) _value.getLastMethodSessionId();
        writeBuffer.pushContext("lastMethodSessionId");
        NodeIdIO.staticSerialize(writeBuffer, lastMethodSessionId);
        writeBuffer.popContext("lastMethodSessionId");

        // Simple Field (noOfLastMethodInputArguments)
        int noOfLastMethodInputArguments = (int) _value.getNoOfLastMethodInputArguments();
        writeBuffer.writeInt("noOfLastMethodInputArguments", 32, ((Number) (noOfLastMethodInputArguments)).intValue());

        // Array Field (lastMethodInputArguments)
        if(_value.getLastMethodInputArguments() != null) {
            writeBuffer.pushContext("lastMethodInputArguments", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getLastMethodInputArguments().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getLastMethodInputArguments()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("lastMethodInputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfLastMethodOutputArguments)
        int noOfLastMethodOutputArguments = (int) _value.getNoOfLastMethodOutputArguments();
        writeBuffer.writeInt("noOfLastMethodOutputArguments", 32, ((Number) (noOfLastMethodOutputArguments)).intValue());

        // Array Field (lastMethodOutputArguments)
        if(_value.getLastMethodOutputArguments() != null) {
            writeBuffer.pushContext("lastMethodOutputArguments", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getLastMethodOutputArguments().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getLastMethodOutputArguments()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("lastMethodOutputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfLastMethodInputValues)
        int noOfLastMethodInputValues = (int) _value.getNoOfLastMethodInputValues();
        writeBuffer.writeInt("noOfLastMethodInputValues", 32, ((Number) (noOfLastMethodInputValues)).intValue());

        // Array Field (lastMethodInputValues)
        if(_value.getLastMethodInputValues() != null) {
            writeBuffer.pushContext("lastMethodInputValues", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getLastMethodInputValues().length;
            int curItem = 0;
            for(Variant element : _value.getLastMethodInputValues()) {
                boolean lastItem = curItem == (itemCount - 1);
                VariantIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("lastMethodInputValues", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfLastMethodOutputValues)
        int noOfLastMethodOutputValues = (int) _value.getNoOfLastMethodOutputValues();
        writeBuffer.writeInt("noOfLastMethodOutputValues", 32, ((Number) (noOfLastMethodOutputValues)).intValue());

        // Array Field (lastMethodOutputValues)
        if(_value.getLastMethodOutputValues() != null) {
            writeBuffer.pushContext("lastMethodOutputValues", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getLastMethodOutputValues().length;
            int curItem = 0;
            for(Variant element : _value.getLastMethodOutputValues()) {
                boolean lastItem = curItem == (itemCount - 1);
                VariantIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("lastMethodOutputValues", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (lastMethodCallTime)
        long lastMethodCallTime = (long) _value.getLastMethodCallTime();
        writeBuffer.writeLong("lastMethodCallTime", 64, ((Number) (lastMethodCallTime)).longValue());

        // Simple Field (lastMethodReturnStatus)
        StatusCode lastMethodReturnStatus = (StatusCode) _value.getLastMethodReturnStatus();
        writeBuffer.pushContext("lastMethodReturnStatus");
        StatusCodeIO.staticSerialize(writeBuffer, lastMethodReturnStatus);
        writeBuffer.popContext("lastMethodReturnStatus");
        writeBuffer.popContext("ProgramDiagnostic2DataType");
    }

    public static class ProgramDiagnostic2DataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId createSessionId;
        private final PascalString createClientName;
        private final long invocationCreationTime;
        private final long lastTransitionTime;
        private final PascalString lastMethodCall;
        private final NodeId lastMethodSessionId;
        private final int noOfLastMethodInputArguments;
        private final ExtensionObjectDefinition[] lastMethodInputArguments;
        private final int noOfLastMethodOutputArguments;
        private final ExtensionObjectDefinition[] lastMethodOutputArguments;
        private final int noOfLastMethodInputValues;
        private final Variant[] lastMethodInputValues;
        private final int noOfLastMethodOutputValues;
        private final Variant[] lastMethodOutputValues;
        private final long lastMethodCallTime;
        private final StatusCode lastMethodReturnStatus;

        public ProgramDiagnostic2DataTypeBuilder(NodeId createSessionId, PascalString createClientName, long invocationCreationTime, long lastTransitionTime, PascalString lastMethodCall, NodeId lastMethodSessionId, int noOfLastMethodInputArguments, ExtensionObjectDefinition[] lastMethodInputArguments, int noOfLastMethodOutputArguments, ExtensionObjectDefinition[] lastMethodOutputArguments, int noOfLastMethodInputValues, Variant[] lastMethodInputValues, int noOfLastMethodOutputValues, Variant[] lastMethodOutputValues, long lastMethodCallTime, StatusCode lastMethodReturnStatus) {
            this.createSessionId = createSessionId;
            this.createClientName = createClientName;
            this.invocationCreationTime = invocationCreationTime;
            this.lastTransitionTime = lastTransitionTime;
            this.lastMethodCall = lastMethodCall;
            this.lastMethodSessionId = lastMethodSessionId;
            this.noOfLastMethodInputArguments = noOfLastMethodInputArguments;
            this.lastMethodInputArguments = lastMethodInputArguments;
            this.noOfLastMethodOutputArguments = noOfLastMethodOutputArguments;
            this.lastMethodOutputArguments = lastMethodOutputArguments;
            this.noOfLastMethodInputValues = noOfLastMethodInputValues;
            this.lastMethodInputValues = lastMethodInputValues;
            this.noOfLastMethodOutputValues = noOfLastMethodOutputValues;
            this.lastMethodOutputValues = lastMethodOutputValues;
            this.lastMethodCallTime = lastMethodCallTime;
            this.lastMethodReturnStatus = lastMethodReturnStatus;
        }

        public ProgramDiagnostic2DataType build() {
            return new ProgramDiagnostic2DataType(createSessionId, createClientName, invocationCreationTime, lastTransitionTime, lastMethodCall, lastMethodSessionId, noOfLastMethodInputArguments, lastMethodInputArguments, noOfLastMethodOutputArguments, lastMethodOutputArguments, noOfLastMethodInputValues, lastMethodInputValues, noOfLastMethodOutputValues, lastMethodOutputValues, lastMethodCallTime, lastMethodReturnStatus);
        }
    }

}
