/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class FieldTargetDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "14746";
    }

    // Properties.
    private final GuidValue dataSetFieldId;
    private final PascalString receiverIndexRange;
    private final NodeId targetNodeId;
    private final long attributeId;
    private final PascalString writeIndexRange;
    private final OverrideValueHandling overrideValueHandling;
    private final Variant overrideValue;

    public FieldTargetDataType(GuidValue dataSetFieldId, PascalString receiverIndexRange, NodeId targetNodeId, long attributeId, PascalString writeIndexRange, OverrideValueHandling overrideValueHandling, Variant overrideValue) {
        this.dataSetFieldId = dataSetFieldId;
        this.receiverIndexRange = receiverIndexRange;
        this.targetNodeId = targetNodeId;
        this.attributeId = attributeId;
        this.writeIndexRange = writeIndexRange;
        this.overrideValueHandling = overrideValueHandling;
        this.overrideValue = overrideValue;
    }

    public GuidValue getDataSetFieldId() {
        return dataSetFieldId;
    }

    public PascalString getReceiverIndexRange() {
        return receiverIndexRange;
    }

    public NodeId getTargetNodeId() {
        return targetNodeId;
    }

    public long getAttributeId() {
        return attributeId;
    }

    public PascalString getWriteIndexRange() {
        return writeIndexRange;
    }

    public OverrideValueHandling getOverrideValueHandling() {
        return overrideValueHandling;
    }

    public Variant getOverrideValue() {
        return overrideValue;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        FieldTargetDataType _value  = this;

        // Simple field (dataSetFieldId)
        lengthInBits += dataSetFieldId.getLengthInBits();

        // Simple field (receiverIndexRange)
        lengthInBits += receiverIndexRange.getLengthInBits();

        // Simple field (targetNodeId)
        lengthInBits += targetNodeId.getLengthInBits();

        // Simple field (attributeId)
        lengthInBits += 32;

        // Simple field (writeIndexRange)
        lengthInBits += writeIndexRange.getLengthInBits();

        // Simple field (overrideValueHandling)
        lengthInBits += 32;

        // Simple field (overrideValue)
        lengthInBits += overrideValue.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof FieldTargetDataType)) {
            return false;
        }
        FieldTargetDataType that = (FieldTargetDataType) o;
        return
            (getDataSetFieldId() == that.getDataSetFieldId()) &&
            (getReceiverIndexRange() == that.getReceiverIndexRange()) &&
            (getTargetNodeId() == that.getTargetNodeId()) &&
            (getAttributeId() == that.getAttributeId()) &&
            (getWriteIndexRange() == that.getWriteIndexRange()) &&
            (getOverrideValueHandling() == that.getOverrideValueHandling()) &&
            (getOverrideValue() == that.getOverrideValue()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getDataSetFieldId(),
            getReceiverIndexRange(),
            getTargetNodeId(),
            getAttributeId(),
            getWriteIndexRange(),
            getOverrideValueHandling(),
            getOverrideValue()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("dataSetFieldId", getDataSetFieldId())
            .append("receiverIndexRange", getReceiverIndexRange())
            .append("targetNodeId", getTargetNodeId())
            .append("attributeId", getAttributeId())
            .append("writeIndexRange", getWriteIndexRange())
            .append("overrideValueHandling", getOverrideValueHandling())
            .append("overrideValue", getOverrideValue())
            .toString();
    }

}
