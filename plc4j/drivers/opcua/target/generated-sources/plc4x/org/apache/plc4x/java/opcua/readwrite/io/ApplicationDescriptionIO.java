/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ApplicationDescriptionIO implements MessageIO<ApplicationDescription, ApplicationDescription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationDescriptionIO.class);

    @Override
    public ApplicationDescription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ApplicationDescription) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ApplicationDescription value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ApplicationDescriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ApplicationDescription");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("applicationUri");

        // Simple Field (applicationUri)
PascalString applicationUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("applicationUri");

        readBuffer.pullContext("productUri");

        // Simple Field (productUri)
PascalString productUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("productUri");

        readBuffer.pullContext("applicationName");

        // Simple Field (applicationName)
LocalizedText applicationName = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("applicationName");

        readBuffer.pullContext("applicationType");

        // Simple Field (applicationType)
        // enum based simple field with type ApplicationType
        ApplicationType applicationType = ApplicationType.enumForValue(readBuffer.readUnsignedLong("ApplicationType", 32));
        readBuffer.closeContext("applicationType");

        readBuffer.pullContext("gatewayServerUri");

        // Simple Field (gatewayServerUri)
PascalString gatewayServerUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("gatewayServerUri");

        readBuffer.pullContext("discoveryProfileUri");

        // Simple Field (discoveryProfileUri)
PascalString discoveryProfileUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("discoveryProfileUri");


        // Simple Field (noOfDiscoveryUrls)
int noOfDiscoveryUrls = readBuffer.readInt("noOfDiscoveryUrls", 32) ;        // Array field (discoveryUrls)
        readBuffer.pullContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDiscoveryUrls > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDiscoveryUrls) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] discoveryUrls;
        {
            int itemCount = Math.max(0, (int) noOfDiscoveryUrls);
            discoveryUrls = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
discoveryUrls[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ApplicationDescription");
        // Create the instance
        return new ApplicationDescriptionBuilder(applicationUri, productUri, applicationName, applicationType, gatewayServerUri, discoveryProfileUri, noOfDiscoveryUrls, discoveryUrls);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ApplicationDescription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ApplicationDescription");

        // Simple Field (applicationUri)
        PascalString applicationUri = (PascalString) _value.getApplicationUri();
        writeBuffer.pushContext("applicationUri");
        PascalStringIO.staticSerialize(writeBuffer, applicationUri);
        writeBuffer.popContext("applicationUri");

        // Simple Field (productUri)
        PascalString productUri = (PascalString) _value.getProductUri();
        writeBuffer.pushContext("productUri");
        PascalStringIO.staticSerialize(writeBuffer, productUri);
        writeBuffer.popContext("productUri");

        // Simple Field (applicationName)
        LocalizedText applicationName = (LocalizedText) _value.getApplicationName();
        writeBuffer.pushContext("applicationName");
        LocalizedTextIO.staticSerialize(writeBuffer, applicationName);
        writeBuffer.popContext("applicationName");

        // Simple Field (applicationType)
        ApplicationType applicationType = (ApplicationType) _value.getApplicationType();
        writeBuffer.pushContext("applicationType");
        // enum field with type ApplicationType
        writeBuffer.writeUnsignedLong("ApplicationType", 32, ((Number) (applicationType.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(applicationType.name()));
        writeBuffer.popContext("applicationType");

        // Simple Field (gatewayServerUri)
        PascalString gatewayServerUri = (PascalString) _value.getGatewayServerUri();
        writeBuffer.pushContext("gatewayServerUri");
        PascalStringIO.staticSerialize(writeBuffer, gatewayServerUri);
        writeBuffer.popContext("gatewayServerUri");

        // Simple Field (discoveryProfileUri)
        PascalString discoveryProfileUri = (PascalString) _value.getDiscoveryProfileUri();
        writeBuffer.pushContext("discoveryProfileUri");
        PascalStringIO.staticSerialize(writeBuffer, discoveryProfileUri);
        writeBuffer.popContext("discoveryProfileUri");

        // Simple Field (noOfDiscoveryUrls)
        int noOfDiscoveryUrls = (int) _value.getNoOfDiscoveryUrls();
        writeBuffer.writeInt("noOfDiscoveryUrls", 32, ((Number) (noOfDiscoveryUrls)).intValue());

        // Array Field (discoveryUrls)
        if(_value.getDiscoveryUrls() != null) {
            writeBuffer.pushContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDiscoveryUrls().length;
            int curItem = 0;
            for(PascalString element : _value.getDiscoveryUrls()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ApplicationDescription");
    }

    public static class ApplicationDescriptionBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString applicationUri;
        private final PascalString productUri;
        private final LocalizedText applicationName;
        private final ApplicationType applicationType;
        private final PascalString gatewayServerUri;
        private final PascalString discoveryProfileUri;
        private final int noOfDiscoveryUrls;
        private final PascalString[] discoveryUrls;

        public ApplicationDescriptionBuilder(PascalString applicationUri, PascalString productUri, LocalizedText applicationName, ApplicationType applicationType, PascalString gatewayServerUri, PascalString discoveryProfileUri, int noOfDiscoveryUrls, PascalString[] discoveryUrls) {
            this.applicationUri = applicationUri;
            this.productUri = productUri;
            this.applicationName = applicationName;
            this.applicationType = applicationType;
            this.gatewayServerUri = gatewayServerUri;
            this.discoveryProfileUri = discoveryProfileUri;
            this.noOfDiscoveryUrls = noOfDiscoveryUrls;
            this.discoveryUrls = discoveryUrls;
        }

        public ApplicationDescription build() {
            return new ApplicationDescription(applicationUri, productUri, applicationName, applicationType, gatewayServerUri, discoveryProfileUri, noOfDiscoveryUrls, discoveryUrls);
        }
    }

}
