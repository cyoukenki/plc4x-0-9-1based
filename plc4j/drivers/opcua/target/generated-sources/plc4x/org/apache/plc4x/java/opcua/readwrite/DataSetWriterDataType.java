/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DataSetWriterDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "15599";
    }

    // Properties.
    private final PascalString name;
    private final boolean enabled;
    private final int dataSetWriterId;
    private final DataSetFieldContentMask dataSetFieldContentMask;
    private final long keyFrameCount;
    private final PascalString dataSetName;
    private final int noOfDataSetWriterProperties;
    private final ExtensionObjectDefinition[] dataSetWriterProperties;
    private final ExtensionObject transportSettings;
    private final ExtensionObject messageSettings;

    public DataSetWriterDataType(PascalString name, boolean enabled, int dataSetWriterId, DataSetFieldContentMask dataSetFieldContentMask, long keyFrameCount, PascalString dataSetName, int noOfDataSetWriterProperties, ExtensionObjectDefinition[] dataSetWriterProperties, ExtensionObject transportSettings, ExtensionObject messageSettings) {
        this.name = name;
        this.enabled = enabled;
        this.dataSetWriterId = dataSetWriterId;
        this.dataSetFieldContentMask = dataSetFieldContentMask;
        this.keyFrameCount = keyFrameCount;
        this.dataSetName = dataSetName;
        this.noOfDataSetWriterProperties = noOfDataSetWriterProperties;
        this.dataSetWriterProperties = dataSetWriterProperties;
        this.transportSettings = transportSettings;
        this.messageSettings = messageSettings;
    }

    public PascalString getName() {
        return name;
    }

    public boolean getEnabled() {
        return enabled;
    }

    public int getDataSetWriterId() {
        return dataSetWriterId;
    }

    public DataSetFieldContentMask getDataSetFieldContentMask() {
        return dataSetFieldContentMask;
    }

    public long getKeyFrameCount() {
        return keyFrameCount;
    }

    public PascalString getDataSetName() {
        return dataSetName;
    }

    public int getNoOfDataSetWriterProperties() {
        return noOfDataSetWriterProperties;
    }

    public ExtensionObjectDefinition[] getDataSetWriterProperties() {
        return dataSetWriterProperties;
    }

    public ExtensionObject getTransportSettings() {
        return transportSettings;
    }

    public ExtensionObject getMessageSettings() {
        return messageSettings;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        DataSetWriterDataType _value  = this;

        // Simple field (name)
        lengthInBits += name.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 7;

        // Simple field (enabled)
        lengthInBits += 1;

        // Simple field (dataSetWriterId)
        lengthInBits += 16;

        // Simple field (dataSetFieldContentMask)
        lengthInBits += 32;

        // Simple field (keyFrameCount)
        lengthInBits += 32;

        // Simple field (dataSetName)
        lengthInBits += dataSetName.getLengthInBits();

        // Simple field (noOfDataSetWriterProperties)
        lengthInBits += 32;

        // Array field
        if(dataSetWriterProperties != null) {
            int i=0;
            for(ExtensionObjectDefinition element : dataSetWriterProperties) {
                boolean last = ++i >= dataSetWriterProperties.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (transportSettings)
        lengthInBits += transportSettings.getLengthInBits();

        // Simple field (messageSettings)
        lengthInBits += messageSettings.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DataSetWriterDataType)) {
            return false;
        }
        DataSetWriterDataType that = (DataSetWriterDataType) o;
        return
            (getName() == that.getName()) &&
            (getEnabled() == that.getEnabled()) &&
            (getDataSetWriterId() == that.getDataSetWriterId()) &&
            (getDataSetFieldContentMask() == that.getDataSetFieldContentMask()) &&
            (getKeyFrameCount() == that.getKeyFrameCount()) &&
            (getDataSetName() == that.getDataSetName()) &&
            (getNoOfDataSetWriterProperties() == that.getNoOfDataSetWriterProperties()) &&
            (getDataSetWriterProperties() == that.getDataSetWriterProperties()) &&
            (getTransportSettings() == that.getTransportSettings()) &&
            (getMessageSettings() == that.getMessageSettings()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getName(),
            getEnabled(),
            getDataSetWriterId(),
            getDataSetFieldContentMask(),
            getKeyFrameCount(),
            getDataSetName(),
            getNoOfDataSetWriterProperties(),
            getDataSetWriterProperties(),
            getTransportSettings(),
            getMessageSettings()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("name", getName())
            .append("enabled", getEnabled())
            .append("dataSetWriterId", getDataSetWriterId())
            .append("dataSetFieldContentMask", getDataSetFieldContentMask())
            .append("keyFrameCount", getKeyFrameCount())
            .append("dataSetName", getDataSetName())
            .append("noOfDataSetWriterProperties", getNoOfDataSetWriterProperties())
            .append("dataSetWriterProperties", getDataSetWriterProperties())
            .append("transportSettings", getTransportSettings())
            .append("messageSettings", getMessageSettings())
            .toString();
    }

}
