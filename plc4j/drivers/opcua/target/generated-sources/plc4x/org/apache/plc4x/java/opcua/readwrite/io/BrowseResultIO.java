/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class BrowseResultIO implements MessageIO<BrowseResult, BrowseResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrowseResultIO.class);

    @Override
    public BrowseResult parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (BrowseResult) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, BrowseResult value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static BrowseResultBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("BrowseResult");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("statusCode");

        // Simple Field (statusCode)
StatusCode statusCode = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("statusCode");

        readBuffer.pullContext("continuationPoint");

        // Simple Field (continuationPoint)
PascalByteString continuationPoint = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("continuationPoint");


        // Simple Field (noOfReferences)
int noOfReferences = readBuffer.readInt("noOfReferences", 32) ;        // Array field (references)
        readBuffer.pullContext("references", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfReferences > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfReferences) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] references;
        {
            int itemCount = Math.max(0, (int) noOfReferences);
            references = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
references[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(520) ) ;            }
        }
            readBuffer.closeContext("references", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("BrowseResult");
        // Create the instance
        return new BrowseResultBuilder(statusCode, continuationPoint, noOfReferences, references);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, BrowseResult _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("BrowseResult");

        // Simple Field (statusCode)
        StatusCode statusCode = (StatusCode) _value.getStatusCode();
        writeBuffer.pushContext("statusCode");
        StatusCodeIO.staticSerialize(writeBuffer, statusCode);
        writeBuffer.popContext("statusCode");

        // Simple Field (continuationPoint)
        PascalByteString continuationPoint = (PascalByteString) _value.getContinuationPoint();
        writeBuffer.pushContext("continuationPoint");
        PascalByteStringIO.staticSerialize(writeBuffer, continuationPoint);
        writeBuffer.popContext("continuationPoint");

        // Simple Field (noOfReferences)
        int noOfReferences = (int) _value.getNoOfReferences();
        writeBuffer.writeInt("noOfReferences", 32, ((Number) (noOfReferences)).intValue());

        // Array Field (references)
        if(_value.getReferences() != null) {
            writeBuffer.pushContext("references", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getReferences().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getReferences()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("references", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("BrowseResult");
    }

    public static class BrowseResultBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final StatusCode statusCode;
        private final PascalByteString continuationPoint;
        private final int noOfReferences;
        private final ExtensionObjectDefinition[] references;

        public BrowseResultBuilder(StatusCode statusCode, PascalByteString continuationPoint, int noOfReferences, ExtensionObjectDefinition[] references) {
            this.statusCode = statusCode;
            this.continuationPoint = continuationPoint;
            this.noOfReferences = noOfReferences;
            this.references = references;
        }

        public BrowseResult build() {
            return new BrowseResult(statusCode, continuationPoint, noOfReferences, references);
        }
    }

}
