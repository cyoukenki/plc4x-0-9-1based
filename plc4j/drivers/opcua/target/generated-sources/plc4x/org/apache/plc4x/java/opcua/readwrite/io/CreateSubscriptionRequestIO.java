/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CreateSubscriptionRequestIO implements MessageIO<CreateSubscriptionRequest, CreateSubscriptionRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreateSubscriptionRequestIO.class);

    @Override
    public CreateSubscriptionRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CreateSubscriptionRequest) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CreateSubscriptionRequest value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static CreateSubscriptionRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CreateSubscriptionRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("requestHeader");

        // Simple Field (requestHeader)
ExtensionObjectDefinition requestHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(391) ) ;        readBuffer.closeContext("requestHeader");


        // Simple Field (requestedPublishingInterval)
double requestedPublishingInterval = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "requestedPublishingInterval", true, 11, 52); })).get() ;

        // Simple Field (requestedLifetimeCount)
long requestedLifetimeCount = readBuffer.readUnsignedLong("requestedLifetimeCount", 32) ;

        // Simple Field (requestedMaxKeepAliveCount)
long requestedMaxKeepAliveCount = readBuffer.readUnsignedLong("requestedMaxKeepAliveCount", 32) ;

        // Simple Field (maxNotificationsPerPublish)
long maxNotificationsPerPublish = readBuffer.readUnsignedLong("maxNotificationsPerPublish", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (publishingEnabled)
boolean publishingEnabled = readBuffer.readBit("publishingEnabled") ;

        // Simple Field (priority)
short priority = readBuffer.readUnsignedShort("priority", 8) ;
        readBuffer.closeContext("CreateSubscriptionRequest");
        // Create the instance
        return new CreateSubscriptionRequestBuilder(requestHeader, requestedPublishingInterval, requestedLifetimeCount, requestedMaxKeepAliveCount, maxNotificationsPerPublish, publishingEnabled, priority);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CreateSubscriptionRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CreateSubscriptionRequest");

        // Simple Field (requestHeader)
        ExtensionObjectDefinition requestHeader = (ExtensionObjectDefinition) _value.getRequestHeader();
        writeBuffer.pushContext("requestHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, requestHeader);
        writeBuffer.popContext("requestHeader");

        // Simple Field (requestedPublishingInterval)
        double requestedPublishingInterval = (double) _value.getRequestedPublishingInterval();
        writeBuffer.writeDouble("requestedPublishingInterval", (requestedPublishingInterval),11,52);

        // Simple Field (requestedLifetimeCount)
        long requestedLifetimeCount = (long) _value.getRequestedLifetimeCount();
        writeBuffer.writeUnsignedLong("requestedLifetimeCount", 32, ((Number) (requestedLifetimeCount)).longValue());

        // Simple Field (requestedMaxKeepAliveCount)
        long requestedMaxKeepAliveCount = (long) _value.getRequestedMaxKeepAliveCount();
        writeBuffer.writeUnsignedLong("requestedMaxKeepAliveCount", 32, ((Number) (requestedMaxKeepAliveCount)).longValue());

        // Simple Field (maxNotificationsPerPublish)
        long maxNotificationsPerPublish = (long) _value.getMaxNotificationsPerPublish();
        writeBuffer.writeUnsignedLong("maxNotificationsPerPublish", 32, ((Number) (maxNotificationsPerPublish)).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (publishingEnabled)
        boolean publishingEnabled = (boolean) _value.getPublishingEnabled();
        writeBuffer.writeBit("publishingEnabled", (boolean) (publishingEnabled));

        // Simple Field (priority)
        short priority = (short) _value.getPriority();
        writeBuffer.writeUnsignedShort("priority", 8, ((Number) (priority)).shortValue());
        writeBuffer.popContext("CreateSubscriptionRequest");
    }

    public static class CreateSubscriptionRequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition requestHeader;
        private final double requestedPublishingInterval;
        private final long requestedLifetimeCount;
        private final long requestedMaxKeepAliveCount;
        private final long maxNotificationsPerPublish;
        private final boolean publishingEnabled;
        private final short priority;

        public CreateSubscriptionRequestBuilder(ExtensionObjectDefinition requestHeader, double requestedPublishingInterval, long requestedLifetimeCount, long requestedMaxKeepAliveCount, long maxNotificationsPerPublish, boolean publishingEnabled, short priority) {
            this.requestHeader = requestHeader;
            this.requestedPublishingInterval = requestedPublishingInterval;
            this.requestedLifetimeCount = requestedLifetimeCount;
            this.requestedMaxKeepAliveCount = requestedMaxKeepAliveCount;
            this.maxNotificationsPerPublish = maxNotificationsPerPublish;
            this.publishingEnabled = publishingEnabled;
            this.priority = priority;
        }

        public CreateSubscriptionRequest build() {
            return new CreateSubscriptionRequest(requestHeader, requestedPublishingInterval, requestedLifetimeCount, requestedMaxKeepAliveCount, maxNotificationsPerPublish, publishingEnabled, priority);
        }
    }

}
