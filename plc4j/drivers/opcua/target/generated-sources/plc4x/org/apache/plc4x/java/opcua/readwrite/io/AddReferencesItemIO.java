/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AddReferencesItemIO implements MessageIO<AddReferencesItem, AddReferencesItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddReferencesItemIO.class);

    @Override
    public AddReferencesItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AddReferencesItem) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AddReferencesItem value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static AddReferencesItemBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AddReferencesItem");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("sourceNodeId");

        // Simple Field (sourceNodeId)
NodeId sourceNodeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("sourceNodeId");

        readBuffer.pullContext("referenceTypeId");

        // Simple Field (referenceTypeId)
NodeId referenceTypeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("referenceTypeId");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (isForward)
boolean isForward = readBuffer.readBit("isForward") ;
        readBuffer.pullContext("targetServerUri");

        // Simple Field (targetServerUri)
PascalString targetServerUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("targetServerUri");

        readBuffer.pullContext("targetNodeId");

        // Simple Field (targetNodeId)
ExpandedNodeId targetNodeId = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("targetNodeId");

        readBuffer.pullContext("targetNodeClass");

        // Simple Field (targetNodeClass)
        // enum based simple field with type NodeClass
        NodeClass targetNodeClass = NodeClass.enumForValue(readBuffer.readUnsignedLong("NodeClass", 32));
        readBuffer.closeContext("targetNodeClass");

        readBuffer.closeContext("AddReferencesItem");
        // Create the instance
        return new AddReferencesItemBuilder(sourceNodeId, referenceTypeId, isForward, targetServerUri, targetNodeId, targetNodeClass);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AddReferencesItem _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AddReferencesItem");

        // Simple Field (sourceNodeId)
        NodeId sourceNodeId = (NodeId) _value.getSourceNodeId();
        writeBuffer.pushContext("sourceNodeId");
        NodeIdIO.staticSerialize(writeBuffer, sourceNodeId);
        writeBuffer.popContext("sourceNodeId");

        // Simple Field (referenceTypeId)
        NodeId referenceTypeId = (NodeId) _value.getReferenceTypeId();
        writeBuffer.pushContext("referenceTypeId");
        NodeIdIO.staticSerialize(writeBuffer, referenceTypeId);
        writeBuffer.popContext("referenceTypeId");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (isForward)
        boolean isForward = (boolean) _value.getIsForward();
        writeBuffer.writeBit("isForward", (boolean) (isForward));

        // Simple Field (targetServerUri)
        PascalString targetServerUri = (PascalString) _value.getTargetServerUri();
        writeBuffer.pushContext("targetServerUri");
        PascalStringIO.staticSerialize(writeBuffer, targetServerUri);
        writeBuffer.popContext("targetServerUri");

        // Simple Field (targetNodeId)
        ExpandedNodeId targetNodeId = (ExpandedNodeId) _value.getTargetNodeId();
        writeBuffer.pushContext("targetNodeId");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, targetNodeId);
        writeBuffer.popContext("targetNodeId");

        // Simple Field (targetNodeClass)
        NodeClass targetNodeClass = (NodeClass) _value.getTargetNodeClass();
        writeBuffer.pushContext("targetNodeClass");
        // enum field with type NodeClass
        writeBuffer.writeUnsignedLong("NodeClass", 32, ((Number) (targetNodeClass.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(targetNodeClass.name()));
        writeBuffer.popContext("targetNodeClass");
        writeBuffer.popContext("AddReferencesItem");
    }

    public static class AddReferencesItemBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId sourceNodeId;
        private final NodeId referenceTypeId;
        private final boolean isForward;
        private final PascalString targetServerUri;
        private final ExpandedNodeId targetNodeId;
        private final NodeClass targetNodeClass;

        public AddReferencesItemBuilder(NodeId sourceNodeId, NodeId referenceTypeId, boolean isForward, PascalString targetServerUri, ExpandedNodeId targetNodeId, NodeClass targetNodeClass) {
            this.sourceNodeId = sourceNodeId;
            this.referenceTypeId = referenceTypeId;
            this.isForward = isForward;
            this.targetServerUri = targetServerUri;
            this.targetNodeId = targetNodeId;
            this.targetNodeClass = targetNodeClass;
        }

        public AddReferencesItem build() {
            return new AddReferencesItem(sourceNodeId, referenceTypeId, isForward, targetServerUri, targetNodeId, targetNodeClass);
        }
    }

}
