/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataChangeNotificationIO implements MessageIO<DataChangeNotification, DataChangeNotification> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataChangeNotificationIO.class);

    @Override
    public DataChangeNotification parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DataChangeNotification) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataChangeNotification value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static DataChangeNotificationBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataChangeNotification");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (notificationLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int notificationLength = readBuffer.readInt("notificationLength", 32);


        // Simple Field (noOfMonitoredItems)
int noOfMonitoredItems = readBuffer.readInt("noOfMonitoredItems", 32) ;        // Array field (monitoredItems)
        readBuffer.pullContext("monitoredItems", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfMonitoredItems > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfMonitoredItems) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] monitoredItems;
        {
            int itemCount = Math.max(0, (int) noOfMonitoredItems);
            monitoredItems = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
monitoredItems[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(808) ) ;            }
        }
            readBuffer.closeContext("monitoredItems", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfDiagnosticInfos)
int noOfDiagnosticInfos = readBuffer.readInt("noOfDiagnosticInfos", 32) ;        // Array field (diagnosticInfos)
        readBuffer.pullContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] diagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfDiagnosticInfos);
            diagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
diagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("DataChangeNotification");
        // Create the instance
        return new DataChangeNotificationBuilder(noOfMonitoredItems, monitoredItems, noOfDiagnosticInfos, diagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataChangeNotification _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataChangeNotification");

        // Implicit Field (notificationLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int notificationLength = (int) (_value.getLengthInBytes());
        writeBuffer.writeInt("notificationLength", 32, ((Number) (notificationLength)).intValue());

        // Simple Field (noOfMonitoredItems)
        int noOfMonitoredItems = (int) _value.getNoOfMonitoredItems();
        writeBuffer.writeInt("noOfMonitoredItems", 32, ((Number) (noOfMonitoredItems)).intValue());

        // Array Field (monitoredItems)
        if(_value.getMonitoredItems() != null) {
            writeBuffer.pushContext("monitoredItems", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getMonitoredItems().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getMonitoredItems()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("monitoredItems", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfDiagnosticInfos)
        int noOfDiagnosticInfos = (int) _value.getNoOfDiagnosticInfos();
        writeBuffer.writeInt("noOfDiagnosticInfos", 32, ((Number) (noOfDiagnosticInfos)).intValue());

        // Array Field (diagnosticInfos)
        if(_value.getDiagnosticInfos() != null) {
            writeBuffer.pushContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("diagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("DataChangeNotification");
    }

    public static class DataChangeNotificationBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final int noOfMonitoredItems;
        private final ExtensionObjectDefinition[] monitoredItems;
        private final int noOfDiagnosticInfos;
        private final DiagnosticInfo[] diagnosticInfos;

        public DataChangeNotificationBuilder(int noOfMonitoredItems, ExtensionObjectDefinition[] monitoredItems, int noOfDiagnosticInfos, DiagnosticInfo[] diagnosticInfos) {
            this.noOfMonitoredItems = noOfMonitoredItems;
            this.monitoredItems = monitoredItems;
            this.noOfDiagnosticInfos = noOfDiagnosticInfos;
            this.diagnosticInfos = diagnosticInfos;
        }

        public DataChangeNotification build() {
            return new DataChangeNotification(noOfMonitoredItems, monitoredItems, noOfDiagnosticInfos, diagnosticInfos);
        }
    }

}
