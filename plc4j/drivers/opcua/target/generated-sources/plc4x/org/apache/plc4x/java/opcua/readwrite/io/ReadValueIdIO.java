/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ReadValueIdIO implements MessageIO<ReadValueId, ReadValueId> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReadValueIdIO.class);

    @Override
    public ReadValueId parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ReadValueId) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ReadValueId value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ReadValueIdBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ReadValueId");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("nodeId");

        // Simple Field (nodeId)
NodeId nodeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("nodeId");


        // Simple Field (attributeId)
long attributeId = readBuffer.readUnsignedLong("attributeId", 32) ;
        readBuffer.pullContext("indexRange");

        // Simple Field (indexRange)
PascalString indexRange = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("indexRange");

        readBuffer.pullContext("dataEncoding");

        // Simple Field (dataEncoding)
QualifiedName dataEncoding = QualifiedNameIO.staticParse(readBuffer ) ;        readBuffer.closeContext("dataEncoding");

        readBuffer.closeContext("ReadValueId");
        // Create the instance
        return new ReadValueIdBuilder(nodeId, attributeId, indexRange, dataEncoding);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ReadValueId _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ReadValueId");

        // Simple Field (nodeId)
        NodeId nodeId = (NodeId) _value.getNodeId();
        writeBuffer.pushContext("nodeId");
        NodeIdIO.staticSerialize(writeBuffer, nodeId);
        writeBuffer.popContext("nodeId");

        // Simple Field (attributeId)
        long attributeId = (long) _value.getAttributeId();
        writeBuffer.writeUnsignedLong("attributeId", 32, ((Number) (attributeId)).longValue());

        // Simple Field (indexRange)
        PascalString indexRange = (PascalString) _value.getIndexRange();
        writeBuffer.pushContext("indexRange");
        PascalStringIO.staticSerialize(writeBuffer, indexRange);
        writeBuffer.popContext("indexRange");

        // Simple Field (dataEncoding)
        QualifiedName dataEncoding = (QualifiedName) _value.getDataEncoding();
        writeBuffer.pushContext("dataEncoding");
        QualifiedNameIO.staticSerialize(writeBuffer, dataEncoding);
        writeBuffer.popContext("dataEncoding");
        writeBuffer.popContext("ReadValueId");
    }

    public static class ReadValueIdBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId nodeId;
        private final long attributeId;
        private final PascalString indexRange;
        private final QualifiedName dataEncoding;

        public ReadValueIdBuilder(NodeId nodeId, long attributeId, PascalString indexRange, QualifiedName dataEncoding) {
            this.nodeId = nodeId;
            this.attributeId = attributeId;
            this.indexRange = indexRange;
            this.dataEncoding = dataEncoding;
        }

        public ReadValueId build() {
            return new ReadValueId(nodeId, attributeId, indexRange, dataEncoding);
        }
    }

}
