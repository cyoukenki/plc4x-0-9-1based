/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ApplicationDescription extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "310";
    }

    // Properties.
    private final PascalString applicationUri;
    private final PascalString productUri;
    private final LocalizedText applicationName;
    private final ApplicationType applicationType;
    private final PascalString gatewayServerUri;
    private final PascalString discoveryProfileUri;
    private final int noOfDiscoveryUrls;
    private final PascalString[] discoveryUrls;

    public ApplicationDescription(PascalString applicationUri, PascalString productUri, LocalizedText applicationName, ApplicationType applicationType, PascalString gatewayServerUri, PascalString discoveryProfileUri, int noOfDiscoveryUrls, PascalString[] discoveryUrls) {
        this.applicationUri = applicationUri;
        this.productUri = productUri;
        this.applicationName = applicationName;
        this.applicationType = applicationType;
        this.gatewayServerUri = gatewayServerUri;
        this.discoveryProfileUri = discoveryProfileUri;
        this.noOfDiscoveryUrls = noOfDiscoveryUrls;
        this.discoveryUrls = discoveryUrls;
    }

    public PascalString getApplicationUri() {
        return applicationUri;
    }

    public PascalString getProductUri() {
        return productUri;
    }

    public LocalizedText getApplicationName() {
        return applicationName;
    }

    public ApplicationType getApplicationType() {
        return applicationType;
    }

    public PascalString getGatewayServerUri() {
        return gatewayServerUri;
    }

    public PascalString getDiscoveryProfileUri() {
        return discoveryProfileUri;
    }

    public int getNoOfDiscoveryUrls() {
        return noOfDiscoveryUrls;
    }

    public PascalString[] getDiscoveryUrls() {
        return discoveryUrls;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        ApplicationDescription _value  = this;

        // Simple field (applicationUri)
        lengthInBits += applicationUri.getLengthInBits();

        // Simple field (productUri)
        lengthInBits += productUri.getLengthInBits();

        // Simple field (applicationName)
        lengthInBits += applicationName.getLengthInBits();

        // Simple field (applicationType)
        lengthInBits += 32;

        // Simple field (gatewayServerUri)
        lengthInBits += gatewayServerUri.getLengthInBits();

        // Simple field (discoveryProfileUri)
        lengthInBits += discoveryProfileUri.getLengthInBits();

        // Simple field (noOfDiscoveryUrls)
        lengthInBits += 32;

        // Array field
        if(discoveryUrls != null) {
            int i=0;
            for(PascalString element : discoveryUrls) {
                boolean last = ++i >= discoveryUrls.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ApplicationDescription)) {
            return false;
        }
        ApplicationDescription that = (ApplicationDescription) o;
        return
            (getApplicationUri() == that.getApplicationUri()) &&
            (getProductUri() == that.getProductUri()) &&
            (getApplicationName() == that.getApplicationName()) &&
            (getApplicationType() == that.getApplicationType()) &&
            (getGatewayServerUri() == that.getGatewayServerUri()) &&
            (getDiscoveryProfileUri() == that.getDiscoveryProfileUri()) &&
            (getNoOfDiscoveryUrls() == that.getNoOfDiscoveryUrls()) &&
            (getDiscoveryUrls() == that.getDiscoveryUrls()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getApplicationUri(),
            getProductUri(),
            getApplicationName(),
            getApplicationType(),
            getGatewayServerUri(),
            getDiscoveryProfileUri(),
            getNoOfDiscoveryUrls(),
            getDiscoveryUrls()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("applicationUri", getApplicationUri())
            .append("productUri", getProductUri())
            .append("applicationName", getApplicationName())
            .append("applicationType", getApplicationType())
            .append("gatewayServerUri", getGatewayServerUri())
            .append("discoveryProfileUri", getDiscoveryProfileUri())
            .append("noOfDiscoveryUrls", getNoOfDiscoveryUrls())
            .append("discoveryUrls", getDiscoveryUrls())
            .toString();
    }

}
