/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SessionlessInvokeRequestType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "15903";
    }

    // Properties.
    private final long urisVersion;
    private final int noOfNamespaceUris;
    private final PascalString[] namespaceUris;
    private final int noOfServerUris;
    private final PascalString[] serverUris;
    private final int noOfLocaleIds;
    private final PascalString[] localeIds;
    private final long serviceId;

    public SessionlessInvokeRequestType(long urisVersion, int noOfNamespaceUris, PascalString[] namespaceUris, int noOfServerUris, PascalString[] serverUris, int noOfLocaleIds, PascalString[] localeIds, long serviceId) {
        this.urisVersion = urisVersion;
        this.noOfNamespaceUris = noOfNamespaceUris;
        this.namespaceUris = namespaceUris;
        this.noOfServerUris = noOfServerUris;
        this.serverUris = serverUris;
        this.noOfLocaleIds = noOfLocaleIds;
        this.localeIds = localeIds;
        this.serviceId = serviceId;
    }

    public long getUrisVersion() {
        return urisVersion;
    }

    public int getNoOfNamespaceUris() {
        return noOfNamespaceUris;
    }

    public PascalString[] getNamespaceUris() {
        return namespaceUris;
    }

    public int getNoOfServerUris() {
        return noOfServerUris;
    }

    public PascalString[] getServerUris() {
        return serverUris;
    }

    public int getNoOfLocaleIds() {
        return noOfLocaleIds;
    }

    public PascalString[] getLocaleIds() {
        return localeIds;
    }

    public long getServiceId() {
        return serviceId;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        SessionlessInvokeRequestType _value  = this;

        // Simple field (urisVersion)
        lengthInBits += 32;

        // Simple field (noOfNamespaceUris)
        lengthInBits += 32;

        // Array field
        if(namespaceUris != null) {
            int i=0;
            for(PascalString element : namespaceUris) {
                boolean last = ++i >= namespaceUris.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfServerUris)
        lengthInBits += 32;

        // Array field
        if(serverUris != null) {
            int i=0;
            for(PascalString element : serverUris) {
                boolean last = ++i >= serverUris.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfLocaleIds)
        lengthInBits += 32;

        // Array field
        if(localeIds != null) {
            int i=0;
            for(PascalString element : localeIds) {
                boolean last = ++i >= localeIds.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (serviceId)
        lengthInBits += 32;

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SessionlessInvokeRequestType)) {
            return false;
        }
        SessionlessInvokeRequestType that = (SessionlessInvokeRequestType) o;
        return
            (getUrisVersion() == that.getUrisVersion()) &&
            (getNoOfNamespaceUris() == that.getNoOfNamespaceUris()) &&
            (getNamespaceUris() == that.getNamespaceUris()) &&
            (getNoOfServerUris() == that.getNoOfServerUris()) &&
            (getServerUris() == that.getServerUris()) &&
            (getNoOfLocaleIds() == that.getNoOfLocaleIds()) &&
            (getLocaleIds() == that.getLocaleIds()) &&
            (getServiceId() == that.getServiceId()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getUrisVersion(),
            getNoOfNamespaceUris(),
            getNamespaceUris(),
            getNoOfServerUris(),
            getServerUris(),
            getNoOfLocaleIds(),
            getLocaleIds(),
            getServiceId()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("urisVersion", getUrisVersion())
            .append("noOfNamespaceUris", getNoOfNamespaceUris())
            .append("namespaceUris", getNamespaceUris())
            .append("noOfServerUris", getNoOfServerUris())
            .append("serverUris", getServerUris())
            .append("noOfLocaleIds", getNoOfLocaleIds())
            .append("localeIds", getLocaleIds())
            .append("serviceId", getServiceId())
            .toString();
    }

}
