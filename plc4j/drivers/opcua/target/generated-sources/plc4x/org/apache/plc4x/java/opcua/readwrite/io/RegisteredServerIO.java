/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class RegisteredServerIO implements MessageIO<RegisteredServer, RegisteredServer> {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegisteredServerIO.class);

    @Override
    public RegisteredServer parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (RegisteredServer) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, RegisteredServer value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static RegisteredServerBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("RegisteredServer");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("serverUri");

        // Simple Field (serverUri)
PascalString serverUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverUri");

        readBuffer.pullContext("productUri");

        // Simple Field (productUri)
PascalString productUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("productUri");


        // Simple Field (noOfServerNames)
int noOfServerNames = readBuffer.readInt("noOfServerNames", 32) ;        // Array field (serverNames)
        readBuffer.pullContext("serverNames", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfServerNames > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfServerNames) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        LocalizedText[] serverNames;
        {
            int itemCount = Math.max(0, (int) noOfServerNames);
            serverNames = new LocalizedText[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
serverNames[curItem] = LocalizedTextIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("serverNames", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("serverType");

        // Simple Field (serverType)
        // enum based simple field with type ApplicationType
        ApplicationType serverType = ApplicationType.enumForValue(readBuffer.readUnsignedLong("ApplicationType", 32));
        readBuffer.closeContext("serverType");

        readBuffer.pullContext("gatewayServerUri");

        // Simple Field (gatewayServerUri)
PascalString gatewayServerUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("gatewayServerUri");


        // Simple Field (noOfDiscoveryUrls)
int noOfDiscoveryUrls = readBuffer.readInt("noOfDiscoveryUrls", 32) ;        // Array field (discoveryUrls)
        readBuffer.pullContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDiscoveryUrls > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDiscoveryUrls) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] discoveryUrls;
        {
            int itemCount = Math.max(0, (int) noOfDiscoveryUrls);
            discoveryUrls = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
discoveryUrls[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("semaphoreFilePath");

        // Simple Field (semaphoreFilePath)
PascalString semaphoreFilePath = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("semaphoreFilePath");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (isOnline)
boolean isOnline = readBuffer.readBit("isOnline") ;
        readBuffer.closeContext("RegisteredServer");
        // Create the instance
        return new RegisteredServerBuilder(serverUri, productUri, noOfServerNames, serverNames, serverType, gatewayServerUri, noOfDiscoveryUrls, discoveryUrls, semaphoreFilePath, isOnline);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, RegisteredServer _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("RegisteredServer");

        // Simple Field (serverUri)
        PascalString serverUri = (PascalString) _value.getServerUri();
        writeBuffer.pushContext("serverUri");
        PascalStringIO.staticSerialize(writeBuffer, serverUri);
        writeBuffer.popContext("serverUri");

        // Simple Field (productUri)
        PascalString productUri = (PascalString) _value.getProductUri();
        writeBuffer.pushContext("productUri");
        PascalStringIO.staticSerialize(writeBuffer, productUri);
        writeBuffer.popContext("productUri");

        // Simple Field (noOfServerNames)
        int noOfServerNames = (int) _value.getNoOfServerNames();
        writeBuffer.writeInt("noOfServerNames", 32, ((Number) (noOfServerNames)).intValue());

        // Array Field (serverNames)
        if(_value.getServerNames() != null) {
            writeBuffer.pushContext("serverNames", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServerNames().length;
            int curItem = 0;
            for(LocalizedText element : _value.getServerNames()) {
                boolean lastItem = curItem == (itemCount - 1);
                LocalizedTextIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("serverNames", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (serverType)
        ApplicationType serverType = (ApplicationType) _value.getServerType();
        writeBuffer.pushContext("serverType");
        // enum field with type ApplicationType
        writeBuffer.writeUnsignedLong("ApplicationType", 32, ((Number) (serverType.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(serverType.name()));
        writeBuffer.popContext("serverType");

        // Simple Field (gatewayServerUri)
        PascalString gatewayServerUri = (PascalString) _value.getGatewayServerUri();
        writeBuffer.pushContext("gatewayServerUri");
        PascalStringIO.staticSerialize(writeBuffer, gatewayServerUri);
        writeBuffer.popContext("gatewayServerUri");

        // Simple Field (noOfDiscoveryUrls)
        int noOfDiscoveryUrls = (int) _value.getNoOfDiscoveryUrls();
        writeBuffer.writeInt("noOfDiscoveryUrls", 32, ((Number) (noOfDiscoveryUrls)).intValue());

        // Array Field (discoveryUrls)
        if(_value.getDiscoveryUrls() != null) {
            writeBuffer.pushContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDiscoveryUrls().length;
            int curItem = 0;
            for(PascalString element : _value.getDiscoveryUrls()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("discoveryUrls", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (semaphoreFilePath)
        PascalString semaphoreFilePath = (PascalString) _value.getSemaphoreFilePath();
        writeBuffer.pushContext("semaphoreFilePath");
        PascalStringIO.staticSerialize(writeBuffer, semaphoreFilePath);
        writeBuffer.popContext("semaphoreFilePath");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (isOnline)
        boolean isOnline = (boolean) _value.getIsOnline();
        writeBuffer.writeBit("isOnline", (boolean) (isOnline));
        writeBuffer.popContext("RegisteredServer");
    }

    public static class RegisteredServerBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString serverUri;
        private final PascalString productUri;
        private final int noOfServerNames;
        private final LocalizedText[] serverNames;
        private final ApplicationType serverType;
        private final PascalString gatewayServerUri;
        private final int noOfDiscoveryUrls;
        private final PascalString[] discoveryUrls;
        private final PascalString semaphoreFilePath;
        private final boolean isOnline;

        public RegisteredServerBuilder(PascalString serverUri, PascalString productUri, int noOfServerNames, LocalizedText[] serverNames, ApplicationType serverType, PascalString gatewayServerUri, int noOfDiscoveryUrls, PascalString[] discoveryUrls, PascalString semaphoreFilePath, boolean isOnline) {
            this.serverUri = serverUri;
            this.productUri = productUri;
            this.noOfServerNames = noOfServerNames;
            this.serverNames = serverNames;
            this.serverType = serverType;
            this.gatewayServerUri = gatewayServerUri;
            this.noOfDiscoveryUrls = noOfDiscoveryUrls;
            this.discoveryUrls = discoveryUrls;
            this.semaphoreFilePath = semaphoreFilePath;
            this.isOnline = isOnline;
        }

        public RegisteredServer build() {
            return new RegisteredServer(serverUri, productUri, noOfServerNames, serverNames, serverType, gatewayServerUri, noOfDiscoveryUrls, discoveryUrls, semaphoreFilePath, isOnline);
        }
    }

}
