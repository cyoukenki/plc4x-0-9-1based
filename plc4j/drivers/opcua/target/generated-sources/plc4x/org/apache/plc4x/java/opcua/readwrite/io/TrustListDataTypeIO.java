/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class TrustListDataTypeIO implements MessageIO<TrustListDataType, TrustListDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(TrustListDataTypeIO.class);

    @Override
    public TrustListDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (TrustListDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, TrustListDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static TrustListDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("TrustListDataType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (specifiedLists)
long specifiedLists = readBuffer.readUnsignedLong("specifiedLists", 32) ;

        // Simple Field (noOfTrustedCertificates)
int noOfTrustedCertificates = readBuffer.readInt("noOfTrustedCertificates", 32) ;        // Array field (trustedCertificates)
        readBuffer.pullContext("trustedCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfTrustedCertificates > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfTrustedCertificates) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalByteString[] trustedCertificates;
        {
            int itemCount = Math.max(0, (int) noOfTrustedCertificates);
            trustedCertificates = new PascalByteString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
trustedCertificates[curItem] = PascalByteStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("trustedCertificates", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfTrustedCrls)
int noOfTrustedCrls = readBuffer.readInt("noOfTrustedCrls", 32) ;        // Array field (trustedCrls)
        readBuffer.pullContext("trustedCrls", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfTrustedCrls > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfTrustedCrls) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalByteString[] trustedCrls;
        {
            int itemCount = Math.max(0, (int) noOfTrustedCrls);
            trustedCrls = new PascalByteString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
trustedCrls[curItem] = PascalByteStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("trustedCrls", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfIssuerCertificates)
int noOfIssuerCertificates = readBuffer.readInt("noOfIssuerCertificates", 32) ;        // Array field (issuerCertificates)
        readBuffer.pullContext("issuerCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfIssuerCertificates > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfIssuerCertificates) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalByteString[] issuerCertificates;
        {
            int itemCount = Math.max(0, (int) noOfIssuerCertificates);
            issuerCertificates = new PascalByteString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
issuerCertificates[curItem] = PascalByteStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("issuerCertificates", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfIssuerCrls)
int noOfIssuerCrls = readBuffer.readInt("noOfIssuerCrls", 32) ;        // Array field (issuerCrls)
        readBuffer.pullContext("issuerCrls", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfIssuerCrls > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfIssuerCrls) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalByteString[] issuerCrls;
        {
            int itemCount = Math.max(0, (int) noOfIssuerCrls);
            issuerCrls = new PascalByteString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
issuerCrls[curItem] = PascalByteStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("issuerCrls", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("TrustListDataType");
        // Create the instance
        return new TrustListDataTypeBuilder(specifiedLists, noOfTrustedCertificates, trustedCertificates, noOfTrustedCrls, trustedCrls, noOfIssuerCertificates, issuerCertificates, noOfIssuerCrls, issuerCrls);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, TrustListDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("TrustListDataType");

        // Simple Field (specifiedLists)
        long specifiedLists = (long) _value.getSpecifiedLists();
        writeBuffer.writeUnsignedLong("specifiedLists", 32, ((Number) (specifiedLists)).longValue());

        // Simple Field (noOfTrustedCertificates)
        int noOfTrustedCertificates = (int) _value.getNoOfTrustedCertificates();
        writeBuffer.writeInt("noOfTrustedCertificates", 32, ((Number) (noOfTrustedCertificates)).intValue());

        // Array Field (trustedCertificates)
        if(_value.getTrustedCertificates() != null) {
            writeBuffer.pushContext("trustedCertificates", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getTrustedCertificates().length;
            int curItem = 0;
            for(PascalByteString element : _value.getTrustedCertificates()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalByteStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("trustedCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfTrustedCrls)
        int noOfTrustedCrls = (int) _value.getNoOfTrustedCrls();
        writeBuffer.writeInt("noOfTrustedCrls", 32, ((Number) (noOfTrustedCrls)).intValue());

        // Array Field (trustedCrls)
        if(_value.getTrustedCrls() != null) {
            writeBuffer.pushContext("trustedCrls", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getTrustedCrls().length;
            int curItem = 0;
            for(PascalByteString element : _value.getTrustedCrls()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalByteStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("trustedCrls", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfIssuerCertificates)
        int noOfIssuerCertificates = (int) _value.getNoOfIssuerCertificates();
        writeBuffer.writeInt("noOfIssuerCertificates", 32, ((Number) (noOfIssuerCertificates)).intValue());

        // Array Field (issuerCertificates)
        if(_value.getIssuerCertificates() != null) {
            writeBuffer.pushContext("issuerCertificates", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getIssuerCertificates().length;
            int curItem = 0;
            for(PascalByteString element : _value.getIssuerCertificates()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalByteStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("issuerCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfIssuerCrls)
        int noOfIssuerCrls = (int) _value.getNoOfIssuerCrls();
        writeBuffer.writeInt("noOfIssuerCrls", 32, ((Number) (noOfIssuerCrls)).intValue());

        // Array Field (issuerCrls)
        if(_value.getIssuerCrls() != null) {
            writeBuffer.pushContext("issuerCrls", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getIssuerCrls().length;
            int curItem = 0;
            for(PascalByteString element : _value.getIssuerCrls()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalByteStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("issuerCrls", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("TrustListDataType");
    }

    public static class TrustListDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long specifiedLists;
        private final int noOfTrustedCertificates;
        private final PascalByteString[] trustedCertificates;
        private final int noOfTrustedCrls;
        private final PascalByteString[] trustedCrls;
        private final int noOfIssuerCertificates;
        private final PascalByteString[] issuerCertificates;
        private final int noOfIssuerCrls;
        private final PascalByteString[] issuerCrls;

        public TrustListDataTypeBuilder(long specifiedLists, int noOfTrustedCertificates, PascalByteString[] trustedCertificates, int noOfTrustedCrls, PascalByteString[] trustedCrls, int noOfIssuerCertificates, PascalByteString[] issuerCertificates, int noOfIssuerCrls, PascalByteString[] issuerCrls) {
            this.specifiedLists = specifiedLists;
            this.noOfTrustedCertificates = noOfTrustedCertificates;
            this.trustedCertificates = trustedCertificates;
            this.noOfTrustedCrls = noOfTrustedCrls;
            this.trustedCrls = trustedCrls;
            this.noOfIssuerCertificates = noOfIssuerCertificates;
            this.issuerCertificates = issuerCertificates;
            this.noOfIssuerCrls = noOfIssuerCrls;
            this.issuerCrls = issuerCrls;
        }

        public TrustListDataType build() {
            return new TrustListDataType(specifiedLists, noOfTrustedCertificates, trustedCertificates, noOfTrustedCrls, trustedCrls, noOfIssuerCertificates, issuerCertificates, noOfIssuerCrls, issuerCrls);
        }
    }

}
