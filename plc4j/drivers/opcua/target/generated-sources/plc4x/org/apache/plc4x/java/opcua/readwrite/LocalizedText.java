/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class LocalizedText implements Message {


    // Properties.
    private final boolean textSpecified;
    private final boolean localeSpecified;
    private final PascalString locale;
    private final PascalString text;

    public LocalizedText(boolean textSpecified, boolean localeSpecified, PascalString locale, PascalString text) {
        this.textSpecified = textSpecified;
        this.localeSpecified = localeSpecified;
        this.locale = locale;
        this.text = text;
    }

    public boolean getTextSpecified() {
        return textSpecified;
    }

    public boolean getLocaleSpecified() {
        return localeSpecified;
    }

    public PascalString getLocale() {
        return locale;
    }

    public PascalString getText() {
        return text;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        LocalizedText _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 6;

        // Simple field (textSpecified)
        lengthInBits += 1;

        // Simple field (localeSpecified)
        lengthInBits += 1;

        // Optional Field (locale)
        if(locale != null) {
            lengthInBits += locale.getLengthInBits();
        }

        // Optional Field (text)
        if(text != null) {
            lengthInBits += text.getLengthInBits();
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<LocalizedText, LocalizedText> getMessageIO() {
        return new LocalizedTextIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LocalizedText)) {
            return false;
        }
        LocalizedText that = (LocalizedText) o;
        return
            (getTextSpecified() == that.getTextSpecified()) &&
            (getLocaleSpecified() == that.getLocaleSpecified()) &&
            (getLocale() == that.getLocale()) &&
            (getText() == that.getText()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTextSpecified(),
            getLocaleSpecified(),
            getLocale(),
            getText()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("textSpecified", getTextSpecified())
            .append("localeSpecified", getLocaleSpecified())
            .append("locale", getLocale())
            .append("text", getText())
            .toString();
    }

}
