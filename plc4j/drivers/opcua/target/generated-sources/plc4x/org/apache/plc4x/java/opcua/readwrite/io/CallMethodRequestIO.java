/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CallMethodRequestIO implements MessageIO<CallMethodRequest, CallMethodRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CallMethodRequestIO.class);

    @Override
    public CallMethodRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CallMethodRequest) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CallMethodRequest value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static CallMethodRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CallMethodRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("objectId");

        // Simple Field (objectId)
NodeId objectId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("objectId");

        readBuffer.pullContext("methodId");

        // Simple Field (methodId)
NodeId methodId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("methodId");


        // Simple Field (noOfInputArguments)
int noOfInputArguments = readBuffer.readInt("noOfInputArguments", 32) ;        // Array field (inputArguments)
        readBuffer.pullContext("inputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfInputArguments > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfInputArguments) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        Variant[] inputArguments;
        {
            int itemCount = Math.max(0, (int) noOfInputArguments);
            inputArguments = new Variant[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
inputArguments[curItem] = VariantIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("inputArguments", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("CallMethodRequest");
        // Create the instance
        return new CallMethodRequestBuilder(objectId, methodId, noOfInputArguments, inputArguments);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CallMethodRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CallMethodRequest");

        // Simple Field (objectId)
        NodeId objectId = (NodeId) _value.getObjectId();
        writeBuffer.pushContext("objectId");
        NodeIdIO.staticSerialize(writeBuffer, objectId);
        writeBuffer.popContext("objectId");

        // Simple Field (methodId)
        NodeId methodId = (NodeId) _value.getMethodId();
        writeBuffer.pushContext("methodId");
        NodeIdIO.staticSerialize(writeBuffer, methodId);
        writeBuffer.popContext("methodId");

        // Simple Field (noOfInputArguments)
        int noOfInputArguments = (int) _value.getNoOfInputArguments();
        writeBuffer.writeInt("noOfInputArguments", 32, ((Number) (noOfInputArguments)).intValue());

        // Array Field (inputArguments)
        if(_value.getInputArguments() != null) {
            writeBuffer.pushContext("inputArguments", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getInputArguments().length;
            int curItem = 0;
            for(Variant element : _value.getInputArguments()) {
                boolean lastItem = curItem == (itemCount - 1);
                VariantIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("inputArguments", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("CallMethodRequest");
    }

    public static class CallMethodRequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId objectId;
        private final NodeId methodId;
        private final int noOfInputArguments;
        private final Variant[] inputArguments;

        public CallMethodRequestBuilder(NodeId objectId, NodeId methodId, int noOfInputArguments, Variant[] inputArguments) {
            this.objectId = objectId;
            this.methodId = methodId;
            this.noOfInputArguments = noOfInputArguments;
            this.inputArguments = inputArguments;
        }

        public CallMethodRequest build() {
            return new CallMethodRequest(objectId, methodId, noOfInputArguments, inputArguments);
        }
    }

}
