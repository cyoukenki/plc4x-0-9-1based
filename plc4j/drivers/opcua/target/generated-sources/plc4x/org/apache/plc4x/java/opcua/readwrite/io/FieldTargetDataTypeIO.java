/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class FieldTargetDataTypeIO implements MessageIO<FieldTargetDataType, FieldTargetDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(FieldTargetDataTypeIO.class);

    @Override
    public FieldTargetDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (FieldTargetDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, FieldTargetDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static FieldTargetDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("FieldTargetDataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("dataSetFieldId");

        // Simple Field (dataSetFieldId)
GuidValue dataSetFieldId = GuidValueIO.staticParse(readBuffer ) ;        readBuffer.closeContext("dataSetFieldId");

        readBuffer.pullContext("receiverIndexRange");

        // Simple Field (receiverIndexRange)
PascalString receiverIndexRange = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("receiverIndexRange");

        readBuffer.pullContext("targetNodeId");

        // Simple Field (targetNodeId)
NodeId targetNodeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("targetNodeId");


        // Simple Field (attributeId)
long attributeId = readBuffer.readUnsignedLong("attributeId", 32) ;
        readBuffer.pullContext("writeIndexRange");

        // Simple Field (writeIndexRange)
PascalString writeIndexRange = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("writeIndexRange");

        readBuffer.pullContext("overrideValueHandling");

        // Simple Field (overrideValueHandling)
        // enum based simple field with type OverrideValueHandling
        OverrideValueHandling overrideValueHandling = OverrideValueHandling.enumForValue(readBuffer.readUnsignedLong("OverrideValueHandling", 32));
        readBuffer.closeContext("overrideValueHandling");

        readBuffer.pullContext("overrideValue");

        // Simple Field (overrideValue)
Variant overrideValue = VariantIO.staticParse(readBuffer ) ;        readBuffer.closeContext("overrideValue");

        readBuffer.closeContext("FieldTargetDataType");
        // Create the instance
        return new FieldTargetDataTypeBuilder(dataSetFieldId, receiverIndexRange, targetNodeId, attributeId, writeIndexRange, overrideValueHandling, overrideValue);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, FieldTargetDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("FieldTargetDataType");

        // Simple Field (dataSetFieldId)
        GuidValue dataSetFieldId = (GuidValue) _value.getDataSetFieldId();
        writeBuffer.pushContext("dataSetFieldId");
        GuidValueIO.staticSerialize(writeBuffer, dataSetFieldId);
        writeBuffer.popContext("dataSetFieldId");

        // Simple Field (receiverIndexRange)
        PascalString receiverIndexRange = (PascalString) _value.getReceiverIndexRange();
        writeBuffer.pushContext("receiverIndexRange");
        PascalStringIO.staticSerialize(writeBuffer, receiverIndexRange);
        writeBuffer.popContext("receiverIndexRange");

        // Simple Field (targetNodeId)
        NodeId targetNodeId = (NodeId) _value.getTargetNodeId();
        writeBuffer.pushContext("targetNodeId");
        NodeIdIO.staticSerialize(writeBuffer, targetNodeId);
        writeBuffer.popContext("targetNodeId");

        // Simple Field (attributeId)
        long attributeId = (long) _value.getAttributeId();
        writeBuffer.writeUnsignedLong("attributeId", 32, ((Number) (attributeId)).longValue());

        // Simple Field (writeIndexRange)
        PascalString writeIndexRange = (PascalString) _value.getWriteIndexRange();
        writeBuffer.pushContext("writeIndexRange");
        PascalStringIO.staticSerialize(writeBuffer, writeIndexRange);
        writeBuffer.popContext("writeIndexRange");

        // Simple Field (overrideValueHandling)
        OverrideValueHandling overrideValueHandling = (OverrideValueHandling) _value.getOverrideValueHandling();
        writeBuffer.pushContext("overrideValueHandling");
        // enum field with type OverrideValueHandling
        writeBuffer.writeUnsignedLong("OverrideValueHandling", 32, ((Number) (overrideValueHandling.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(overrideValueHandling.name()));
        writeBuffer.popContext("overrideValueHandling");

        // Simple Field (overrideValue)
        Variant overrideValue = (Variant) _value.getOverrideValue();
        writeBuffer.pushContext("overrideValue");
        VariantIO.staticSerialize(writeBuffer, overrideValue);
        writeBuffer.popContext("overrideValue");
        writeBuffer.popContext("FieldTargetDataType");
    }

    public static class FieldTargetDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final GuidValue dataSetFieldId;
        private final PascalString receiverIndexRange;
        private final NodeId targetNodeId;
        private final long attributeId;
        private final PascalString writeIndexRange;
        private final OverrideValueHandling overrideValueHandling;
        private final Variant overrideValue;

        public FieldTargetDataTypeBuilder(GuidValue dataSetFieldId, PascalString receiverIndexRange, NodeId targetNodeId, long attributeId, PascalString writeIndexRange, OverrideValueHandling overrideValueHandling, Variant overrideValue) {
            this.dataSetFieldId = dataSetFieldId;
            this.receiverIndexRange = receiverIndexRange;
            this.targetNodeId = targetNodeId;
            this.attributeId = attributeId;
            this.writeIndexRange = writeIndexRange;
            this.overrideValueHandling = overrideValueHandling;
            this.overrideValue = overrideValue;
        }

        public FieldTargetDataType build() {
            return new FieldTargetDataType(dataSetFieldId, receiverIndexRange, targetNodeId, attributeId, writeIndexRange, overrideValueHandling, overrideValue);
        }
    }

}
