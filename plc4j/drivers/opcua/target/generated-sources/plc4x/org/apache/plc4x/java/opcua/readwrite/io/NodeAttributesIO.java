/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class NodeAttributesIO implements MessageIO<NodeAttributes, NodeAttributes> {

    private static final Logger LOGGER = LoggerFactory.getLogger(NodeAttributesIO.class);

    @Override
    public NodeAttributes parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (NodeAttributes) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, NodeAttributes value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static NodeAttributesBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("NodeAttributes");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (specifiedAttributes)
long specifiedAttributes = readBuffer.readUnsignedLong("specifiedAttributes", 32) ;
        readBuffer.pullContext("displayName");

        // Simple Field (displayName)
LocalizedText displayName = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("displayName");

        readBuffer.pullContext("description");

        // Simple Field (description)
LocalizedText description = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("description");


        // Simple Field (writeMask)
long writeMask = readBuffer.readUnsignedLong("writeMask", 32) ;

        // Simple Field (userWriteMask)
long userWriteMask = readBuffer.readUnsignedLong("userWriteMask", 32) ;
        readBuffer.closeContext("NodeAttributes");
        // Create the instance
        return new NodeAttributesBuilder(specifiedAttributes, displayName, description, writeMask, userWriteMask);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, NodeAttributes _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("NodeAttributes");

        // Simple Field (specifiedAttributes)
        long specifiedAttributes = (long) _value.getSpecifiedAttributes();
        writeBuffer.writeUnsignedLong("specifiedAttributes", 32, ((Number) (specifiedAttributes)).longValue());

        // Simple Field (displayName)
        LocalizedText displayName = (LocalizedText) _value.getDisplayName();
        writeBuffer.pushContext("displayName");
        LocalizedTextIO.staticSerialize(writeBuffer, displayName);
        writeBuffer.popContext("displayName");

        // Simple Field (description)
        LocalizedText description = (LocalizedText) _value.getDescription();
        writeBuffer.pushContext("description");
        LocalizedTextIO.staticSerialize(writeBuffer, description);
        writeBuffer.popContext("description");

        // Simple Field (writeMask)
        long writeMask = (long) _value.getWriteMask();
        writeBuffer.writeUnsignedLong("writeMask", 32, ((Number) (writeMask)).longValue());

        // Simple Field (userWriteMask)
        long userWriteMask = (long) _value.getUserWriteMask();
        writeBuffer.writeUnsignedLong("userWriteMask", 32, ((Number) (userWriteMask)).longValue());
        writeBuffer.popContext("NodeAttributes");
    }

    public static class NodeAttributesBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long specifiedAttributes;
        private final LocalizedText displayName;
        private final LocalizedText description;
        private final long writeMask;
        private final long userWriteMask;

        public NodeAttributesBuilder(long specifiedAttributes, LocalizedText displayName, LocalizedText description, long writeMask, long userWriteMask) {
            this.specifiedAttributes = specifiedAttributes;
            this.displayName = displayName;
            this.description = description;
            this.writeMask = writeMask;
            this.userWriteMask = userWriteMask;
        }

        public NodeAttributes build() {
            return new NodeAttributes(specifiedAttributes, displayName, description, writeMask, userWriteMask);
        }
    }

}
