/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class NodeTypeDescriptionIO implements MessageIO<NodeTypeDescription, NodeTypeDescription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(NodeTypeDescriptionIO.class);

    @Override
    public NodeTypeDescription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (NodeTypeDescription) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, NodeTypeDescription value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static NodeTypeDescriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("NodeTypeDescription");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("typeDefinitionNode");

        // Simple Field (typeDefinitionNode)
ExpandedNodeId typeDefinitionNode = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("typeDefinitionNode");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (includeSubTypes)
boolean includeSubTypes = readBuffer.readBit("includeSubTypes") ;

        // Simple Field (noOfDataToReturn)
int noOfDataToReturn = readBuffer.readInt("noOfDataToReturn", 32) ;        // Array field (dataToReturn)
        readBuffer.pullContext("dataToReturn", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDataToReturn > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDataToReturn) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] dataToReturn;
        {
            int itemCount = Math.max(0, (int) noOfDataToReturn);
            dataToReturn = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataToReturn[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(572) ) ;            }
        }
            readBuffer.closeContext("dataToReturn", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("NodeTypeDescription");
        // Create the instance
        return new NodeTypeDescriptionBuilder(typeDefinitionNode, includeSubTypes, noOfDataToReturn, dataToReturn);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, NodeTypeDescription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("NodeTypeDescription");

        // Simple Field (typeDefinitionNode)
        ExpandedNodeId typeDefinitionNode = (ExpandedNodeId) _value.getTypeDefinitionNode();
        writeBuffer.pushContext("typeDefinitionNode");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, typeDefinitionNode);
        writeBuffer.popContext("typeDefinitionNode");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (includeSubTypes)
        boolean includeSubTypes = (boolean) _value.getIncludeSubTypes();
        writeBuffer.writeBit("includeSubTypes", (boolean) (includeSubTypes));

        // Simple Field (noOfDataToReturn)
        int noOfDataToReturn = (int) _value.getNoOfDataToReturn();
        writeBuffer.writeInt("noOfDataToReturn", 32, ((Number) (noOfDataToReturn)).intValue());

        // Array Field (dataToReturn)
        if(_value.getDataToReturn() != null) {
            writeBuffer.pushContext("dataToReturn", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataToReturn().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getDataToReturn()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataToReturn", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("NodeTypeDescription");
    }

    public static class NodeTypeDescriptionBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExpandedNodeId typeDefinitionNode;
        private final boolean includeSubTypes;
        private final int noOfDataToReturn;
        private final ExtensionObjectDefinition[] dataToReturn;

        public NodeTypeDescriptionBuilder(ExpandedNodeId typeDefinitionNode, boolean includeSubTypes, int noOfDataToReturn, ExtensionObjectDefinition[] dataToReturn) {
            this.typeDefinitionNode = typeDefinitionNode;
            this.includeSubTypes = includeSubTypes;
            this.noOfDataToReturn = noOfDataToReturn;
            this.dataToReturn = dataToReturn;
        }

        public NodeTypeDescription build() {
            return new NodeTypeDescription(typeDefinitionNode, includeSubTypes, noOfDataToReturn, dataToReturn);
        }
    }

}
