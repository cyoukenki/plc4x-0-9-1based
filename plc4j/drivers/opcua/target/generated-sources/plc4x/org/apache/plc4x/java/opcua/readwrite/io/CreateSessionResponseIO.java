/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CreateSessionResponseIO implements MessageIO<CreateSessionResponse, CreateSessionResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreateSessionResponseIO.class);

    @Override
    public CreateSessionResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CreateSessionResponse) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CreateSessionResponse value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static CreateSessionResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CreateSessionResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("responseHeader");

        // Simple Field (responseHeader)
ExtensionObjectDefinition responseHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(394) ) ;        readBuffer.closeContext("responseHeader");

        readBuffer.pullContext("sessionId");

        // Simple Field (sessionId)
NodeId sessionId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("sessionId");

        readBuffer.pullContext("authenticationToken");

        // Simple Field (authenticationToken)
NodeId authenticationToken = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("authenticationToken");


        // Simple Field (revisedSessionTimeout)
double revisedSessionTimeout = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "revisedSessionTimeout", true, 11, 52); })).get() ;
        readBuffer.pullContext("serverNonce");

        // Simple Field (serverNonce)
PascalByteString serverNonce = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverNonce");

        readBuffer.pullContext("serverCertificate");

        // Simple Field (serverCertificate)
PascalByteString serverCertificate = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverCertificate");


        // Simple Field (noOfServerEndpoints)
int noOfServerEndpoints = readBuffer.readInt("noOfServerEndpoints", 32) ;        // Array field (serverEndpoints)
        readBuffer.pullContext("serverEndpoints", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfServerEndpoints > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfServerEndpoints) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] serverEndpoints;
        {
            int itemCount = Math.max(0, (int) noOfServerEndpoints);
            serverEndpoints = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
serverEndpoints[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(314) ) ;            }
        }
            readBuffer.closeContext("serverEndpoints", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfServerSoftwareCertificates)
int noOfServerSoftwareCertificates = readBuffer.readInt("noOfServerSoftwareCertificates", 32) ;        // Array field (serverSoftwareCertificates)
        readBuffer.pullContext("serverSoftwareCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfServerSoftwareCertificates > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfServerSoftwareCertificates) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] serverSoftwareCertificates;
        {
            int itemCount = Math.max(0, (int) noOfServerSoftwareCertificates);
            serverSoftwareCertificates = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
serverSoftwareCertificates[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(346) ) ;            }
        }
            readBuffer.closeContext("serverSoftwareCertificates", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("serverSignature");

        // Simple Field (serverSignature)
ExtensionObjectDefinition serverSignature = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(458) ) ;        readBuffer.closeContext("serverSignature");


        // Simple Field (maxRequestMessageSize)
long maxRequestMessageSize = readBuffer.readUnsignedLong("maxRequestMessageSize", 32) ;
        readBuffer.closeContext("CreateSessionResponse");
        // Create the instance
        return new CreateSessionResponseBuilder(responseHeader, sessionId, authenticationToken, revisedSessionTimeout, serverNonce, serverCertificate, noOfServerEndpoints, serverEndpoints, noOfServerSoftwareCertificates, serverSoftwareCertificates, serverSignature, maxRequestMessageSize);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CreateSessionResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CreateSessionResponse");

        // Simple Field (responseHeader)
        ExtensionObjectDefinition responseHeader = (ExtensionObjectDefinition) _value.getResponseHeader();
        writeBuffer.pushContext("responseHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, responseHeader);
        writeBuffer.popContext("responseHeader");

        // Simple Field (sessionId)
        NodeId sessionId = (NodeId) _value.getSessionId();
        writeBuffer.pushContext("sessionId");
        NodeIdIO.staticSerialize(writeBuffer, sessionId);
        writeBuffer.popContext("sessionId");

        // Simple Field (authenticationToken)
        NodeId authenticationToken = (NodeId) _value.getAuthenticationToken();
        writeBuffer.pushContext("authenticationToken");
        NodeIdIO.staticSerialize(writeBuffer, authenticationToken);
        writeBuffer.popContext("authenticationToken");

        // Simple Field (revisedSessionTimeout)
        double revisedSessionTimeout = (double) _value.getRevisedSessionTimeout();
        writeBuffer.writeDouble("revisedSessionTimeout", (revisedSessionTimeout),11,52);

        // Simple Field (serverNonce)
        PascalByteString serverNonce = (PascalByteString) _value.getServerNonce();
        writeBuffer.pushContext("serverNonce");
        PascalByteStringIO.staticSerialize(writeBuffer, serverNonce);
        writeBuffer.popContext("serverNonce");

        // Simple Field (serverCertificate)
        PascalByteString serverCertificate = (PascalByteString) _value.getServerCertificate();
        writeBuffer.pushContext("serverCertificate");
        PascalByteStringIO.staticSerialize(writeBuffer, serverCertificate);
        writeBuffer.popContext("serverCertificate");

        // Simple Field (noOfServerEndpoints)
        int noOfServerEndpoints = (int) _value.getNoOfServerEndpoints();
        writeBuffer.writeInt("noOfServerEndpoints", 32, ((Number) (noOfServerEndpoints)).intValue());

        // Array Field (serverEndpoints)
        if(_value.getServerEndpoints() != null) {
            writeBuffer.pushContext("serverEndpoints", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServerEndpoints().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getServerEndpoints()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("serverEndpoints", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfServerSoftwareCertificates)
        int noOfServerSoftwareCertificates = (int) _value.getNoOfServerSoftwareCertificates();
        writeBuffer.writeInt("noOfServerSoftwareCertificates", 32, ((Number) (noOfServerSoftwareCertificates)).intValue());

        // Array Field (serverSoftwareCertificates)
        if(_value.getServerSoftwareCertificates() != null) {
            writeBuffer.pushContext("serverSoftwareCertificates", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServerSoftwareCertificates().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getServerSoftwareCertificates()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("serverSoftwareCertificates", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (serverSignature)
        ExtensionObjectDefinition serverSignature = (ExtensionObjectDefinition) _value.getServerSignature();
        writeBuffer.pushContext("serverSignature");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, serverSignature);
        writeBuffer.popContext("serverSignature");

        // Simple Field (maxRequestMessageSize)
        long maxRequestMessageSize = (long) _value.getMaxRequestMessageSize();
        writeBuffer.writeUnsignedLong("maxRequestMessageSize", 32, ((Number) (maxRequestMessageSize)).longValue());
        writeBuffer.popContext("CreateSessionResponse");
    }

    public static class CreateSessionResponseBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition responseHeader;
        private final NodeId sessionId;
        private final NodeId authenticationToken;
        private final double revisedSessionTimeout;
        private final PascalByteString serverNonce;
        private final PascalByteString serverCertificate;
        private final int noOfServerEndpoints;
        private final ExtensionObjectDefinition[] serverEndpoints;
        private final int noOfServerSoftwareCertificates;
        private final ExtensionObjectDefinition[] serverSoftwareCertificates;
        private final ExtensionObjectDefinition serverSignature;
        private final long maxRequestMessageSize;

        public CreateSessionResponseBuilder(ExtensionObjectDefinition responseHeader, NodeId sessionId, NodeId authenticationToken, double revisedSessionTimeout, PascalByteString serverNonce, PascalByteString serverCertificate, int noOfServerEndpoints, ExtensionObjectDefinition[] serverEndpoints, int noOfServerSoftwareCertificates, ExtensionObjectDefinition[] serverSoftwareCertificates, ExtensionObjectDefinition serverSignature, long maxRequestMessageSize) {
            this.responseHeader = responseHeader;
            this.sessionId = sessionId;
            this.authenticationToken = authenticationToken;
            this.revisedSessionTimeout = revisedSessionTimeout;
            this.serverNonce = serverNonce;
            this.serverCertificate = serverCertificate;
            this.noOfServerEndpoints = noOfServerEndpoints;
            this.serverEndpoints = serverEndpoints;
            this.noOfServerSoftwareCertificates = noOfServerSoftwareCertificates;
            this.serverSoftwareCertificates = serverSoftwareCertificates;
            this.serverSignature = serverSignature;
            this.maxRequestMessageSize = maxRequestMessageSize;
        }

        public CreateSessionResponse build() {
            return new CreateSessionResponse(responseHeader, sessionId, authenticationToken, revisedSessionTimeout, serverNonce, serverCertificate, noOfServerEndpoints, serverEndpoints, noOfServerSoftwareCertificates, serverSoftwareCertificates, serverSignature, maxRequestMessageSize);
        }
    }

}
