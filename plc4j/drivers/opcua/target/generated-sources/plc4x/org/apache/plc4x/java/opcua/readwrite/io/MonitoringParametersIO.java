/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class MonitoringParametersIO implements MessageIO<MonitoringParameters, MonitoringParameters> {

    private static final Logger LOGGER = LoggerFactory.getLogger(MonitoringParametersIO.class);

    @Override
    public MonitoringParameters parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (MonitoringParameters) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, MonitoringParameters value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static MonitoringParametersBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("MonitoringParameters");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (clientHandle)
long clientHandle = readBuffer.readUnsignedLong("clientHandle", 32) ;

        // Simple Field (samplingInterval)
double samplingInterval = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "samplingInterval", true, 11, 52); })).get() ;
        readBuffer.pullContext("filter");

        // Simple Field (filter)
ExtensionObject filter = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("filter");


        // Simple Field (queueSize)
long queueSize = readBuffer.readUnsignedLong("queueSize", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (discardOldest)
boolean discardOldest = readBuffer.readBit("discardOldest") ;
        readBuffer.closeContext("MonitoringParameters");
        // Create the instance
        return new MonitoringParametersBuilder(clientHandle, samplingInterval, filter, queueSize, discardOldest);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, MonitoringParameters _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("MonitoringParameters");

        // Simple Field (clientHandle)
        long clientHandle = (long) _value.getClientHandle();
        writeBuffer.writeUnsignedLong("clientHandle", 32, ((Number) (clientHandle)).longValue());

        // Simple Field (samplingInterval)
        double samplingInterval = (double) _value.getSamplingInterval();
        writeBuffer.writeDouble("samplingInterval", (samplingInterval),11,52);

        // Simple Field (filter)
        ExtensionObject filter = (ExtensionObject) _value.getFilter();
        writeBuffer.pushContext("filter");
        ExtensionObjectIO.staticSerialize(writeBuffer, filter);
        writeBuffer.popContext("filter");

        // Simple Field (queueSize)
        long queueSize = (long) _value.getQueueSize();
        writeBuffer.writeUnsignedLong("queueSize", 32, ((Number) (queueSize)).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (discardOldest)
        boolean discardOldest = (boolean) _value.getDiscardOldest();
        writeBuffer.writeBit("discardOldest", (boolean) (discardOldest));
        writeBuffer.popContext("MonitoringParameters");
    }

    public static class MonitoringParametersBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long clientHandle;
        private final double samplingInterval;
        private final ExtensionObject filter;
        private final long queueSize;
        private final boolean discardOldest;

        public MonitoringParametersBuilder(long clientHandle, double samplingInterval, ExtensionObject filter, long queueSize, boolean discardOldest) {
            this.clientHandle = clientHandle;
            this.samplingInterval = samplingInterval;
            this.filter = filter;
            this.queueSize = queueSize;
            this.discardOldest = discardOldest;
        }

        public MonitoringParameters build() {
            return new MonitoringParameters(clientHandle, samplingInterval, filter, queueSize, discardOldest);
        }
    }

}
