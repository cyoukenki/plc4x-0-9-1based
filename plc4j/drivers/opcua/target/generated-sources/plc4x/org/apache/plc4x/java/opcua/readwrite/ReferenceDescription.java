/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ReferenceDescription extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "520";
    }

    // Properties.
    private final NodeId referenceTypeId;
    private final boolean isForward;
    private final ExpandedNodeId nodeId;
    private final QualifiedName browseName;
    private final LocalizedText displayName;
    private final NodeClass nodeClass;
    private final ExpandedNodeId typeDefinition;

    public ReferenceDescription(NodeId referenceTypeId, boolean isForward, ExpandedNodeId nodeId, QualifiedName browseName, LocalizedText displayName, NodeClass nodeClass, ExpandedNodeId typeDefinition) {
        this.referenceTypeId = referenceTypeId;
        this.isForward = isForward;
        this.nodeId = nodeId;
        this.browseName = browseName;
        this.displayName = displayName;
        this.nodeClass = nodeClass;
        this.typeDefinition = typeDefinition;
    }

    public NodeId getReferenceTypeId() {
        return referenceTypeId;
    }

    public boolean getIsForward() {
        return isForward;
    }

    public ExpandedNodeId getNodeId() {
        return nodeId;
    }

    public QualifiedName getBrowseName() {
        return browseName;
    }

    public LocalizedText getDisplayName() {
        return displayName;
    }

    public NodeClass getNodeClass() {
        return nodeClass;
    }

    public ExpandedNodeId getTypeDefinition() {
        return typeDefinition;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        ReferenceDescription _value  = this;

        // Simple field (referenceTypeId)
        lengthInBits += referenceTypeId.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 7;

        // Simple field (isForward)
        lengthInBits += 1;

        // Simple field (nodeId)
        lengthInBits += nodeId.getLengthInBits();

        // Simple field (browseName)
        lengthInBits += browseName.getLengthInBits();

        // Simple field (displayName)
        lengthInBits += displayName.getLengthInBits();

        // Simple field (nodeClass)
        lengthInBits += 32;

        // Simple field (typeDefinition)
        lengthInBits += typeDefinition.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ReferenceDescription)) {
            return false;
        }
        ReferenceDescription that = (ReferenceDescription) o;
        return
            (getReferenceTypeId() == that.getReferenceTypeId()) &&
            (getIsForward() == that.getIsForward()) &&
            (getNodeId() == that.getNodeId()) &&
            (getBrowseName() == that.getBrowseName()) &&
            (getDisplayName() == that.getDisplayName()) &&
            (getNodeClass() == that.getNodeClass()) &&
            (getTypeDefinition() == that.getTypeDefinition()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getReferenceTypeId(),
            getIsForward(),
            getNodeId(),
            getBrowseName(),
            getDisplayName(),
            getNodeClass(),
            getTypeDefinition()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("referenceTypeId", getReferenceTypeId())
            .append("isForward", getIsForward())
            .append("nodeId", getNodeId())
            .append("browseName", getBrowseName())
            .append("displayName", getDisplayName())
            .append("nodeClass", getNodeClass())
            .append("typeDefinition", getTypeDefinition())
            .toString();
    }

}
