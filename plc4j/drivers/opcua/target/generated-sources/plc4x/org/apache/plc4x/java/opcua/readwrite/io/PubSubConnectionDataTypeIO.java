/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PubSubConnectionDataTypeIO implements MessageIO<PubSubConnectionDataType, PubSubConnectionDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PubSubConnectionDataTypeIO.class);

    @Override
    public PubSubConnectionDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PubSubConnectionDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PubSubConnectionDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static PubSubConnectionDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PubSubConnectionDataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("name");

        // Simple Field (name)
PascalString name = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("name");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (enabled)
boolean enabled = readBuffer.readBit("enabled") ;
        readBuffer.pullContext("publisherId");

        // Simple Field (publisherId)
Variant publisherId = VariantIO.staticParse(readBuffer ) ;        readBuffer.closeContext("publisherId");

        readBuffer.pullContext("transportProfileUri");

        // Simple Field (transportProfileUri)
PascalString transportProfileUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("transportProfileUri");

        readBuffer.pullContext("address");

        // Simple Field (address)
ExtensionObject address = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("address");


        // Simple Field (noOfConnectionProperties)
int noOfConnectionProperties = readBuffer.readInt("noOfConnectionProperties", 32) ;        // Array field (connectionProperties)
        readBuffer.pullContext("connectionProperties", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfConnectionProperties > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfConnectionProperties) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] connectionProperties;
        {
            int itemCount = Math.max(0, (int) noOfConnectionProperties);
            connectionProperties = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
connectionProperties[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(14535) ) ;            }
        }
            readBuffer.closeContext("connectionProperties", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("transportSettings");

        // Simple Field (transportSettings)
ExtensionObject transportSettings = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("transportSettings");


        // Simple Field (noOfWriterGroups)
int noOfWriterGroups = readBuffer.readInt("noOfWriterGroups", 32) ;        // Array field (writerGroups)
        readBuffer.pullContext("writerGroups", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfWriterGroups > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfWriterGroups) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PubSubGroupDataType[] writerGroups;
        {
            int itemCount = Math.max(0, (int) noOfWriterGroups);
            writerGroups = new PubSubGroupDataType[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
writerGroups[curItem] = PubSubGroupDataTypeIO.staticParse(readBuffer ) .build() ;            }
        }
            readBuffer.closeContext("writerGroups", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfReaderGroups)
int noOfReaderGroups = readBuffer.readInt("noOfReaderGroups", 32) ;        // Array field (readerGroups)
        readBuffer.pullContext("readerGroups", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfReaderGroups > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfReaderGroups) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PubSubGroupDataType[] readerGroups;
        {
            int itemCount = Math.max(0, (int) noOfReaderGroups);
            readerGroups = new PubSubGroupDataType[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
readerGroups[curItem] = PubSubGroupDataTypeIO.staticParse(readBuffer ) .build() ;            }
        }
            readBuffer.closeContext("readerGroups", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PubSubConnectionDataType");
        // Create the instance
        return new PubSubConnectionDataTypeBuilder(name, enabled, publisherId, transportProfileUri, address, noOfConnectionProperties, connectionProperties, transportSettings, noOfWriterGroups, writerGroups, noOfReaderGroups, readerGroups);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PubSubConnectionDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PubSubConnectionDataType");

        // Simple Field (name)
        PascalString name = (PascalString) _value.getName();
        writeBuffer.pushContext("name");
        PascalStringIO.staticSerialize(writeBuffer, name);
        writeBuffer.popContext("name");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (enabled)
        boolean enabled = (boolean) _value.getEnabled();
        writeBuffer.writeBit("enabled", (boolean) (enabled));

        // Simple Field (publisherId)
        Variant publisherId = (Variant) _value.getPublisherId();
        writeBuffer.pushContext("publisherId");
        VariantIO.staticSerialize(writeBuffer, publisherId);
        writeBuffer.popContext("publisherId");

        // Simple Field (transportProfileUri)
        PascalString transportProfileUri = (PascalString) _value.getTransportProfileUri();
        writeBuffer.pushContext("transportProfileUri");
        PascalStringIO.staticSerialize(writeBuffer, transportProfileUri);
        writeBuffer.popContext("transportProfileUri");

        // Simple Field (address)
        ExtensionObject address = (ExtensionObject) _value.getAddress();
        writeBuffer.pushContext("address");
        ExtensionObjectIO.staticSerialize(writeBuffer, address);
        writeBuffer.popContext("address");

        // Simple Field (noOfConnectionProperties)
        int noOfConnectionProperties = (int) _value.getNoOfConnectionProperties();
        writeBuffer.writeInt("noOfConnectionProperties", 32, ((Number) (noOfConnectionProperties)).intValue());

        // Array Field (connectionProperties)
        if(_value.getConnectionProperties() != null) {
            writeBuffer.pushContext("connectionProperties", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getConnectionProperties().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getConnectionProperties()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("connectionProperties", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (transportSettings)
        ExtensionObject transportSettings = (ExtensionObject) _value.getTransportSettings();
        writeBuffer.pushContext("transportSettings");
        ExtensionObjectIO.staticSerialize(writeBuffer, transportSettings);
        writeBuffer.popContext("transportSettings");

        // Simple Field (noOfWriterGroups)
        int noOfWriterGroups = (int) _value.getNoOfWriterGroups();
        writeBuffer.writeInt("noOfWriterGroups", 32, ((Number) (noOfWriterGroups)).intValue());

        // Array Field (writerGroups)
        if(_value.getWriterGroups() != null) {
            writeBuffer.pushContext("writerGroups", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getWriterGroups().length;
            int curItem = 0;
            for(PubSubGroupDataType element : _value.getWriterGroups()) {
                boolean lastItem = curItem == (itemCount - 1);
                PubSubGroupDataTypeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("writerGroups", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfReaderGroups)
        int noOfReaderGroups = (int) _value.getNoOfReaderGroups();
        writeBuffer.writeInt("noOfReaderGroups", 32, ((Number) (noOfReaderGroups)).intValue());

        // Array Field (readerGroups)
        if(_value.getReaderGroups() != null) {
            writeBuffer.pushContext("readerGroups", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getReaderGroups().length;
            int curItem = 0;
            for(PubSubGroupDataType element : _value.getReaderGroups()) {
                boolean lastItem = curItem == (itemCount - 1);
                PubSubGroupDataTypeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("readerGroups", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PubSubConnectionDataType");
    }

    public static class PubSubConnectionDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString name;
        private final boolean enabled;
        private final Variant publisherId;
        private final PascalString transportProfileUri;
        private final ExtensionObject address;
        private final int noOfConnectionProperties;
        private final ExtensionObjectDefinition[] connectionProperties;
        private final ExtensionObject transportSettings;
        private final int noOfWriterGroups;
        private final PubSubGroupDataType[] writerGroups;
        private final int noOfReaderGroups;
        private final PubSubGroupDataType[] readerGroups;

        public PubSubConnectionDataTypeBuilder(PascalString name, boolean enabled, Variant publisherId, PascalString transportProfileUri, ExtensionObject address, int noOfConnectionProperties, ExtensionObjectDefinition[] connectionProperties, ExtensionObject transportSettings, int noOfWriterGroups, PubSubGroupDataType[] writerGroups, int noOfReaderGroups, PubSubGroupDataType[] readerGroups) {
            this.name = name;
            this.enabled = enabled;
            this.publisherId = publisherId;
            this.transportProfileUri = transportProfileUri;
            this.address = address;
            this.noOfConnectionProperties = noOfConnectionProperties;
            this.connectionProperties = connectionProperties;
            this.transportSettings = transportSettings;
            this.noOfWriterGroups = noOfWriterGroups;
            this.writerGroups = writerGroups;
            this.noOfReaderGroups = noOfReaderGroups;
            this.readerGroups = readerGroups;
        }

        public PubSubConnectionDataType build() {
            return new PubSubConnectionDataType(name, enabled, publisherId, transportProfileUri, address, noOfConnectionProperties, connectionProperties, transportSettings, noOfWriterGroups, writerGroups, noOfReaderGroups, readerGroups);
        }
    }

}
