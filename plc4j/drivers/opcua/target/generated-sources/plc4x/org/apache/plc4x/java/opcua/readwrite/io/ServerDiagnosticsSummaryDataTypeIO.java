/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ServerDiagnosticsSummaryDataTypeIO implements MessageIO<ServerDiagnosticsSummaryDataType, ServerDiagnosticsSummaryDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerDiagnosticsSummaryDataTypeIO.class);

    @Override
    public ServerDiagnosticsSummaryDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ServerDiagnosticsSummaryDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ServerDiagnosticsSummaryDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ServerDiagnosticsSummaryDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ServerDiagnosticsSummaryDataType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (serverViewCount)
long serverViewCount = readBuffer.readUnsignedLong("serverViewCount", 32) ;

        // Simple Field (currentSessionCount)
long currentSessionCount = readBuffer.readUnsignedLong("currentSessionCount", 32) ;

        // Simple Field (cumulatedSessionCount)
long cumulatedSessionCount = readBuffer.readUnsignedLong("cumulatedSessionCount", 32) ;

        // Simple Field (securityRejectedSessionCount)
long securityRejectedSessionCount = readBuffer.readUnsignedLong("securityRejectedSessionCount", 32) ;

        // Simple Field (rejectedSessionCount)
long rejectedSessionCount = readBuffer.readUnsignedLong("rejectedSessionCount", 32) ;

        // Simple Field (sessionTimeoutCount)
long sessionTimeoutCount = readBuffer.readUnsignedLong("sessionTimeoutCount", 32) ;

        // Simple Field (sessionAbortCount)
long sessionAbortCount = readBuffer.readUnsignedLong("sessionAbortCount", 32) ;

        // Simple Field (currentSubscriptionCount)
long currentSubscriptionCount = readBuffer.readUnsignedLong("currentSubscriptionCount", 32) ;

        // Simple Field (cumulatedSubscriptionCount)
long cumulatedSubscriptionCount = readBuffer.readUnsignedLong("cumulatedSubscriptionCount", 32) ;

        // Simple Field (publishingIntervalCount)
long publishingIntervalCount = readBuffer.readUnsignedLong("publishingIntervalCount", 32) ;

        // Simple Field (securityRejectedRequestsCount)
long securityRejectedRequestsCount = readBuffer.readUnsignedLong("securityRejectedRequestsCount", 32) ;

        // Simple Field (rejectedRequestsCount)
long rejectedRequestsCount = readBuffer.readUnsignedLong("rejectedRequestsCount", 32) ;
        readBuffer.closeContext("ServerDiagnosticsSummaryDataType");
        // Create the instance
        return new ServerDiagnosticsSummaryDataTypeBuilder(serverViewCount, currentSessionCount, cumulatedSessionCount, securityRejectedSessionCount, rejectedSessionCount, sessionTimeoutCount, sessionAbortCount, currentSubscriptionCount, cumulatedSubscriptionCount, publishingIntervalCount, securityRejectedRequestsCount, rejectedRequestsCount);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ServerDiagnosticsSummaryDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ServerDiagnosticsSummaryDataType");

        // Simple Field (serverViewCount)
        long serverViewCount = (long) _value.getServerViewCount();
        writeBuffer.writeUnsignedLong("serverViewCount", 32, ((Number) (serverViewCount)).longValue());

        // Simple Field (currentSessionCount)
        long currentSessionCount = (long) _value.getCurrentSessionCount();
        writeBuffer.writeUnsignedLong("currentSessionCount", 32, ((Number) (currentSessionCount)).longValue());

        // Simple Field (cumulatedSessionCount)
        long cumulatedSessionCount = (long) _value.getCumulatedSessionCount();
        writeBuffer.writeUnsignedLong("cumulatedSessionCount", 32, ((Number) (cumulatedSessionCount)).longValue());

        // Simple Field (securityRejectedSessionCount)
        long securityRejectedSessionCount = (long) _value.getSecurityRejectedSessionCount();
        writeBuffer.writeUnsignedLong("securityRejectedSessionCount", 32, ((Number) (securityRejectedSessionCount)).longValue());

        // Simple Field (rejectedSessionCount)
        long rejectedSessionCount = (long) _value.getRejectedSessionCount();
        writeBuffer.writeUnsignedLong("rejectedSessionCount", 32, ((Number) (rejectedSessionCount)).longValue());

        // Simple Field (sessionTimeoutCount)
        long sessionTimeoutCount = (long) _value.getSessionTimeoutCount();
        writeBuffer.writeUnsignedLong("sessionTimeoutCount", 32, ((Number) (sessionTimeoutCount)).longValue());

        // Simple Field (sessionAbortCount)
        long sessionAbortCount = (long) _value.getSessionAbortCount();
        writeBuffer.writeUnsignedLong("sessionAbortCount", 32, ((Number) (sessionAbortCount)).longValue());

        // Simple Field (currentSubscriptionCount)
        long currentSubscriptionCount = (long) _value.getCurrentSubscriptionCount();
        writeBuffer.writeUnsignedLong("currentSubscriptionCount", 32, ((Number) (currentSubscriptionCount)).longValue());

        // Simple Field (cumulatedSubscriptionCount)
        long cumulatedSubscriptionCount = (long) _value.getCumulatedSubscriptionCount();
        writeBuffer.writeUnsignedLong("cumulatedSubscriptionCount", 32, ((Number) (cumulatedSubscriptionCount)).longValue());

        // Simple Field (publishingIntervalCount)
        long publishingIntervalCount = (long) _value.getPublishingIntervalCount();
        writeBuffer.writeUnsignedLong("publishingIntervalCount", 32, ((Number) (publishingIntervalCount)).longValue());

        // Simple Field (securityRejectedRequestsCount)
        long securityRejectedRequestsCount = (long) _value.getSecurityRejectedRequestsCount();
        writeBuffer.writeUnsignedLong("securityRejectedRequestsCount", 32, ((Number) (securityRejectedRequestsCount)).longValue());

        // Simple Field (rejectedRequestsCount)
        long rejectedRequestsCount = (long) _value.getRejectedRequestsCount();
        writeBuffer.writeUnsignedLong("rejectedRequestsCount", 32, ((Number) (rejectedRequestsCount)).longValue());
        writeBuffer.popContext("ServerDiagnosticsSummaryDataType");
    }

    public static class ServerDiagnosticsSummaryDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long serverViewCount;
        private final long currentSessionCount;
        private final long cumulatedSessionCount;
        private final long securityRejectedSessionCount;
        private final long rejectedSessionCount;
        private final long sessionTimeoutCount;
        private final long sessionAbortCount;
        private final long currentSubscriptionCount;
        private final long cumulatedSubscriptionCount;
        private final long publishingIntervalCount;
        private final long securityRejectedRequestsCount;
        private final long rejectedRequestsCount;

        public ServerDiagnosticsSummaryDataTypeBuilder(long serverViewCount, long currentSessionCount, long cumulatedSessionCount, long securityRejectedSessionCount, long rejectedSessionCount, long sessionTimeoutCount, long sessionAbortCount, long currentSubscriptionCount, long cumulatedSubscriptionCount, long publishingIntervalCount, long securityRejectedRequestsCount, long rejectedRequestsCount) {
            this.serverViewCount = serverViewCount;
            this.currentSessionCount = currentSessionCount;
            this.cumulatedSessionCount = cumulatedSessionCount;
            this.securityRejectedSessionCount = securityRejectedSessionCount;
            this.rejectedSessionCount = rejectedSessionCount;
            this.sessionTimeoutCount = sessionTimeoutCount;
            this.sessionAbortCount = sessionAbortCount;
            this.currentSubscriptionCount = currentSubscriptionCount;
            this.cumulatedSubscriptionCount = cumulatedSubscriptionCount;
            this.publishingIntervalCount = publishingIntervalCount;
            this.securityRejectedRequestsCount = securityRejectedRequestsCount;
            this.rejectedRequestsCount = rejectedRequestsCount;
        }

        public ServerDiagnosticsSummaryDataType build() {
            return new ServerDiagnosticsSummaryDataType(serverViewCount, currentSessionCount, cumulatedSessionCount, securityRejectedSessionCount, rejectedSessionCount, sessionTimeoutCount, sessionAbortCount, currentSubscriptionCount, cumulatedSubscriptionCount, publishingIntervalCount, securityRejectedRequestsCount, rejectedRequestsCount);
        }
    }

}
