/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class VariantIO implements MessageIO<Variant, Variant> {

    private static final Logger LOGGER = LoggerFactory.getLogger(VariantIO.class);

    @Override
    public Variant parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return VariantIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Variant value, Object... args) throws ParseException {
        VariantIO.staticSerialize(writeBuffer, value);
    }

    public static Variant staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Variant");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (arrayLengthSpecified)
boolean arrayLengthSpecified = readBuffer.readBit("arrayLengthSpecified") ;

        // Simple Field (arrayDimensionsSpecified)
boolean arrayDimensionsSpecified = readBuffer.readBit("arrayDimensionsSpecified") ;
        // Discriminator Field (VariantType) (Used as input to a switch field)
        short VariantType = readBuffer.readUnsignedShort("VariantType", 6);


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        VariantBuilder builder = null;
                if(EvaluationHelper.equals(VariantType, 1)) {
            builder = VariantBooleanIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 2)) {
            builder = VariantSByteIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 3)) {
            builder = VariantByteIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 4)) {
            builder = VariantInt16IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 5)) {
            builder = VariantUInt16IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 6)) {
            builder = VariantInt32IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 7)) {
            builder = VariantUInt32IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 8)) {
            builder = VariantInt64IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 9)) {
            builder = VariantUInt64IO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 10)) {
            builder = VariantFloatIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 11)) {
            builder = VariantDoubleIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 12)) {
            builder = VariantStringIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 13)) {
            builder = VariantDateTimeIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 14)) {
            builder = VariantGuidIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 15)) {
            builder = VariantByteStringIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 16)) {
            builder = VariantXmlElementIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 17)) {
            builder = VariantNodeIdIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 18)) {
            builder = VariantExpandedNodeIdIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 19)) {
            builder = VariantStatusCodeIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 20)) {
            builder = VariantQualifiedNameIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 21)) {
            builder = VariantLocalizedTextIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 22)) {
            builder = VariantExtensionObjectIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 23)) {
            builder = VariantDataValueIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 24)) {
            builder = VariantVariantIO.staticParse(readBuffer, arrayLengthSpecified);
        } else 
                if(EvaluationHelper.equals(VariantType, 25)) {
            builder = VariantDiagnosticInfoIO.staticParse(readBuffer, arrayLengthSpecified);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        // Optional Field (noOfArrayDimensions) (Can be skipped, if a given expression evaluates to false)
        Integer noOfArrayDimensions = null;
        if(arrayDimensionsSpecified) {
            noOfArrayDimensions = readBuffer.readInt("noOfArrayDimensions", 32);
        }
        // Array field (arrayDimensions)
        readBuffer.pullContext("arrayDimensions", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if((((noOfArrayDimensions) == (null)) ? 0 : noOfArrayDimensions) > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + ((((noOfArrayDimensions) == (null)) ? 0 : noOfArrayDimensions)) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        boolean[] arrayDimensions;
        {
            int itemCount = Math.max(0, (int) (((noOfArrayDimensions) == (null)) ? 0 : noOfArrayDimensions));
            arrayDimensions = new boolean[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
arrayDimensions[curItem] = readBuffer.readBit("") ;            }
        }
            readBuffer.closeContext("arrayDimensions", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Variant");
        // Create the instance
        return builder.build(arrayLengthSpecified, arrayDimensionsSpecified, noOfArrayDimensions, arrayDimensions);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Variant _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Variant");

        // Simple Field (arrayLengthSpecified)
        boolean arrayLengthSpecified = (boolean) _value.getArrayLengthSpecified();
        writeBuffer.writeBit("arrayLengthSpecified", (boolean) (arrayLengthSpecified));

        // Simple Field (arrayDimensionsSpecified)
        boolean arrayDimensionsSpecified = (boolean) _value.getArrayDimensionsSpecified();
        writeBuffer.writeBit("arrayDimensionsSpecified", (boolean) (arrayDimensionsSpecified));

        // Discriminator Field (VariantType) (Used as input to a switch field)
        short VariantType = (short) _value.getVariantType();
            writeBuffer.writeUnsignedShort("VariantType", 6, ((Number) (VariantType)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof VariantBoolean) {
            VariantBooleanIO.staticSerialize(writeBuffer, (VariantBoolean) _value);
        } else 
        if(_value instanceof VariantSByte) {
            VariantSByteIO.staticSerialize(writeBuffer, (VariantSByte) _value);
        } else 
        if(_value instanceof VariantByte) {
            VariantByteIO.staticSerialize(writeBuffer, (VariantByte) _value);
        } else 
        if(_value instanceof VariantInt16) {
            VariantInt16IO.staticSerialize(writeBuffer, (VariantInt16) _value);
        } else 
        if(_value instanceof VariantUInt16) {
            VariantUInt16IO.staticSerialize(writeBuffer, (VariantUInt16) _value);
        } else 
        if(_value instanceof VariantInt32) {
            VariantInt32IO.staticSerialize(writeBuffer, (VariantInt32) _value);
        } else 
        if(_value instanceof VariantUInt32) {
            VariantUInt32IO.staticSerialize(writeBuffer, (VariantUInt32) _value);
        } else 
        if(_value instanceof VariantInt64) {
            VariantInt64IO.staticSerialize(writeBuffer, (VariantInt64) _value);
        } else 
        if(_value instanceof VariantUInt64) {
            VariantUInt64IO.staticSerialize(writeBuffer, (VariantUInt64) _value);
        } else 
        if(_value instanceof VariantFloat) {
            VariantFloatIO.staticSerialize(writeBuffer, (VariantFloat) _value);
        } else 
        if(_value instanceof VariantDouble) {
            VariantDoubleIO.staticSerialize(writeBuffer, (VariantDouble) _value);
        } else 
        if(_value instanceof VariantString) {
            VariantStringIO.staticSerialize(writeBuffer, (VariantString) _value);
        } else 
        if(_value instanceof VariantDateTime) {
            VariantDateTimeIO.staticSerialize(writeBuffer, (VariantDateTime) _value);
        } else 
        if(_value instanceof VariantGuid) {
            VariantGuidIO.staticSerialize(writeBuffer, (VariantGuid) _value);
        } else 
        if(_value instanceof VariantByteString) {
            VariantByteStringIO.staticSerialize(writeBuffer, (VariantByteString) _value);
        } else 
        if(_value instanceof VariantXmlElement) {
            VariantXmlElementIO.staticSerialize(writeBuffer, (VariantXmlElement) _value);
        } else 
        if(_value instanceof VariantNodeId) {
            VariantNodeIdIO.staticSerialize(writeBuffer, (VariantNodeId) _value);
        } else 
        if(_value instanceof VariantExpandedNodeId) {
            VariantExpandedNodeIdIO.staticSerialize(writeBuffer, (VariantExpandedNodeId) _value);
        } else 
        if(_value instanceof VariantStatusCode) {
            VariantStatusCodeIO.staticSerialize(writeBuffer, (VariantStatusCode) _value);
        } else 
        if(_value instanceof VariantQualifiedName) {
            VariantQualifiedNameIO.staticSerialize(writeBuffer, (VariantQualifiedName) _value);
        } else 
        if(_value instanceof VariantLocalizedText) {
            VariantLocalizedTextIO.staticSerialize(writeBuffer, (VariantLocalizedText) _value);
        } else 
        if(_value instanceof VariantExtensionObject) {
            VariantExtensionObjectIO.staticSerialize(writeBuffer, (VariantExtensionObject) _value);
        } else 
        if(_value instanceof VariantDataValue) {
            VariantDataValueIO.staticSerialize(writeBuffer, (VariantDataValue) _value);
        } else 
        if(_value instanceof VariantVariant) {
            VariantVariantIO.staticSerialize(writeBuffer, (VariantVariant) _value);
        } else 
        if(_value instanceof VariantDiagnosticInfo) {
            VariantDiagnosticInfoIO.staticSerialize(writeBuffer, (VariantDiagnosticInfo) _value);
        }

        // Optional Field (noOfArrayDimensions) (Can be skipped, if the value is null)
        Integer noOfArrayDimensions = null;
        if(_value.getNoOfArrayDimensions() != null) {
            noOfArrayDimensions = (Integer) _value.getNoOfArrayDimensions();
            writeBuffer.writeInt("noOfArrayDimensions", 32, ((Number) (noOfArrayDimensions)).intValue());
        }

        // Array Field (arrayDimensions)
        if(_value.getArrayDimensions() != null) {
            writeBuffer.pushContext("arrayDimensions", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getArrayDimensions().length;
            int curItem = 0;
            for(boolean element : _value.getArrayDimensions()) {
                writeBuffer.writeBit("", (boolean) element);
                curItem++;
            }
            writeBuffer.popContext("arrayDimensions", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Variant");
    }

    public static interface VariantBuilder {
        Variant build(boolean arrayLengthSpecified, boolean arrayDimensionsSpecified, Integer noOfArrayDimensions, boolean[] arrayDimensions);
    }

}
