/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AxisInformation extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "12081";
    }

    // Properties.
    private final ExtensionObjectDefinition engineeringUnits;
    private final ExtensionObjectDefinition eURange;
    private final LocalizedText title;
    private final AxisScaleEnumeration axisScaleType;
    private final int noOfAxisSteps;
    private final double[] axisSteps;

    public AxisInformation(ExtensionObjectDefinition engineeringUnits, ExtensionObjectDefinition eURange, LocalizedText title, AxisScaleEnumeration axisScaleType, int noOfAxisSteps, double[] axisSteps) {
        this.engineeringUnits = engineeringUnits;
        this.eURange = eURange;
        this.title = title;
        this.axisScaleType = axisScaleType;
        this.noOfAxisSteps = noOfAxisSteps;
        this.axisSteps = axisSteps;
    }

    public ExtensionObjectDefinition getEngineeringUnits() {
        return engineeringUnits;
    }

    public ExtensionObjectDefinition getEURange() {
        return eURange;
    }

    public LocalizedText getTitle() {
        return title;
    }

    public AxisScaleEnumeration getAxisScaleType() {
        return axisScaleType;
    }

    public int getNoOfAxisSteps() {
        return noOfAxisSteps;
    }

    public double[] getAxisSteps() {
        return axisSteps;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        AxisInformation _value  = this;

        // Simple field (engineeringUnits)
        lengthInBits += engineeringUnits.getLengthInBits();

        // Simple field (eURange)
        lengthInBits += eURange.getLengthInBits();

        // Simple field (title)
        lengthInBits += title.getLengthInBits();

        // Simple field (axisScaleType)
        lengthInBits += 32;

        // Simple field (noOfAxisSteps)
        lengthInBits += 32;

        // Array field
        if(axisSteps != null) {
            lengthInBits += 64 * axisSteps.length;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AxisInformation)) {
            return false;
        }
        AxisInformation that = (AxisInformation) o;
        return
            (getEngineeringUnits() == that.getEngineeringUnits()) &&
            (getEURange() == that.getEURange()) &&
            (getTitle() == that.getTitle()) &&
            (getAxisScaleType() == that.getAxisScaleType()) &&
            (getNoOfAxisSteps() == that.getNoOfAxisSteps()) &&
            (getAxisSteps() == that.getAxisSteps()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getEngineeringUnits(),
            getEURange(),
            getTitle(),
            getAxisScaleType(),
            getNoOfAxisSteps(),
            getAxisSteps()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("engineeringUnits", getEngineeringUnits())
            .append("eURange", getEURange())
            .append("title", getTitle())
            .append("axisScaleType", getAxisScaleType())
            .append("noOfAxisSteps", getNoOfAxisSteps())
            .append("axisSteps", getAxisSteps())
            .toString();
    }

}
