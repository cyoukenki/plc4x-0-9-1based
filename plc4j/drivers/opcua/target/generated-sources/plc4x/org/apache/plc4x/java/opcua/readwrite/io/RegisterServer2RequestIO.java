/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class RegisterServer2RequestIO implements MessageIO<RegisterServer2Request, RegisterServer2Request> {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegisterServer2RequestIO.class);

    @Override
    public RegisterServer2Request parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (RegisterServer2Request) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, RegisterServer2Request value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static RegisterServer2RequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("RegisterServer2Request");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("requestHeader");

        // Simple Field (requestHeader)
ExtensionObjectDefinition requestHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(391) ) ;        readBuffer.closeContext("requestHeader");

        readBuffer.pullContext("server");

        // Simple Field (server)
ExtensionObjectDefinition server = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(434) ) ;        readBuffer.closeContext("server");


        // Simple Field (noOfDiscoveryConfiguration)
int noOfDiscoveryConfiguration = readBuffer.readInt("noOfDiscoveryConfiguration", 32) ;        // Array field (discoveryConfiguration)
        readBuffer.pullContext("discoveryConfiguration", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDiscoveryConfiguration > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDiscoveryConfiguration) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObject[] discoveryConfiguration;
        {
            int itemCount = Math.max(0, (int) noOfDiscoveryConfiguration);
            discoveryConfiguration = new ExtensionObject[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
discoveryConfiguration[curItem] = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;            }
        }
            readBuffer.closeContext("discoveryConfiguration", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("RegisterServer2Request");
        // Create the instance
        return new RegisterServer2RequestBuilder(requestHeader, server, noOfDiscoveryConfiguration, discoveryConfiguration);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, RegisterServer2Request _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("RegisterServer2Request");

        // Simple Field (requestHeader)
        ExtensionObjectDefinition requestHeader = (ExtensionObjectDefinition) _value.getRequestHeader();
        writeBuffer.pushContext("requestHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, requestHeader);
        writeBuffer.popContext("requestHeader");

        // Simple Field (server)
        ExtensionObjectDefinition server = (ExtensionObjectDefinition) _value.getServer();
        writeBuffer.pushContext("server");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, server);
        writeBuffer.popContext("server");

        // Simple Field (noOfDiscoveryConfiguration)
        int noOfDiscoveryConfiguration = (int) _value.getNoOfDiscoveryConfiguration();
        writeBuffer.writeInt("noOfDiscoveryConfiguration", 32, ((Number) (noOfDiscoveryConfiguration)).intValue());

        // Array Field (discoveryConfiguration)
        if(_value.getDiscoveryConfiguration() != null) {
            writeBuffer.pushContext("discoveryConfiguration", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDiscoveryConfiguration().length;
            int curItem = 0;
            for(ExtensionObject element : _value.getDiscoveryConfiguration()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("discoveryConfiguration", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("RegisterServer2Request");
    }

    public static class RegisterServer2RequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition requestHeader;
        private final ExtensionObjectDefinition server;
        private final int noOfDiscoveryConfiguration;
        private final ExtensionObject[] discoveryConfiguration;

        public RegisterServer2RequestBuilder(ExtensionObjectDefinition requestHeader, ExtensionObjectDefinition server, int noOfDiscoveryConfiguration, ExtensionObject[] discoveryConfiguration) {
            this.requestHeader = requestHeader;
            this.server = server;
            this.noOfDiscoveryConfiguration = noOfDiscoveryConfiguration;
            this.discoveryConfiguration = discoveryConfiguration;
        }

        public RegisterServer2Request build() {
            return new RegisterServer2Request(requestHeader, server, noOfDiscoveryConfiguration, discoveryConfiguration);
        }
    }

}
