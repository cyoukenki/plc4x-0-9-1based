/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DiagnosticInfoIO implements MessageIO<DiagnosticInfo, DiagnosticInfo> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosticInfoIO.class);

    @Override
    public DiagnosticInfo parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DiagnosticInfoIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DiagnosticInfo value, Object... args) throws ParseException {
        DiagnosticInfoIO.staticSerialize(writeBuffer, value);
    }

    public static DiagnosticInfo staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DiagnosticInfo");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            boolean reserved = readBuffer.readBit("reserved");
            if(reserved != (boolean) false) {
                LOGGER.info("Expected constant value " + false + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (innerDiagnosticInfoSpecified)
boolean innerDiagnosticInfoSpecified = readBuffer.readBit("innerDiagnosticInfoSpecified") ;

        // Simple Field (innerStatusCodeSpecified)
boolean innerStatusCodeSpecified = readBuffer.readBit("innerStatusCodeSpecified") ;

        // Simple Field (additionalInfoSpecified)
boolean additionalInfoSpecified = readBuffer.readBit("additionalInfoSpecified") ;

        // Simple Field (localeSpecified)
boolean localeSpecified = readBuffer.readBit("localeSpecified") ;

        // Simple Field (localizedTextSpecified)
boolean localizedTextSpecified = readBuffer.readBit("localizedTextSpecified") ;

        // Simple Field (namespaceURISpecified)
boolean namespaceURISpecified = readBuffer.readBit("namespaceURISpecified") ;

        // Simple Field (symbolicIdSpecified)
boolean symbolicIdSpecified = readBuffer.readBit("symbolicIdSpecified") ;
        // Optional Field (symbolicId) (Can be skipped, if a given expression evaluates to false)
        Integer symbolicId = null;
        if(symbolicIdSpecified) {
            symbolicId = readBuffer.readInt("symbolicId", 32);
        }

        // Optional Field (namespaceURI) (Can be skipped, if a given expression evaluates to false)
        Integer namespaceURI = null;
        if(namespaceURISpecified) {
            namespaceURI = readBuffer.readInt("namespaceURI", 32);
        }

        // Optional Field (locale) (Can be skipped, if a given expression evaluates to false)
        Integer locale = null;
        if(localeSpecified) {
            locale = readBuffer.readInt("locale", 32);
        }

        // Optional Field (localizedText) (Can be skipped, if a given expression evaluates to false)
        Integer localizedText = null;
        if(localizedTextSpecified) {
            localizedText = readBuffer.readInt("localizedText", 32);
        }

        // Optional Field (additionalInfo) (Can be skipped, if a given expression evaluates to false)
        PascalString additionalInfo = null;
        if(additionalInfoSpecified) {
            additionalInfo = PascalStringIO.staticParse(readBuffer);
        }

        // Optional Field (innerStatusCode) (Can be skipped, if a given expression evaluates to false)
        StatusCode innerStatusCode = null;
        if(innerStatusCodeSpecified) {
            innerStatusCode = StatusCodeIO.staticParse(readBuffer);
        }

        // Optional Field (innerDiagnosticInfo) (Can be skipped, if a given expression evaluates to false)
        DiagnosticInfo innerDiagnosticInfo = null;
        if(innerDiagnosticInfoSpecified) {
            innerDiagnosticInfo = DiagnosticInfoIO.staticParse(readBuffer);
        }

        readBuffer.closeContext("DiagnosticInfo");
        // Create the instance
        return new DiagnosticInfo(innerDiagnosticInfoSpecified, innerStatusCodeSpecified, additionalInfoSpecified, localeSpecified, localizedTextSpecified, namespaceURISpecified, symbolicIdSpecified, symbolicId, namespaceURI, locale, localizedText, additionalInfo, innerStatusCode, innerDiagnosticInfo);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DiagnosticInfo _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DiagnosticInfo");

        // Reserved Field (reserved)
        writeBuffer.writeBit("reserved", (boolean) (boolean) false);

        // Simple Field (innerDiagnosticInfoSpecified)
        boolean innerDiagnosticInfoSpecified = (boolean) _value.getInnerDiagnosticInfoSpecified();
        writeBuffer.writeBit("innerDiagnosticInfoSpecified", (boolean) (innerDiagnosticInfoSpecified));

        // Simple Field (innerStatusCodeSpecified)
        boolean innerStatusCodeSpecified = (boolean) _value.getInnerStatusCodeSpecified();
        writeBuffer.writeBit("innerStatusCodeSpecified", (boolean) (innerStatusCodeSpecified));

        // Simple Field (additionalInfoSpecified)
        boolean additionalInfoSpecified = (boolean) _value.getAdditionalInfoSpecified();
        writeBuffer.writeBit("additionalInfoSpecified", (boolean) (additionalInfoSpecified));

        // Simple Field (localeSpecified)
        boolean localeSpecified = (boolean) _value.getLocaleSpecified();
        writeBuffer.writeBit("localeSpecified", (boolean) (localeSpecified));

        // Simple Field (localizedTextSpecified)
        boolean localizedTextSpecified = (boolean) _value.getLocalizedTextSpecified();
        writeBuffer.writeBit("localizedTextSpecified", (boolean) (localizedTextSpecified));

        // Simple Field (namespaceURISpecified)
        boolean namespaceURISpecified = (boolean) _value.getNamespaceURISpecified();
        writeBuffer.writeBit("namespaceURISpecified", (boolean) (namespaceURISpecified));

        // Simple Field (symbolicIdSpecified)
        boolean symbolicIdSpecified = (boolean) _value.getSymbolicIdSpecified();
        writeBuffer.writeBit("symbolicIdSpecified", (boolean) (symbolicIdSpecified));

        // Optional Field (symbolicId) (Can be skipped, if the value is null)
        Integer symbolicId = null;
        if(_value.getSymbolicId() != null) {
            symbolicId = (Integer) _value.getSymbolicId();
            writeBuffer.writeInt("symbolicId", 32, ((Number) (symbolicId)).intValue());
        }

        // Optional Field (namespaceURI) (Can be skipped, if the value is null)
        Integer namespaceURI = null;
        if(_value.getNamespaceURI() != null) {
            namespaceURI = (Integer) _value.getNamespaceURI();
            writeBuffer.writeInt("namespaceURI", 32, ((Number) (namespaceURI)).intValue());
        }

        // Optional Field (locale) (Can be skipped, if the value is null)
        Integer locale = null;
        if(_value.getLocale() != null) {
            locale = (Integer) _value.getLocale();
            writeBuffer.writeInt("locale", 32, ((Number) (locale)).intValue());
        }

        // Optional Field (localizedText) (Can be skipped, if the value is null)
        Integer localizedText = null;
        if(_value.getLocalizedText() != null) {
            localizedText = (Integer) _value.getLocalizedText();
            writeBuffer.writeInt("localizedText", 32, ((Number) (localizedText)).intValue());
        }

        // Optional Field (additionalInfo) (Can be skipped, if the value is null)
        PascalString additionalInfo = null;
        if(_value.getAdditionalInfo() != null) {
            additionalInfo = (PascalString) _value.getAdditionalInfo();
            PascalStringIO.staticSerialize(writeBuffer, additionalInfo);
        }

        // Optional Field (innerStatusCode) (Can be skipped, if the value is null)
        StatusCode innerStatusCode = null;
        if(_value.getInnerStatusCode() != null) {
            innerStatusCode = (StatusCode) _value.getInnerStatusCode();
            StatusCodeIO.staticSerialize(writeBuffer, innerStatusCode);
        }

        // Optional Field (innerDiagnosticInfo) (Can be skipped, if the value is null)
        DiagnosticInfo innerDiagnosticInfo = null;
        if(_value.getInnerDiagnosticInfo() != null) {
            innerDiagnosticInfo = (DiagnosticInfo) _value.getInnerDiagnosticInfo();
            DiagnosticInfoIO.staticSerialize(writeBuffer, innerDiagnosticInfo);
        }
        writeBuffer.popContext("DiagnosticInfo");
    }

}
