/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class Node extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "260";
    }

    // Properties.
    private final NodeId nodeId;
    private final NodeClass nodeClass;
    private final QualifiedName browseName;
    private final LocalizedText displayName;
    private final LocalizedText description;
    private final long writeMask;
    private final long userWriteMask;
    private final int noOfRolePermissions;
    private final ExtensionObjectDefinition[] rolePermissions;
    private final int noOfUserRolePermissions;
    private final ExtensionObjectDefinition[] userRolePermissions;
    private final int accessRestrictions;
    private final int noOfReferences;
    private final ExtensionObjectDefinition[] references;

    public Node(NodeId nodeId, NodeClass nodeClass, QualifiedName browseName, LocalizedText displayName, LocalizedText description, long writeMask, long userWriteMask, int noOfRolePermissions, ExtensionObjectDefinition[] rolePermissions, int noOfUserRolePermissions, ExtensionObjectDefinition[] userRolePermissions, int accessRestrictions, int noOfReferences, ExtensionObjectDefinition[] references) {
        this.nodeId = nodeId;
        this.nodeClass = nodeClass;
        this.browseName = browseName;
        this.displayName = displayName;
        this.description = description;
        this.writeMask = writeMask;
        this.userWriteMask = userWriteMask;
        this.noOfRolePermissions = noOfRolePermissions;
        this.rolePermissions = rolePermissions;
        this.noOfUserRolePermissions = noOfUserRolePermissions;
        this.userRolePermissions = userRolePermissions;
        this.accessRestrictions = accessRestrictions;
        this.noOfReferences = noOfReferences;
        this.references = references;
    }

    public NodeId getNodeId() {
        return nodeId;
    }

    public NodeClass getNodeClass() {
        return nodeClass;
    }

    public QualifiedName getBrowseName() {
        return browseName;
    }

    public LocalizedText getDisplayName() {
        return displayName;
    }

    public LocalizedText getDescription() {
        return description;
    }

    public long getWriteMask() {
        return writeMask;
    }

    public long getUserWriteMask() {
        return userWriteMask;
    }

    public int getNoOfRolePermissions() {
        return noOfRolePermissions;
    }

    public ExtensionObjectDefinition[] getRolePermissions() {
        return rolePermissions;
    }

    public int getNoOfUserRolePermissions() {
        return noOfUserRolePermissions;
    }

    public ExtensionObjectDefinition[] getUserRolePermissions() {
        return userRolePermissions;
    }

    public int getAccessRestrictions() {
        return accessRestrictions;
    }

    public int getNoOfReferences() {
        return noOfReferences;
    }

    public ExtensionObjectDefinition[] getReferences() {
        return references;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        Node _value  = this;

        // Simple field (nodeId)
        lengthInBits += nodeId.getLengthInBits();

        // Simple field (nodeClass)
        lengthInBits += 32;

        // Simple field (browseName)
        lengthInBits += browseName.getLengthInBits();

        // Simple field (displayName)
        lengthInBits += displayName.getLengthInBits();

        // Simple field (description)
        lengthInBits += description.getLengthInBits();

        // Simple field (writeMask)
        lengthInBits += 32;

        // Simple field (userWriteMask)
        lengthInBits += 32;

        // Simple field (noOfRolePermissions)
        lengthInBits += 32;

        // Array field
        if(rolePermissions != null) {
            int i=0;
            for(ExtensionObjectDefinition element : rolePermissions) {
                boolean last = ++i >= rolePermissions.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfUserRolePermissions)
        lengthInBits += 32;

        // Array field
        if(userRolePermissions != null) {
            int i=0;
            for(ExtensionObjectDefinition element : userRolePermissions) {
                boolean last = ++i >= userRolePermissions.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (accessRestrictions)
        lengthInBits += 16;

        // Simple field (noOfReferences)
        lengthInBits += 32;

        // Array field
        if(references != null) {
            int i=0;
            for(ExtensionObjectDefinition element : references) {
                boolean last = ++i >= references.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Node)) {
            return false;
        }
        Node that = (Node) o;
        return
            (getNodeId() == that.getNodeId()) &&
            (getNodeClass() == that.getNodeClass()) &&
            (getBrowseName() == that.getBrowseName()) &&
            (getDisplayName() == that.getDisplayName()) &&
            (getDescription() == that.getDescription()) &&
            (getWriteMask() == that.getWriteMask()) &&
            (getUserWriteMask() == that.getUserWriteMask()) &&
            (getNoOfRolePermissions() == that.getNoOfRolePermissions()) &&
            (getRolePermissions() == that.getRolePermissions()) &&
            (getNoOfUserRolePermissions() == that.getNoOfUserRolePermissions()) &&
            (getUserRolePermissions() == that.getUserRolePermissions()) &&
            (getAccessRestrictions() == that.getAccessRestrictions()) &&
            (getNoOfReferences() == that.getNoOfReferences()) &&
            (getReferences() == that.getReferences()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getNodeId(),
            getNodeClass(),
            getBrowseName(),
            getDisplayName(),
            getDescription(),
            getWriteMask(),
            getUserWriteMask(),
            getNoOfRolePermissions(),
            getRolePermissions(),
            getNoOfUserRolePermissions(),
            getUserRolePermissions(),
            getAccessRestrictions(),
            getNoOfReferences(),
            getReferences()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("nodeId", getNodeId())
            .append("nodeClass", getNodeClass())
            .append("browseName", getBrowseName())
            .append("displayName", getDisplayName())
            .append("description", getDescription())
            .append("writeMask", getWriteMask())
            .append("userWriteMask", getUserWriteMask())
            .append("noOfRolePermissions", getNoOfRolePermissions())
            .append("rolePermissions", getRolePermissions())
            .append("noOfUserRolePermissions", getNoOfUserRolePermissions())
            .append("userRolePermissions", getUserRolePermissions())
            .append("accessRestrictions", getAccessRestrictions())
            .append("noOfReferences", getNoOfReferences())
            .append("references", getReferences())
            .toString();
    }

}
