/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ChannelSecurityTokenIO implements MessageIO<ChannelSecurityToken, ChannelSecurityToken> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChannelSecurityTokenIO.class);

    @Override
    public ChannelSecurityToken parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ChannelSecurityToken) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ChannelSecurityToken value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ChannelSecurityTokenBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ChannelSecurityToken");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (channelId)
long channelId = readBuffer.readUnsignedLong("channelId", 32) ;

        // Simple Field (tokenId)
long tokenId = readBuffer.readUnsignedLong("tokenId", 32) ;

        // Simple Field (createdAt)
long createdAt = readBuffer.readLong("createdAt", 64) ;

        // Simple Field (revisedLifetime)
long revisedLifetime = readBuffer.readUnsignedLong("revisedLifetime", 32) ;
        readBuffer.closeContext("ChannelSecurityToken");
        // Create the instance
        return new ChannelSecurityTokenBuilder(channelId, tokenId, createdAt, revisedLifetime);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ChannelSecurityToken _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ChannelSecurityToken");

        // Simple Field (channelId)
        long channelId = (long) _value.getChannelId();
        writeBuffer.writeUnsignedLong("channelId", 32, ((Number) (channelId)).longValue());

        // Simple Field (tokenId)
        long tokenId = (long) _value.getTokenId();
        writeBuffer.writeUnsignedLong("tokenId", 32, ((Number) (tokenId)).longValue());

        // Simple Field (createdAt)
        long createdAt = (long) _value.getCreatedAt();
        writeBuffer.writeLong("createdAt", 64, ((Number) (createdAt)).longValue());

        // Simple Field (revisedLifetime)
        long revisedLifetime = (long) _value.getRevisedLifetime();
        writeBuffer.writeUnsignedLong("revisedLifetime", 32, ((Number) (revisedLifetime)).longValue());
        writeBuffer.popContext("ChannelSecurityToken");
    }

    public static class ChannelSecurityTokenBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long channelId;
        private final long tokenId;
        private final long createdAt;
        private final long revisedLifetime;

        public ChannelSecurityTokenBuilder(long channelId, long tokenId, long createdAt, long revisedLifetime) {
            this.channelId = channelId;
            this.tokenId = tokenId;
            this.createdAt = createdAt;
            this.revisedLifetime = revisedLifetime;
        }

        public ChannelSecurityToken build() {
            return new ChannelSecurityToken(channelId, tokenId, createdAt, revisedLifetime);
        }
    }

}
