/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class MessagePDUIO implements MessageIO<MessagePDU, MessagePDU> {

    private static final Logger LOGGER = LoggerFactory.getLogger(MessagePDUIO.class);

    @Override
    public MessagePDU parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Boolean response;
        if(args[0] instanceof Boolean) {
            response = (Boolean) args[0];
        } else if (args[0] instanceof String) {
            response = Boolean.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean or a string which is parseable but was " + args[0].getClass().getName());
        }
        return MessagePDUIO.staticParse(readBuffer, response);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, MessagePDU value, Object... args) throws ParseException {
        MessagePDUIO.staticSerialize(writeBuffer, value);
    }

    public static MessagePDU staticParse(ReadBuffer readBuffer, Boolean response) throws ParseException {
        readBuffer.pullContext("MessagePDU");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (messageType) (Used as input to a switch field)
        String messageType = readBuffer.readString("messageType", 24, "UTF-8");


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        MessagePDUBuilder builder = null;
                if(EvaluationHelper.equals(messageType, "HEL") && EvaluationHelper.equals(response, false)) {
            builder = OpcuaHelloRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "ACK") && EvaluationHelper.equals(response, true)) {
            builder = OpcuaAcknowledgeResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "OPN") && EvaluationHelper.equals(response, false)) {
            builder = OpcuaOpenRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "OPN") && EvaluationHelper.equals(response, true)) {
            builder = OpcuaOpenResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "CLO") && EvaluationHelper.equals(response, false)) {
            builder = OpcuaCloseRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "MSG") && EvaluationHelper.equals(response, false)) {
            builder = OpcuaMessageRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, "MSG") && EvaluationHelper.equals(response, true)) {
            builder = OpcuaMessageResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("MessagePDU");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, MessagePDU _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("MessagePDU");

        // Discriminator Field (messageType) (Used as input to a switch field)
        String messageType = (String) _value.getMessageType();
            writeBuffer.writeString("messageType", 24, "UTF-8", (String) (messageType));

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof OpcuaHelloRequest) {
            OpcuaHelloRequestIO.staticSerialize(writeBuffer, (OpcuaHelloRequest) _value);
        } else 
        if(_value instanceof OpcuaAcknowledgeResponse) {
            OpcuaAcknowledgeResponseIO.staticSerialize(writeBuffer, (OpcuaAcknowledgeResponse) _value);
        } else 
        if(_value instanceof OpcuaOpenRequest) {
            OpcuaOpenRequestIO.staticSerialize(writeBuffer, (OpcuaOpenRequest) _value);
        } else 
        if(_value instanceof OpcuaOpenResponse) {
            OpcuaOpenResponseIO.staticSerialize(writeBuffer, (OpcuaOpenResponse) _value);
        } else 
        if(_value instanceof OpcuaCloseRequest) {
            OpcuaCloseRequestIO.staticSerialize(writeBuffer, (OpcuaCloseRequest) _value);
        } else 
        if(_value instanceof OpcuaMessageRequest) {
            OpcuaMessageRequestIO.staticSerialize(writeBuffer, (OpcuaMessageRequest) _value);
        } else 
        if(_value instanceof OpcuaMessageResponse) {
            OpcuaMessageResponseIO.staticSerialize(writeBuffer, (OpcuaMessageResponse) _value);
        }
        writeBuffer.popContext("MessagePDU");
    }

    public static interface MessagePDUBuilder {
        MessagePDU build();
    }

}
