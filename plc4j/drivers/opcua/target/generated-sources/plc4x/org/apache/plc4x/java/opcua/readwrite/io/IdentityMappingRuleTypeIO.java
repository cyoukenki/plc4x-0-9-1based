/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class IdentityMappingRuleTypeIO implements MessageIO<IdentityMappingRuleType, IdentityMappingRuleType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(IdentityMappingRuleTypeIO.class);

    @Override
    public IdentityMappingRuleType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (IdentityMappingRuleType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, IdentityMappingRuleType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static IdentityMappingRuleTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("IdentityMappingRuleType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("criteriaType");

        // Simple Field (criteriaType)
        // enum based simple field with type IdentityCriteriaType
        IdentityCriteriaType criteriaType = IdentityCriteriaType.enumForValue(readBuffer.readUnsignedLong("IdentityCriteriaType", 32));
        readBuffer.closeContext("criteriaType");

        readBuffer.pullContext("criteria");

        // Simple Field (criteria)
PascalString criteria = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("criteria");

        readBuffer.closeContext("IdentityMappingRuleType");
        // Create the instance
        return new IdentityMappingRuleTypeBuilder(criteriaType, criteria);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, IdentityMappingRuleType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("IdentityMappingRuleType");

        // Simple Field (criteriaType)
        IdentityCriteriaType criteriaType = (IdentityCriteriaType) _value.getCriteriaType();
        writeBuffer.pushContext("criteriaType");
        // enum field with type IdentityCriteriaType
        writeBuffer.writeUnsignedLong("IdentityCriteriaType", 32, ((Number) (criteriaType.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(criteriaType.name()));
        writeBuffer.popContext("criteriaType");

        // Simple Field (criteria)
        PascalString criteria = (PascalString) _value.getCriteria();
        writeBuffer.pushContext("criteria");
        PascalStringIO.staticSerialize(writeBuffer, criteria);
        writeBuffer.popContext("criteria");
        writeBuffer.popContext("IdentityMappingRuleType");
    }

    public static class IdentityMappingRuleTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final IdentityCriteriaType criteriaType;
        private final PascalString criteria;

        public IdentityMappingRuleTypeBuilder(IdentityCriteriaType criteriaType, PascalString criteria) {
            this.criteriaType = criteriaType;
            this.criteria = criteria;
        }

        public IdentityMappingRuleType build() {
            return new IdentityMappingRuleType(criteriaType, criteria);
        }
    }

}
