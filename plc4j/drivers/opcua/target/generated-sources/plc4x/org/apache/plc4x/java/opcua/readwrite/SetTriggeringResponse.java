/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SetTriggeringResponse extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "778";
    }

    // Properties.
    private final ExtensionObjectDefinition responseHeader;
    private final int noOfAddResults;
    private final StatusCode[] addResults;
    private final int noOfAddDiagnosticInfos;
    private final DiagnosticInfo[] addDiagnosticInfos;
    private final int noOfRemoveResults;
    private final StatusCode[] removeResults;
    private final int noOfRemoveDiagnosticInfos;
    private final DiagnosticInfo[] removeDiagnosticInfos;

    public SetTriggeringResponse(ExtensionObjectDefinition responseHeader, int noOfAddResults, StatusCode[] addResults, int noOfAddDiagnosticInfos, DiagnosticInfo[] addDiagnosticInfos, int noOfRemoveResults, StatusCode[] removeResults, int noOfRemoveDiagnosticInfos, DiagnosticInfo[] removeDiagnosticInfos) {
        this.responseHeader = responseHeader;
        this.noOfAddResults = noOfAddResults;
        this.addResults = addResults;
        this.noOfAddDiagnosticInfos = noOfAddDiagnosticInfos;
        this.addDiagnosticInfos = addDiagnosticInfos;
        this.noOfRemoveResults = noOfRemoveResults;
        this.removeResults = removeResults;
        this.noOfRemoveDiagnosticInfos = noOfRemoveDiagnosticInfos;
        this.removeDiagnosticInfos = removeDiagnosticInfos;
    }

    public ExtensionObjectDefinition getResponseHeader() {
        return responseHeader;
    }

    public int getNoOfAddResults() {
        return noOfAddResults;
    }

    public StatusCode[] getAddResults() {
        return addResults;
    }

    public int getNoOfAddDiagnosticInfos() {
        return noOfAddDiagnosticInfos;
    }

    public DiagnosticInfo[] getAddDiagnosticInfos() {
        return addDiagnosticInfos;
    }

    public int getNoOfRemoveResults() {
        return noOfRemoveResults;
    }

    public StatusCode[] getRemoveResults() {
        return removeResults;
    }

    public int getNoOfRemoveDiagnosticInfos() {
        return noOfRemoveDiagnosticInfos;
    }

    public DiagnosticInfo[] getRemoveDiagnosticInfos() {
        return removeDiagnosticInfos;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        SetTriggeringResponse _value  = this;

        // Simple field (responseHeader)
        lengthInBits += responseHeader.getLengthInBits();

        // Simple field (noOfAddResults)
        lengthInBits += 32;

        // Array field
        if(addResults != null) {
            int i=0;
            for(StatusCode element : addResults) {
                boolean last = ++i >= addResults.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfAddDiagnosticInfos)
        lengthInBits += 32;

        // Array field
        if(addDiagnosticInfos != null) {
            int i=0;
            for(DiagnosticInfo element : addDiagnosticInfos) {
                boolean last = ++i >= addDiagnosticInfos.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfRemoveResults)
        lengthInBits += 32;

        // Array field
        if(removeResults != null) {
            int i=0;
            for(StatusCode element : removeResults) {
                boolean last = ++i >= removeResults.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfRemoveDiagnosticInfos)
        lengthInBits += 32;

        // Array field
        if(removeDiagnosticInfos != null) {
            int i=0;
            for(DiagnosticInfo element : removeDiagnosticInfos) {
                boolean last = ++i >= removeDiagnosticInfos.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SetTriggeringResponse)) {
            return false;
        }
        SetTriggeringResponse that = (SetTriggeringResponse) o;
        return
            (getResponseHeader() == that.getResponseHeader()) &&
            (getNoOfAddResults() == that.getNoOfAddResults()) &&
            (getAddResults() == that.getAddResults()) &&
            (getNoOfAddDiagnosticInfos() == that.getNoOfAddDiagnosticInfos()) &&
            (getAddDiagnosticInfos() == that.getAddDiagnosticInfos()) &&
            (getNoOfRemoveResults() == that.getNoOfRemoveResults()) &&
            (getRemoveResults() == that.getRemoveResults()) &&
            (getNoOfRemoveDiagnosticInfos() == that.getNoOfRemoveDiagnosticInfos()) &&
            (getRemoveDiagnosticInfos() == that.getRemoveDiagnosticInfos()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getResponseHeader(),
            getNoOfAddResults(),
            getAddResults(),
            getNoOfAddDiagnosticInfos(),
            getAddDiagnosticInfos(),
            getNoOfRemoveResults(),
            getRemoveResults(),
            getNoOfRemoveDiagnosticInfos(),
            getRemoveDiagnosticInfos()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("responseHeader", getResponseHeader())
            .append("noOfAddResults", getNoOfAddResults())
            .append("addResults", getAddResults())
            .append("noOfAddDiagnosticInfos", getNoOfAddDiagnosticInfos())
            .append("addDiagnosticInfos", getAddDiagnosticInfos())
            .append("noOfRemoveResults", getNoOfRemoveResults())
            .append("removeResults", getRemoveResults())
            .append("noOfRemoveDiagnosticInfos", getNoOfRemoveDiagnosticInfos())
            .append("removeDiagnosticInfos", getRemoveDiagnosticInfos())
            .toString();
    }

}
