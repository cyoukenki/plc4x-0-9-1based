/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AddReferencesItem extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "381";
    }

    // Properties.
    private final NodeId sourceNodeId;
    private final NodeId referenceTypeId;
    private final boolean isForward;
    private final PascalString targetServerUri;
    private final ExpandedNodeId targetNodeId;
    private final NodeClass targetNodeClass;

    public AddReferencesItem(NodeId sourceNodeId, NodeId referenceTypeId, boolean isForward, PascalString targetServerUri, ExpandedNodeId targetNodeId, NodeClass targetNodeClass) {
        this.sourceNodeId = sourceNodeId;
        this.referenceTypeId = referenceTypeId;
        this.isForward = isForward;
        this.targetServerUri = targetServerUri;
        this.targetNodeId = targetNodeId;
        this.targetNodeClass = targetNodeClass;
    }

    public NodeId getSourceNodeId() {
        return sourceNodeId;
    }

    public NodeId getReferenceTypeId() {
        return referenceTypeId;
    }

    public boolean getIsForward() {
        return isForward;
    }

    public PascalString getTargetServerUri() {
        return targetServerUri;
    }

    public ExpandedNodeId getTargetNodeId() {
        return targetNodeId;
    }

    public NodeClass getTargetNodeClass() {
        return targetNodeClass;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        AddReferencesItem _value  = this;

        // Simple field (sourceNodeId)
        lengthInBits += sourceNodeId.getLengthInBits();

        // Simple field (referenceTypeId)
        lengthInBits += referenceTypeId.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 7;

        // Simple field (isForward)
        lengthInBits += 1;

        // Simple field (targetServerUri)
        lengthInBits += targetServerUri.getLengthInBits();

        // Simple field (targetNodeId)
        lengthInBits += targetNodeId.getLengthInBits();

        // Simple field (targetNodeClass)
        lengthInBits += 32;

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AddReferencesItem)) {
            return false;
        }
        AddReferencesItem that = (AddReferencesItem) o;
        return
            (getSourceNodeId() == that.getSourceNodeId()) &&
            (getReferenceTypeId() == that.getReferenceTypeId()) &&
            (getIsForward() == that.getIsForward()) &&
            (getTargetServerUri() == that.getTargetServerUri()) &&
            (getTargetNodeId() == that.getTargetNodeId()) &&
            (getTargetNodeClass() == that.getTargetNodeClass()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getSourceNodeId(),
            getReferenceTypeId(),
            getIsForward(),
            getTargetServerUri(),
            getTargetNodeId(),
            getTargetNodeClass()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("sourceNodeId", getSourceNodeId())
            .append("referenceTypeId", getReferenceTypeId())
            .append("isForward", getIsForward())
            .append("targetServerUri", getTargetServerUri())
            .append("targetNodeId", getTargetNodeId())
            .append("targetNodeClass", getTargetNodeClass())
            .toString();
    }

}
