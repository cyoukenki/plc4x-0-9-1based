/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class UserIdentityTokenIO implements MessageIO<UserIdentityToken, UserIdentityToken> {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserIdentityTokenIO.class);

    @Override
    public UserIdentityToken parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (UserIdentityToken) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, UserIdentityToken value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static UserIdentityTokenBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("UserIdentityToken");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (policyLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int policyLength = readBuffer.readInt("policyLength", 32);

        readBuffer.pullContext("policyId");

        // Simple Field (policyId)
PascalString policyId = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("policyId");

        readBuffer.pullContext("userIdentityTokenDefinition");

        // Simple Field (userIdentityTokenDefinition)
UserIdentityTokenDefinition userIdentityTokenDefinition = UserIdentityTokenDefinitionIO.staticParse(readBuffer , String.valueOf(policyId.getStringValue()) ) ;        readBuffer.closeContext("userIdentityTokenDefinition");

        readBuffer.closeContext("UserIdentityToken");
        // Create the instance
        return new UserIdentityTokenBuilder(policyId, userIdentityTokenDefinition);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, UserIdentityToken _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("UserIdentityToken");

        // Implicit Field (policyLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int policyLength = (int) ((_value.getPolicyId().getLengthInBytes()) + (_value.getUserIdentityTokenDefinition().getLengthInBytes()));
        writeBuffer.writeInt("policyLength", 32, ((Number) (policyLength)).intValue());

        // Simple Field (policyId)
        PascalString policyId = (PascalString) _value.getPolicyId();
        writeBuffer.pushContext("policyId");
        PascalStringIO.staticSerialize(writeBuffer, policyId);
        writeBuffer.popContext("policyId");

        // Simple Field (userIdentityTokenDefinition)
        UserIdentityTokenDefinition userIdentityTokenDefinition = (UserIdentityTokenDefinition) _value.getUserIdentityTokenDefinition();
        writeBuffer.pushContext("userIdentityTokenDefinition");
        UserIdentityTokenDefinitionIO.staticSerialize(writeBuffer, userIdentityTokenDefinition);
        writeBuffer.popContext("userIdentityTokenDefinition");
        writeBuffer.popContext("UserIdentityToken");
    }

    public static class UserIdentityTokenBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString policyId;
        private final UserIdentityTokenDefinition userIdentityTokenDefinition;

        public UserIdentityTokenBuilder(PascalString policyId, UserIdentityTokenDefinition userIdentityTokenDefinition) {
            this.policyId = policyId;
            this.userIdentityTokenDefinition = userIdentityTokenDefinition;
        }

        public UserIdentityToken build() {
            return new UserIdentityToken(policyId, userIdentityTokenDefinition);
        }
    }

}
