/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class BuildInfoIO implements MessageIO<BuildInfo, BuildInfo> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildInfoIO.class);

    @Override
    public BuildInfo parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (BuildInfo) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, BuildInfo value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static BuildInfoBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("BuildInfo");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("productUri");

        // Simple Field (productUri)
PascalString productUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("productUri");

        readBuffer.pullContext("manufacturerName");

        // Simple Field (manufacturerName)
PascalString manufacturerName = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("manufacturerName");

        readBuffer.pullContext("productName");

        // Simple Field (productName)
PascalString productName = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("productName");

        readBuffer.pullContext("softwareVersion");

        // Simple Field (softwareVersion)
PascalString softwareVersion = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("softwareVersion");

        readBuffer.pullContext("buildNumber");

        // Simple Field (buildNumber)
PascalString buildNumber = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("buildNumber");


        // Simple Field (buildDate)
long buildDate = readBuffer.readLong("buildDate", 64) ;
        readBuffer.closeContext("BuildInfo");
        // Create the instance
        return new BuildInfoBuilder(productUri, manufacturerName, productName, softwareVersion, buildNumber, buildDate);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, BuildInfo _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("BuildInfo");

        // Simple Field (productUri)
        PascalString productUri = (PascalString) _value.getProductUri();
        writeBuffer.pushContext("productUri");
        PascalStringIO.staticSerialize(writeBuffer, productUri);
        writeBuffer.popContext("productUri");

        // Simple Field (manufacturerName)
        PascalString manufacturerName = (PascalString) _value.getManufacturerName();
        writeBuffer.pushContext("manufacturerName");
        PascalStringIO.staticSerialize(writeBuffer, manufacturerName);
        writeBuffer.popContext("manufacturerName");

        // Simple Field (productName)
        PascalString productName = (PascalString) _value.getProductName();
        writeBuffer.pushContext("productName");
        PascalStringIO.staticSerialize(writeBuffer, productName);
        writeBuffer.popContext("productName");

        // Simple Field (softwareVersion)
        PascalString softwareVersion = (PascalString) _value.getSoftwareVersion();
        writeBuffer.pushContext("softwareVersion");
        PascalStringIO.staticSerialize(writeBuffer, softwareVersion);
        writeBuffer.popContext("softwareVersion");

        // Simple Field (buildNumber)
        PascalString buildNumber = (PascalString) _value.getBuildNumber();
        writeBuffer.pushContext("buildNumber");
        PascalStringIO.staticSerialize(writeBuffer, buildNumber);
        writeBuffer.popContext("buildNumber");

        // Simple Field (buildDate)
        long buildDate = (long) _value.getBuildDate();
        writeBuffer.writeLong("buildDate", 64, ((Number) (buildDate)).longValue());
        writeBuffer.popContext("BuildInfo");
    }

    public static class BuildInfoBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString productUri;
        private final PascalString manufacturerName;
        private final PascalString productName;
        private final PascalString softwareVersion;
        private final PascalString buildNumber;
        private final long buildDate;

        public BuildInfoBuilder(PascalString productUri, PascalString manufacturerName, PascalString productName, PascalString softwareVersion, PascalString buildNumber, long buildDate) {
            this.productUri = productUri;
            this.manufacturerName = manufacturerName;
            this.productName = productName;
            this.softwareVersion = softwareVersion;
            this.buildNumber = buildNumber;
            this.buildDate = buildDate;
        }

        public BuildInfo build() {
            return new BuildInfo(productUri, manufacturerName, productName, softwareVersion, buildNumber, buildDate);
        }
    }

}
