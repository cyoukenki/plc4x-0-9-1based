/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataValueIO implements MessageIO<DataValue, DataValue> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataValueIO.class);

    @Override
    public DataValue parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DataValueIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataValue value, Object... args) throws ParseException {
        DataValueIO.staticSerialize(writeBuffer, value);
    }

    public static DataValue staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataValue");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 2);
            if(reserved != (byte) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (serverPicosecondsSpecified)
boolean serverPicosecondsSpecified = readBuffer.readBit("serverPicosecondsSpecified") ;

        // Simple Field (sourcePicosecondsSpecified)
boolean sourcePicosecondsSpecified = readBuffer.readBit("sourcePicosecondsSpecified") ;

        // Simple Field (serverTimestampSpecified)
boolean serverTimestampSpecified = readBuffer.readBit("serverTimestampSpecified") ;

        // Simple Field (sourceTimestampSpecified)
boolean sourceTimestampSpecified = readBuffer.readBit("sourceTimestampSpecified") ;

        // Simple Field (statusCodeSpecified)
boolean statusCodeSpecified = readBuffer.readBit("statusCodeSpecified") ;

        // Simple Field (valueSpecified)
boolean valueSpecified = readBuffer.readBit("valueSpecified") ;
        // Optional Field (value) (Can be skipped, if a given expression evaluates to false)
        Variant value = null;
        if(valueSpecified) {
            value = VariantIO.staticParse(readBuffer);
        }

        // Optional Field (statusCode) (Can be skipped, if a given expression evaluates to false)
        StatusCode statusCode = null;
        if(statusCodeSpecified) {
            statusCode = StatusCodeIO.staticParse(readBuffer);
        }

        // Optional Field (sourceTimestamp) (Can be skipped, if a given expression evaluates to false)
        Long sourceTimestamp = null;
        if(sourceTimestampSpecified) {
            sourceTimestamp = readBuffer.readLong("sourceTimestamp", 64);
        }

        // Optional Field (sourcePicoseconds) (Can be skipped, if a given expression evaluates to false)
        Integer sourcePicoseconds = null;
        if(sourcePicosecondsSpecified) {
            sourcePicoseconds = readBuffer.readUnsignedInt("sourcePicoseconds", 16);
        }

        // Optional Field (serverTimestamp) (Can be skipped, if a given expression evaluates to false)
        Long serverTimestamp = null;
        if(serverTimestampSpecified) {
            serverTimestamp = readBuffer.readLong("serverTimestamp", 64);
        }

        // Optional Field (serverPicoseconds) (Can be skipped, if a given expression evaluates to false)
        Integer serverPicoseconds = null;
        if(serverPicosecondsSpecified) {
            serverPicoseconds = readBuffer.readUnsignedInt("serverPicoseconds", 16);
        }

        readBuffer.closeContext("DataValue");
        // Create the instance
        return new DataValue(serverPicosecondsSpecified, sourcePicosecondsSpecified, serverTimestampSpecified, sourceTimestampSpecified, statusCodeSpecified, valueSpecified, value, statusCode, sourceTimestamp, sourcePicoseconds, serverTimestamp, serverPicoseconds);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataValue _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataValue");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 2, ((Number) (byte) 0x00).byteValue());

        // Simple Field (serverPicosecondsSpecified)
        boolean serverPicosecondsSpecified = (boolean) _value.getServerPicosecondsSpecified();
        writeBuffer.writeBit("serverPicosecondsSpecified", (boolean) (serverPicosecondsSpecified));

        // Simple Field (sourcePicosecondsSpecified)
        boolean sourcePicosecondsSpecified = (boolean) _value.getSourcePicosecondsSpecified();
        writeBuffer.writeBit("sourcePicosecondsSpecified", (boolean) (sourcePicosecondsSpecified));

        // Simple Field (serverTimestampSpecified)
        boolean serverTimestampSpecified = (boolean) _value.getServerTimestampSpecified();
        writeBuffer.writeBit("serverTimestampSpecified", (boolean) (serverTimestampSpecified));

        // Simple Field (sourceTimestampSpecified)
        boolean sourceTimestampSpecified = (boolean) _value.getSourceTimestampSpecified();
        writeBuffer.writeBit("sourceTimestampSpecified", (boolean) (sourceTimestampSpecified));

        // Simple Field (statusCodeSpecified)
        boolean statusCodeSpecified = (boolean) _value.getStatusCodeSpecified();
        writeBuffer.writeBit("statusCodeSpecified", (boolean) (statusCodeSpecified));

        // Simple Field (valueSpecified)
        boolean valueSpecified = (boolean) _value.getValueSpecified();
        writeBuffer.writeBit("valueSpecified", (boolean) (valueSpecified));

        // Optional Field (value) (Can be skipped, if the value is null)
        Variant value = null;
        if(_value.getValue() != null) {
            value = (Variant) _value.getValue();
            VariantIO.staticSerialize(writeBuffer, value);
        }

        // Optional Field (statusCode) (Can be skipped, if the value is null)
        StatusCode statusCode = null;
        if(_value.getStatusCode() != null) {
            statusCode = (StatusCode) _value.getStatusCode();
            StatusCodeIO.staticSerialize(writeBuffer, statusCode);
        }

        // Optional Field (sourceTimestamp) (Can be skipped, if the value is null)
        Long sourceTimestamp = null;
        if(_value.getSourceTimestamp() != null) {
            sourceTimestamp = (Long) _value.getSourceTimestamp();
            writeBuffer.writeLong("sourceTimestamp", 64, ((Number) (sourceTimestamp)).longValue());
        }

        // Optional Field (sourcePicoseconds) (Can be skipped, if the value is null)
        Integer sourcePicoseconds = null;
        if(_value.getSourcePicoseconds() != null) {
            sourcePicoseconds = (Integer) _value.getSourcePicoseconds();
            writeBuffer.writeUnsignedInt("sourcePicoseconds", 16, ((Number) (sourcePicoseconds)).intValue());
        }

        // Optional Field (serverTimestamp) (Can be skipped, if the value is null)
        Long serverTimestamp = null;
        if(_value.getServerTimestamp() != null) {
            serverTimestamp = (Long) _value.getServerTimestamp();
            writeBuffer.writeLong("serverTimestamp", 64, ((Number) (serverTimestamp)).longValue());
        }

        // Optional Field (serverPicoseconds) (Can be skipped, if the value is null)
        Integer serverPicoseconds = null;
        if(_value.getServerPicoseconds() != null) {
            serverPicoseconds = (Integer) _value.getServerPicoseconds();
            writeBuffer.writeUnsignedInt("serverPicoseconds", 16, ((Number) (serverPicoseconds)).intValue());
        }
        writeBuffer.popContext("DataValue");
    }

}
