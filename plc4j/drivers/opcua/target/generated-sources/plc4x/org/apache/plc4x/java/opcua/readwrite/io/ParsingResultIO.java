/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ParsingResultIO implements MessageIO<ParsingResult, ParsingResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ParsingResultIO.class);

    @Override
    public ParsingResult parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ParsingResult) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ParsingResult value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ParsingResultBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ParsingResult");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("statusCode");

        // Simple Field (statusCode)
StatusCode statusCode = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("statusCode");


        // Simple Field (noOfDataStatusCodes)
int noOfDataStatusCodes = readBuffer.readInt("noOfDataStatusCodes", 32) ;        // Array field (dataStatusCodes)
        readBuffer.pullContext("dataStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDataStatusCodes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDataStatusCodes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] dataStatusCodes;
        {
            int itemCount = Math.max(0, (int) noOfDataStatusCodes);
            dataStatusCodes = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataStatusCodes[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("dataStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfDataDiagnosticInfos)
int noOfDataDiagnosticInfos = readBuffer.readInt("noOfDataDiagnosticInfos", 32) ;        // Array field (dataDiagnosticInfos)
        readBuffer.pullContext("dataDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDataDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDataDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] dataDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfDataDiagnosticInfos);
            dataDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("dataDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ParsingResult");
        // Create the instance
        return new ParsingResultBuilder(statusCode, noOfDataStatusCodes, dataStatusCodes, noOfDataDiagnosticInfos, dataDiagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ParsingResult _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ParsingResult");

        // Simple Field (statusCode)
        StatusCode statusCode = (StatusCode) _value.getStatusCode();
        writeBuffer.pushContext("statusCode");
        StatusCodeIO.staticSerialize(writeBuffer, statusCode);
        writeBuffer.popContext("statusCode");

        // Simple Field (noOfDataStatusCodes)
        int noOfDataStatusCodes = (int) _value.getNoOfDataStatusCodes();
        writeBuffer.writeInt("noOfDataStatusCodes", 32, ((Number) (noOfDataStatusCodes)).intValue());

        // Array Field (dataStatusCodes)
        if(_value.getDataStatusCodes() != null) {
            writeBuffer.pushContext("dataStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataStatusCodes().length;
            int curItem = 0;
            for(StatusCode element : _value.getDataStatusCodes()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfDataDiagnosticInfos)
        int noOfDataDiagnosticInfos = (int) _value.getNoOfDataDiagnosticInfos();
        writeBuffer.writeInt("noOfDataDiagnosticInfos", 32, ((Number) (noOfDataDiagnosticInfos)).intValue());

        // Array Field (dataDiagnosticInfos)
        if(_value.getDataDiagnosticInfos() != null) {
            writeBuffer.pushContext("dataDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getDataDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ParsingResult");
    }

    public static class ParsingResultBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final StatusCode statusCode;
        private final int noOfDataStatusCodes;
        private final StatusCode[] dataStatusCodes;
        private final int noOfDataDiagnosticInfos;
        private final DiagnosticInfo[] dataDiagnosticInfos;

        public ParsingResultBuilder(StatusCode statusCode, int noOfDataStatusCodes, StatusCode[] dataStatusCodes, int noOfDataDiagnosticInfos, DiagnosticInfo[] dataDiagnosticInfos) {
            this.statusCode = statusCode;
            this.noOfDataStatusCodes = noOfDataStatusCodes;
            this.dataStatusCodes = dataStatusCodes;
            this.noOfDataDiagnosticInfos = noOfDataDiagnosticInfos;
            this.dataDiagnosticInfos = dataDiagnosticInfos;
        }

        public ParsingResult build() {
            return new ParsingResult(statusCode, noOfDataStatusCodes, dataStatusCodes, noOfDataDiagnosticInfos, dataDiagnosticInfos);
        }
    }

}
