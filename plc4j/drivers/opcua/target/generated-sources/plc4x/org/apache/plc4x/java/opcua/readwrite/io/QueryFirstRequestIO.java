/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class QueryFirstRequestIO implements MessageIO<QueryFirstRequest, QueryFirstRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryFirstRequestIO.class);

    @Override
    public QueryFirstRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (QueryFirstRequest) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, QueryFirstRequest value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static QueryFirstRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("QueryFirstRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("requestHeader");

        // Simple Field (requestHeader)
ExtensionObjectDefinition requestHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(391) ) ;        readBuffer.closeContext("requestHeader");

        readBuffer.pullContext("view");

        // Simple Field (view)
ExtensionObjectDefinition view = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(513) ) ;        readBuffer.closeContext("view");


        // Simple Field (noOfNodeTypes)
int noOfNodeTypes = readBuffer.readInt("noOfNodeTypes", 32) ;        // Array field (nodeTypes)
        readBuffer.pullContext("nodeTypes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfNodeTypes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfNodeTypes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] nodeTypes;
        {
            int itemCount = Math.max(0, (int) noOfNodeTypes);
            nodeTypes = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
nodeTypes[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(575) ) ;            }
        }
            readBuffer.closeContext("nodeTypes", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("filter");

        // Simple Field (filter)
ExtensionObjectDefinition filter = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(588) ) ;        readBuffer.closeContext("filter");


        // Simple Field (maxDataSetsToReturn)
long maxDataSetsToReturn = readBuffer.readUnsignedLong("maxDataSetsToReturn", 32) ;

        // Simple Field (maxReferencesToReturn)
long maxReferencesToReturn = readBuffer.readUnsignedLong("maxReferencesToReturn", 32) ;
        readBuffer.closeContext("QueryFirstRequest");
        // Create the instance
        return new QueryFirstRequestBuilder(requestHeader, view, noOfNodeTypes, nodeTypes, filter, maxDataSetsToReturn, maxReferencesToReturn);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, QueryFirstRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("QueryFirstRequest");

        // Simple Field (requestHeader)
        ExtensionObjectDefinition requestHeader = (ExtensionObjectDefinition) _value.getRequestHeader();
        writeBuffer.pushContext("requestHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, requestHeader);
        writeBuffer.popContext("requestHeader");

        // Simple Field (view)
        ExtensionObjectDefinition view = (ExtensionObjectDefinition) _value.getView();
        writeBuffer.pushContext("view");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, view);
        writeBuffer.popContext("view");

        // Simple Field (noOfNodeTypes)
        int noOfNodeTypes = (int) _value.getNoOfNodeTypes();
        writeBuffer.writeInt("noOfNodeTypes", 32, ((Number) (noOfNodeTypes)).intValue());

        // Array Field (nodeTypes)
        if(_value.getNodeTypes() != null) {
            writeBuffer.pushContext("nodeTypes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getNodeTypes().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getNodeTypes()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("nodeTypes", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (filter)
        ExtensionObjectDefinition filter = (ExtensionObjectDefinition) _value.getFilter();
        writeBuffer.pushContext("filter");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, filter);
        writeBuffer.popContext("filter");

        // Simple Field (maxDataSetsToReturn)
        long maxDataSetsToReturn = (long) _value.getMaxDataSetsToReturn();
        writeBuffer.writeUnsignedLong("maxDataSetsToReturn", 32, ((Number) (maxDataSetsToReturn)).longValue());

        // Simple Field (maxReferencesToReturn)
        long maxReferencesToReturn = (long) _value.getMaxReferencesToReturn();
        writeBuffer.writeUnsignedLong("maxReferencesToReturn", 32, ((Number) (maxReferencesToReturn)).longValue());
        writeBuffer.popContext("QueryFirstRequest");
    }

    public static class QueryFirstRequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition requestHeader;
        private final ExtensionObjectDefinition view;
        private final int noOfNodeTypes;
        private final ExtensionObjectDefinition[] nodeTypes;
        private final ExtensionObjectDefinition filter;
        private final long maxDataSetsToReturn;
        private final long maxReferencesToReturn;

        public QueryFirstRequestBuilder(ExtensionObjectDefinition requestHeader, ExtensionObjectDefinition view, int noOfNodeTypes, ExtensionObjectDefinition[] nodeTypes, ExtensionObjectDefinition filter, long maxDataSetsToReturn, long maxReferencesToReturn) {
            this.requestHeader = requestHeader;
            this.view = view;
            this.noOfNodeTypes = noOfNodeTypes;
            this.nodeTypes = nodeTypes;
            this.filter = filter;
            this.maxDataSetsToReturn = maxDataSetsToReturn;
            this.maxReferencesToReturn = maxReferencesToReturn;
        }

        public QueryFirstRequest build() {
            return new QueryFirstRequest(requestHeader, view, noOfNodeTypes, nodeTypes, filter, maxDataSetsToReturn, maxReferencesToReturn);
        }
    }

}
