/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class EndpointDescriptionIO implements MessageIO<EndpointDescription, EndpointDescription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EndpointDescriptionIO.class);

    @Override
    public EndpointDescription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (EndpointDescription) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, EndpointDescription value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static EndpointDescriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("EndpointDescription");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("endpointUrl");

        // Simple Field (endpointUrl)
PascalString endpointUrl = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("endpointUrl");

        readBuffer.pullContext("server");

        // Simple Field (server)
ExtensionObjectDefinition server = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(310) ) ;        readBuffer.closeContext("server");

        readBuffer.pullContext("serverCertificate");

        // Simple Field (serverCertificate)
PascalByteString serverCertificate = PascalByteStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverCertificate");

        readBuffer.pullContext("securityMode");

        // Simple Field (securityMode)
        // enum based simple field with type MessageSecurityMode
        MessageSecurityMode securityMode = MessageSecurityMode.enumForValue(readBuffer.readUnsignedLong("MessageSecurityMode", 32));
        readBuffer.closeContext("securityMode");

        readBuffer.pullContext("securityPolicyUri");

        // Simple Field (securityPolicyUri)
PascalString securityPolicyUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("securityPolicyUri");


        // Simple Field (noOfUserIdentityTokens)
int noOfUserIdentityTokens = readBuffer.readInt("noOfUserIdentityTokens", 32) ;        // Array field (userIdentityTokens)
        readBuffer.pullContext("userIdentityTokens", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfUserIdentityTokens > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfUserIdentityTokens) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] userIdentityTokens;
        {
            int itemCount = Math.max(0, (int) noOfUserIdentityTokens);
            userIdentityTokens = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
userIdentityTokens[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(306) ) ;            }
        }
            readBuffer.closeContext("userIdentityTokens", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("transportProfileUri");

        // Simple Field (transportProfileUri)
PascalString transportProfileUri = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("transportProfileUri");


        // Simple Field (securityLevel)
short securityLevel = readBuffer.readUnsignedShort("securityLevel", 8) ;
        readBuffer.closeContext("EndpointDescription");
        // Create the instance
        return new EndpointDescriptionBuilder(endpointUrl, server, serverCertificate, securityMode, securityPolicyUri, noOfUserIdentityTokens, userIdentityTokens, transportProfileUri, securityLevel);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, EndpointDescription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("EndpointDescription");

        // Simple Field (endpointUrl)
        PascalString endpointUrl = (PascalString) _value.getEndpointUrl();
        writeBuffer.pushContext("endpointUrl");
        PascalStringIO.staticSerialize(writeBuffer, endpointUrl);
        writeBuffer.popContext("endpointUrl");

        // Simple Field (server)
        ExtensionObjectDefinition server = (ExtensionObjectDefinition) _value.getServer();
        writeBuffer.pushContext("server");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, server);
        writeBuffer.popContext("server");

        // Simple Field (serverCertificate)
        PascalByteString serverCertificate = (PascalByteString) _value.getServerCertificate();
        writeBuffer.pushContext("serverCertificate");
        PascalByteStringIO.staticSerialize(writeBuffer, serverCertificate);
        writeBuffer.popContext("serverCertificate");

        // Simple Field (securityMode)
        MessageSecurityMode securityMode = (MessageSecurityMode) _value.getSecurityMode();
        writeBuffer.pushContext("securityMode");
        // enum field with type MessageSecurityMode
        writeBuffer.writeUnsignedLong("MessageSecurityMode", 32, ((Number) (securityMode.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(securityMode.name()));
        writeBuffer.popContext("securityMode");

        // Simple Field (securityPolicyUri)
        PascalString securityPolicyUri = (PascalString) _value.getSecurityPolicyUri();
        writeBuffer.pushContext("securityPolicyUri");
        PascalStringIO.staticSerialize(writeBuffer, securityPolicyUri);
        writeBuffer.popContext("securityPolicyUri");

        // Simple Field (noOfUserIdentityTokens)
        int noOfUserIdentityTokens = (int) _value.getNoOfUserIdentityTokens();
        writeBuffer.writeInt("noOfUserIdentityTokens", 32, ((Number) (noOfUserIdentityTokens)).intValue());

        // Array Field (userIdentityTokens)
        if(_value.getUserIdentityTokens() != null) {
            writeBuffer.pushContext("userIdentityTokens", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getUserIdentityTokens().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getUserIdentityTokens()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("userIdentityTokens", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (transportProfileUri)
        PascalString transportProfileUri = (PascalString) _value.getTransportProfileUri();
        writeBuffer.pushContext("transportProfileUri");
        PascalStringIO.staticSerialize(writeBuffer, transportProfileUri);
        writeBuffer.popContext("transportProfileUri");

        // Simple Field (securityLevel)
        short securityLevel = (short) _value.getSecurityLevel();
        writeBuffer.writeUnsignedShort("securityLevel", 8, ((Number) (securityLevel)).shortValue());
        writeBuffer.popContext("EndpointDescription");
    }

    public static class EndpointDescriptionBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString endpointUrl;
        private final ExtensionObjectDefinition server;
        private final PascalByteString serverCertificate;
        private final MessageSecurityMode securityMode;
        private final PascalString securityPolicyUri;
        private final int noOfUserIdentityTokens;
        private final ExtensionObjectDefinition[] userIdentityTokens;
        private final PascalString transportProfileUri;
        private final short securityLevel;

        public EndpointDescriptionBuilder(PascalString endpointUrl, ExtensionObjectDefinition server, PascalByteString serverCertificate, MessageSecurityMode securityMode, PascalString securityPolicyUri, int noOfUserIdentityTokens, ExtensionObjectDefinition[] userIdentityTokens, PascalString transportProfileUri, short securityLevel) {
            this.endpointUrl = endpointUrl;
            this.server = server;
            this.serverCertificate = serverCertificate;
            this.securityMode = securityMode;
            this.securityPolicyUri = securityPolicyUri;
            this.noOfUserIdentityTokens = noOfUserIdentityTokens;
            this.userIdentityTokens = userIdentityTokens;
            this.transportProfileUri = transportProfileUri;
            this.securityLevel = securityLevel;
        }

        public EndpointDescription build() {
            return new EndpointDescription(endpointUrl, server, serverCertificate, securityMode, securityPolicyUri, noOfUserIdentityTokens, userIdentityTokens, transportProfileUri, securityLevel);
        }
    }

}
