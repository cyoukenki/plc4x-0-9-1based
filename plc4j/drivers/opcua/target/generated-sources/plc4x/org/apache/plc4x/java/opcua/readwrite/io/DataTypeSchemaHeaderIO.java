/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataTypeSchemaHeaderIO implements MessageIO<DataTypeSchemaHeader, DataTypeSchemaHeader> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataTypeSchemaHeaderIO.class);

    @Override
    public DataTypeSchemaHeader parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DataTypeSchemaHeader) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataTypeSchemaHeader value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static DataTypeSchemaHeaderBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataTypeSchemaHeader");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (noOfNamespaces)
int noOfNamespaces = readBuffer.readInt("noOfNamespaces", 32) ;        // Array field (namespaces)
        readBuffer.pullContext("namespaces", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfNamespaces > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfNamespaces) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] namespaces;
        {
            int itemCount = Math.max(0, (int) noOfNamespaces);
            namespaces = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
namespaces[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("namespaces", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfStructureDataTypes)
int noOfStructureDataTypes = readBuffer.readInt("noOfStructureDataTypes", 32) ;        // Array field (structureDataTypes)
        readBuffer.pullContext("structureDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfStructureDataTypes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfStructureDataTypes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataTypeDescription[] structureDataTypes;
        {
            int itemCount = Math.max(0, (int) noOfStructureDataTypes);
            structureDataTypes = new DataTypeDescription[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
structureDataTypes[curItem] = DataTypeDescriptionIO.staticParse(readBuffer ) .build() ;            }
        }
            readBuffer.closeContext("structureDataTypes", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfEnumDataTypes)
int noOfEnumDataTypes = readBuffer.readInt("noOfEnumDataTypes", 32) ;        // Array field (enumDataTypes)
        readBuffer.pullContext("enumDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfEnumDataTypes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfEnumDataTypes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataTypeDescription[] enumDataTypes;
        {
            int itemCount = Math.max(0, (int) noOfEnumDataTypes);
            enumDataTypes = new DataTypeDescription[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
enumDataTypes[curItem] = DataTypeDescriptionIO.staticParse(readBuffer ) .build() ;            }
        }
            readBuffer.closeContext("enumDataTypes", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfSimpleDataTypes)
int noOfSimpleDataTypes = readBuffer.readInt("noOfSimpleDataTypes", 32) ;        // Array field (simpleDataTypes)
        readBuffer.pullContext("simpleDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfSimpleDataTypes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfSimpleDataTypes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataTypeDescription[] simpleDataTypes;
        {
            int itemCount = Math.max(0, (int) noOfSimpleDataTypes);
            simpleDataTypes = new DataTypeDescription[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
simpleDataTypes[curItem] = DataTypeDescriptionIO.staticParse(readBuffer ) .build() ;            }
        }
            readBuffer.closeContext("simpleDataTypes", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("DataTypeSchemaHeader");
        // Create the instance
        return new DataTypeSchemaHeaderBuilder(noOfNamespaces, namespaces, noOfStructureDataTypes, structureDataTypes, noOfEnumDataTypes, enumDataTypes, noOfSimpleDataTypes, simpleDataTypes);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataTypeSchemaHeader _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataTypeSchemaHeader");

        // Simple Field (noOfNamespaces)
        int noOfNamespaces = (int) _value.getNoOfNamespaces();
        writeBuffer.writeInt("noOfNamespaces", 32, ((Number) (noOfNamespaces)).intValue());

        // Array Field (namespaces)
        if(_value.getNamespaces() != null) {
            writeBuffer.pushContext("namespaces", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getNamespaces().length;
            int curItem = 0;
            for(PascalString element : _value.getNamespaces()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("namespaces", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfStructureDataTypes)
        int noOfStructureDataTypes = (int) _value.getNoOfStructureDataTypes();
        writeBuffer.writeInt("noOfStructureDataTypes", 32, ((Number) (noOfStructureDataTypes)).intValue());

        // Array Field (structureDataTypes)
        if(_value.getStructureDataTypes() != null) {
            writeBuffer.pushContext("structureDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getStructureDataTypes().length;
            int curItem = 0;
            for(DataTypeDescription element : _value.getStructureDataTypes()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataTypeDescriptionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("structureDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfEnumDataTypes)
        int noOfEnumDataTypes = (int) _value.getNoOfEnumDataTypes();
        writeBuffer.writeInt("noOfEnumDataTypes", 32, ((Number) (noOfEnumDataTypes)).intValue());

        // Array Field (enumDataTypes)
        if(_value.getEnumDataTypes() != null) {
            writeBuffer.pushContext("enumDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getEnumDataTypes().length;
            int curItem = 0;
            for(DataTypeDescription element : _value.getEnumDataTypes()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataTypeDescriptionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("enumDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfSimpleDataTypes)
        int noOfSimpleDataTypes = (int) _value.getNoOfSimpleDataTypes();
        writeBuffer.writeInt("noOfSimpleDataTypes", 32, ((Number) (noOfSimpleDataTypes)).intValue());

        // Array Field (simpleDataTypes)
        if(_value.getSimpleDataTypes() != null) {
            writeBuffer.pushContext("simpleDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getSimpleDataTypes().length;
            int curItem = 0;
            for(DataTypeDescription element : _value.getSimpleDataTypes()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataTypeDescriptionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("simpleDataTypes", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("DataTypeSchemaHeader");
    }

    public static class DataTypeSchemaHeaderBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final int noOfNamespaces;
        private final PascalString[] namespaces;
        private final int noOfStructureDataTypes;
        private final DataTypeDescription[] structureDataTypes;
        private final int noOfEnumDataTypes;
        private final DataTypeDescription[] enumDataTypes;
        private final int noOfSimpleDataTypes;
        private final DataTypeDescription[] simpleDataTypes;

        public DataTypeSchemaHeaderBuilder(int noOfNamespaces, PascalString[] namespaces, int noOfStructureDataTypes, DataTypeDescription[] structureDataTypes, int noOfEnumDataTypes, DataTypeDescription[] enumDataTypes, int noOfSimpleDataTypes, DataTypeDescription[] simpleDataTypes) {
            this.noOfNamespaces = noOfNamespaces;
            this.namespaces = namespaces;
            this.noOfStructureDataTypes = noOfStructureDataTypes;
            this.structureDataTypes = structureDataTypes;
            this.noOfEnumDataTypes = noOfEnumDataTypes;
            this.enumDataTypes = enumDataTypes;
            this.noOfSimpleDataTypes = noOfSimpleDataTypes;
            this.simpleDataTypes = simpleDataTypes;
        }

        public DataTypeSchemaHeader build() {
            return new DataTypeSchemaHeader(noOfNamespaces, namespaces, noOfStructureDataTypes, structureDataTypes, noOfEnumDataTypes, enumDataTypes, noOfSimpleDataTypes, simpleDataTypes);
        }
    }

}
