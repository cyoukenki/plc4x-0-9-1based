/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AddNodesRequestIO implements MessageIO<AddNodesRequest, AddNodesRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddNodesRequestIO.class);

    @Override
    public AddNodesRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (AddNodesRequest) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AddNodesRequest value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static AddNodesRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AddNodesRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("requestHeader");

        // Simple Field (requestHeader)
ExtensionObjectDefinition requestHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(391) ) ;        readBuffer.closeContext("requestHeader");


        // Simple Field (noOfNodesToAdd)
int noOfNodesToAdd = readBuffer.readInt("noOfNodesToAdd", 32) ;        // Array field (nodesToAdd)
        readBuffer.pullContext("nodesToAdd", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfNodesToAdd > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfNodesToAdd) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] nodesToAdd;
        {
            int itemCount = Math.max(0, (int) noOfNodesToAdd);
            nodesToAdd = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
nodesToAdd[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(378) ) ;            }
        }
            readBuffer.closeContext("nodesToAdd", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("AddNodesRequest");
        // Create the instance
        return new AddNodesRequestBuilder(requestHeader, noOfNodesToAdd, nodesToAdd);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AddNodesRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AddNodesRequest");

        // Simple Field (requestHeader)
        ExtensionObjectDefinition requestHeader = (ExtensionObjectDefinition) _value.getRequestHeader();
        writeBuffer.pushContext("requestHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, requestHeader);
        writeBuffer.popContext("requestHeader");

        // Simple Field (noOfNodesToAdd)
        int noOfNodesToAdd = (int) _value.getNoOfNodesToAdd();
        writeBuffer.writeInt("noOfNodesToAdd", 32, ((Number) (noOfNodesToAdd)).intValue());

        // Array Field (nodesToAdd)
        if(_value.getNodesToAdd() != null) {
            writeBuffer.pushContext("nodesToAdd", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getNodesToAdd().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getNodesToAdd()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("nodesToAdd", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("AddNodesRequest");
    }

    public static class AddNodesRequestBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition requestHeader;
        private final int noOfNodesToAdd;
        private final ExtensionObjectDefinition[] nodesToAdd;

        public AddNodesRequestBuilder(ExtensionObjectDefinition requestHeader, int noOfNodesToAdd, ExtensionObjectDefinition[] nodesToAdd) {
            this.requestHeader = requestHeader;
            this.noOfNodesToAdd = noOfNodesToAdd;
            this.nodesToAdd = nodesToAdd;
        }

        public AddNodesRequest build() {
            return new AddNodesRequest(requestHeader, noOfNodesToAdd, nodesToAdd);
        }
    }

}
