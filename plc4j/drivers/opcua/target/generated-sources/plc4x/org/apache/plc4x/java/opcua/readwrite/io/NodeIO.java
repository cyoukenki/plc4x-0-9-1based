/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class NodeIO implements MessageIO<Node, Node> {

    private static final Logger LOGGER = LoggerFactory.getLogger(NodeIO.class);

    @Override
    public Node parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Node) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Node value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static NodeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Node");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("nodeId");

        // Simple Field (nodeId)
NodeId nodeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("nodeId");

        readBuffer.pullContext("nodeClass");

        // Simple Field (nodeClass)
        // enum based simple field with type NodeClass
        NodeClass nodeClass = NodeClass.enumForValue(readBuffer.readUnsignedLong("NodeClass", 32));
        readBuffer.closeContext("nodeClass");

        readBuffer.pullContext("browseName");

        // Simple Field (browseName)
QualifiedName browseName = QualifiedNameIO.staticParse(readBuffer ) ;        readBuffer.closeContext("browseName");

        readBuffer.pullContext("displayName");

        // Simple Field (displayName)
LocalizedText displayName = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("displayName");

        readBuffer.pullContext("description");

        // Simple Field (description)
LocalizedText description = LocalizedTextIO.staticParse(readBuffer ) ;        readBuffer.closeContext("description");


        // Simple Field (writeMask)
long writeMask = readBuffer.readUnsignedLong("writeMask", 32) ;

        // Simple Field (userWriteMask)
long userWriteMask = readBuffer.readUnsignedLong("userWriteMask", 32) ;

        // Simple Field (noOfRolePermissions)
int noOfRolePermissions = readBuffer.readInt("noOfRolePermissions", 32) ;        // Array field (rolePermissions)
        readBuffer.pullContext("rolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfRolePermissions > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfRolePermissions) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] rolePermissions;
        {
            int itemCount = Math.max(0, (int) noOfRolePermissions);
            rolePermissions = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
rolePermissions[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(98) ) ;            }
        }
            readBuffer.closeContext("rolePermissions", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfUserRolePermissions)
int noOfUserRolePermissions = readBuffer.readInt("noOfUserRolePermissions", 32) ;        // Array field (userRolePermissions)
        readBuffer.pullContext("userRolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfUserRolePermissions > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfUserRolePermissions) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] userRolePermissions;
        {
            int itemCount = Math.max(0, (int) noOfUserRolePermissions);
            userRolePermissions = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
userRolePermissions[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(98) ) ;            }
        }
            readBuffer.closeContext("userRolePermissions", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (accessRestrictions)
int accessRestrictions = readBuffer.readUnsignedInt("accessRestrictions", 16) ;

        // Simple Field (noOfReferences)
int noOfReferences = readBuffer.readInt("noOfReferences", 32) ;        // Array field (references)
        readBuffer.pullContext("references", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfReferences > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfReferences) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] references;
        {
            int itemCount = Math.max(0, (int) noOfReferences);
            references = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
references[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(287) ) ;            }
        }
            readBuffer.closeContext("references", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Node");
        // Create the instance
        return new NodeBuilder(nodeId, nodeClass, browseName, displayName, description, writeMask, userWriteMask, noOfRolePermissions, rolePermissions, noOfUserRolePermissions, userRolePermissions, accessRestrictions, noOfReferences, references);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Node _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Node");

        // Simple Field (nodeId)
        NodeId nodeId = (NodeId) _value.getNodeId();
        writeBuffer.pushContext("nodeId");
        NodeIdIO.staticSerialize(writeBuffer, nodeId);
        writeBuffer.popContext("nodeId");

        // Simple Field (nodeClass)
        NodeClass nodeClass = (NodeClass) _value.getNodeClass();
        writeBuffer.pushContext("nodeClass");
        // enum field with type NodeClass
        writeBuffer.writeUnsignedLong("NodeClass", 32, ((Number) (nodeClass.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(nodeClass.name()));
        writeBuffer.popContext("nodeClass");

        // Simple Field (browseName)
        QualifiedName browseName = (QualifiedName) _value.getBrowseName();
        writeBuffer.pushContext("browseName");
        QualifiedNameIO.staticSerialize(writeBuffer, browseName);
        writeBuffer.popContext("browseName");

        // Simple Field (displayName)
        LocalizedText displayName = (LocalizedText) _value.getDisplayName();
        writeBuffer.pushContext("displayName");
        LocalizedTextIO.staticSerialize(writeBuffer, displayName);
        writeBuffer.popContext("displayName");

        // Simple Field (description)
        LocalizedText description = (LocalizedText) _value.getDescription();
        writeBuffer.pushContext("description");
        LocalizedTextIO.staticSerialize(writeBuffer, description);
        writeBuffer.popContext("description");

        // Simple Field (writeMask)
        long writeMask = (long) _value.getWriteMask();
        writeBuffer.writeUnsignedLong("writeMask", 32, ((Number) (writeMask)).longValue());

        // Simple Field (userWriteMask)
        long userWriteMask = (long) _value.getUserWriteMask();
        writeBuffer.writeUnsignedLong("userWriteMask", 32, ((Number) (userWriteMask)).longValue());

        // Simple Field (noOfRolePermissions)
        int noOfRolePermissions = (int) _value.getNoOfRolePermissions();
        writeBuffer.writeInt("noOfRolePermissions", 32, ((Number) (noOfRolePermissions)).intValue());

        // Array Field (rolePermissions)
        if(_value.getRolePermissions() != null) {
            writeBuffer.pushContext("rolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getRolePermissions().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getRolePermissions()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("rolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfUserRolePermissions)
        int noOfUserRolePermissions = (int) _value.getNoOfUserRolePermissions();
        writeBuffer.writeInt("noOfUserRolePermissions", 32, ((Number) (noOfUserRolePermissions)).intValue());

        // Array Field (userRolePermissions)
        if(_value.getUserRolePermissions() != null) {
            writeBuffer.pushContext("userRolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getUserRolePermissions().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getUserRolePermissions()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("userRolePermissions", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (accessRestrictions)
        int accessRestrictions = (int) _value.getAccessRestrictions();
        writeBuffer.writeUnsignedInt("accessRestrictions", 16, ((Number) (accessRestrictions)).intValue());

        // Simple Field (noOfReferences)
        int noOfReferences = (int) _value.getNoOfReferences();
        writeBuffer.writeInt("noOfReferences", 32, ((Number) (noOfReferences)).intValue());

        // Array Field (references)
        if(_value.getReferences() != null) {
            writeBuffer.pushContext("references", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getReferences().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getReferences()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("references", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Node");
    }

    public static class NodeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId nodeId;
        private final NodeClass nodeClass;
        private final QualifiedName browseName;
        private final LocalizedText displayName;
        private final LocalizedText description;
        private final long writeMask;
        private final long userWriteMask;
        private final int noOfRolePermissions;
        private final ExtensionObjectDefinition[] rolePermissions;
        private final int noOfUserRolePermissions;
        private final ExtensionObjectDefinition[] userRolePermissions;
        private final int accessRestrictions;
        private final int noOfReferences;
        private final ExtensionObjectDefinition[] references;

        public NodeBuilder(NodeId nodeId, NodeClass nodeClass, QualifiedName browseName, LocalizedText displayName, LocalizedText description, long writeMask, long userWriteMask, int noOfRolePermissions, ExtensionObjectDefinition[] rolePermissions, int noOfUserRolePermissions, ExtensionObjectDefinition[] userRolePermissions, int accessRestrictions, int noOfReferences, ExtensionObjectDefinition[] references) {
            this.nodeId = nodeId;
            this.nodeClass = nodeClass;
            this.browseName = browseName;
            this.displayName = displayName;
            this.description = description;
            this.writeMask = writeMask;
            this.userWriteMask = userWriteMask;
            this.noOfRolePermissions = noOfRolePermissions;
            this.rolePermissions = rolePermissions;
            this.noOfUserRolePermissions = noOfUserRolePermissions;
            this.userRolePermissions = userRolePermissions;
            this.accessRestrictions = accessRestrictions;
            this.noOfReferences = noOfReferences;
            this.references = references;
        }

        public Node build() {
            return new Node(nodeId, nodeClass, browseName, displayName, description, writeMask, userWriteMask, noOfRolePermissions, rolePermissions, noOfUserRolePermissions, userRolePermissions, accessRestrictions, noOfReferences, references);
        }
    }

}
