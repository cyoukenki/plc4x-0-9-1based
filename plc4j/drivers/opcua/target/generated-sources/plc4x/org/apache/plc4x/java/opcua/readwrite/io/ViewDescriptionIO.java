/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ViewDescriptionIO implements MessageIO<ViewDescription, ViewDescription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewDescriptionIO.class);

    @Override
    public ViewDescription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ViewDescription) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ViewDescription value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ViewDescriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ViewDescription");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("viewId");

        // Simple Field (viewId)
NodeId viewId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("viewId");


        // Simple Field (timestamp)
long timestamp = readBuffer.readLong("timestamp", 64) ;

        // Simple Field (viewVersion)
long viewVersion = readBuffer.readUnsignedLong("viewVersion", 32) ;
        readBuffer.closeContext("ViewDescription");
        // Create the instance
        return new ViewDescriptionBuilder(viewId, timestamp, viewVersion);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ViewDescription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ViewDescription");

        // Simple Field (viewId)
        NodeId viewId = (NodeId) _value.getViewId();
        writeBuffer.pushContext("viewId");
        NodeIdIO.staticSerialize(writeBuffer, viewId);
        writeBuffer.popContext("viewId");

        // Simple Field (timestamp)
        long timestamp = (long) _value.getTimestamp();
        writeBuffer.writeLong("timestamp", 64, ((Number) (timestamp)).longValue());

        // Simple Field (viewVersion)
        long viewVersion = (long) _value.getViewVersion();
        writeBuffer.writeUnsignedLong("viewVersion", 32, ((Number) (viewVersion)).longValue());
        writeBuffer.popContext("ViewDescription");
    }

    public static class ViewDescriptionBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId viewId;
        private final long timestamp;
        private final long viewVersion;

        public ViewDescriptionBuilder(NodeId viewId, long timestamp, long viewVersion) {
            this.viewId = viewId;
            this.timestamp = timestamp;
            this.viewVersion = viewVersion;
        }

        public ViewDescription build() {
            return new ViewDescription(viewId, timestamp, viewVersion);
        }
    }

}
