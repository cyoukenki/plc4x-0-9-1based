/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum NodeAttributesMask {

    nodeAttributesMaskNone((long) 0),
    nodeAttributesMaskAccessLevel((long) 1),
    nodeAttributesMaskArrayDimensions((long) 2),
    nodeAttributesMaskBrowseName((long) 4),
    nodeAttributesMaskContainsNoLoops((long) 8),
    nodeAttributesMaskDataType((long) 16),
    nodeAttributesMaskDescription((long) 32),
    nodeAttributesMaskDisplayName((long) 64),
    nodeAttributesMaskEventNotifier((long) 128),
    nodeAttributesMaskExecutable((long) 256),
    nodeAttributesMaskHistorizing((long) 512),
    nodeAttributesMaskInverseName((long) 1024),
    nodeAttributesMaskIsAbstract((long) 2048),
    nodeAttributesMaskMinimumSamplingInterval((long) 4096),
    nodeAttributesMaskNodeClass((long) 8192),
    nodeAttributesMaskNodeId((long) 16384),
    nodeAttributesMaskSymmetric((long) 32768),
    nodeAttributesMaskUserAccessLevel((long) 65536),
    nodeAttributesMaskUserExecutable((long) 131072),
    nodeAttributesMaskUserWriteMask((long) 262144),
    nodeAttributesMaskValueRank((long) 524288),
    nodeAttributesMaskWriteMask((long) 1048576),
    nodeAttributesMaskValue((long) 2097152),
    nodeAttributesMaskDataTypeDefinition((long) 4194304),
    nodeAttributesMaskRolePermissions((long) 8388608),
    nodeAttributesMaskAccessRestrictions((long) 16777216),
    nodeAttributesMaskAll((long) 33554431),
    nodeAttributesMaskBaseNode((long) 26501220),
    nodeAttributesMaskObject((long) 26501348),
    nodeAttributesMaskObjectType((long) 26503268),
    nodeAttributesMaskVariable((long) 26571383),
    nodeAttributesMaskVariableType((long) 28600438),
    nodeAttributesMaskMethod((long) 26632548),
    nodeAttributesMaskReferenceType((long) 26537060),
    nodeAttributesMaskView((long) 26501356);

    private static final Logger logger = LoggerFactory.getLogger(NodeAttributesMask.class);

    private static final Map<Long, NodeAttributesMask> map;
    static {
        map = new HashMap<>();
        for (NodeAttributesMask value : NodeAttributesMask.values()) {
            map.put((long) value.getValue(), value);
        }
    }

    private long value;

    NodeAttributesMask(long value) {
        this.value = value;
    }

    public long getValue() {
        return value;
    }

    public static NodeAttributesMask enumForValue(long value) {
        if (!map.containsKey(value)) {
            logger.error("No NodeAttributesMask for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(long value) {
        return map.containsKey(value);
    }

}
