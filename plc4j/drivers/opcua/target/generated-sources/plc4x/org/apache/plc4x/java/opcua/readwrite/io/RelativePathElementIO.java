/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class RelativePathElementIO implements MessageIO<RelativePathElement, RelativePathElement> {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelativePathElementIO.class);

    @Override
    public RelativePathElement parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (RelativePathElement) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, RelativePathElement value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static RelativePathElementBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("RelativePathElement");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("referenceTypeId");

        // Simple Field (referenceTypeId)
NodeId referenceTypeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("referenceTypeId");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 6);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (includeSubtypes)
boolean includeSubtypes = readBuffer.readBit("includeSubtypes") ;

        // Simple Field (isInverse)
boolean isInverse = readBuffer.readBit("isInverse") ;
        readBuffer.pullContext("targetName");

        // Simple Field (targetName)
QualifiedName targetName = QualifiedNameIO.staticParse(readBuffer ) ;        readBuffer.closeContext("targetName");

        readBuffer.closeContext("RelativePathElement");
        // Create the instance
        return new RelativePathElementBuilder(referenceTypeId, includeSubtypes, isInverse, targetName);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, RelativePathElement _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("RelativePathElement");

        // Simple Field (referenceTypeId)
        NodeId referenceTypeId = (NodeId) _value.getReferenceTypeId();
        writeBuffer.pushContext("referenceTypeId");
        NodeIdIO.staticSerialize(writeBuffer, referenceTypeId);
        writeBuffer.popContext("referenceTypeId");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 6, ((Number) (short) 0x00).shortValue());

        // Simple Field (includeSubtypes)
        boolean includeSubtypes = (boolean) _value.getIncludeSubtypes();
        writeBuffer.writeBit("includeSubtypes", (boolean) (includeSubtypes));

        // Simple Field (isInverse)
        boolean isInverse = (boolean) _value.getIsInverse();
        writeBuffer.writeBit("isInverse", (boolean) (isInverse));

        // Simple Field (targetName)
        QualifiedName targetName = (QualifiedName) _value.getTargetName();
        writeBuffer.pushContext("targetName");
        QualifiedNameIO.staticSerialize(writeBuffer, targetName);
        writeBuffer.popContext("targetName");
        writeBuffer.popContext("RelativePathElement");
    }

    public static class RelativePathElementBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId referenceTypeId;
        private final boolean includeSubtypes;
        private final boolean isInverse;
        private final QualifiedName targetName;

        public RelativePathElementBuilder(NodeId referenceTypeId, boolean includeSubtypes, boolean isInverse, QualifiedName targetName) {
            this.referenceTypeId = referenceTypeId;
            this.includeSubtypes = includeSubtypes;
            this.isInverse = isInverse;
            this.targetName = targetName;
        }

        public RelativePathElement build() {
            return new RelativePathElement(referenceTypeId, includeSubtypes, isInverse, targetName);
        }
    }

}
