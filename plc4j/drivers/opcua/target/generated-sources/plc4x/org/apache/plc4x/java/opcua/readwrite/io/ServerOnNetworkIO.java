/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ServerOnNetworkIO implements MessageIO<ServerOnNetwork, ServerOnNetwork> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnNetworkIO.class);

    @Override
    public ServerOnNetwork parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ServerOnNetwork) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ServerOnNetwork value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ServerOnNetworkBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ServerOnNetwork");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (recordId)
long recordId = readBuffer.readUnsignedLong("recordId", 32) ;
        readBuffer.pullContext("serverName");

        // Simple Field (serverName)
PascalString serverName = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverName");

        readBuffer.pullContext("discoveryUrl");

        // Simple Field (discoveryUrl)
PascalString discoveryUrl = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("discoveryUrl");


        // Simple Field (noOfServerCapabilities)
int noOfServerCapabilities = readBuffer.readInt("noOfServerCapabilities", 32) ;        // Array field (serverCapabilities)
        readBuffer.pullContext("serverCapabilities", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfServerCapabilities > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfServerCapabilities) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] serverCapabilities;
        {
            int itemCount = Math.max(0, (int) noOfServerCapabilities);
            serverCapabilities = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
serverCapabilities[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("serverCapabilities", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ServerOnNetwork");
        // Create the instance
        return new ServerOnNetworkBuilder(recordId, serverName, discoveryUrl, noOfServerCapabilities, serverCapabilities);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ServerOnNetwork _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ServerOnNetwork");

        // Simple Field (recordId)
        long recordId = (long) _value.getRecordId();
        writeBuffer.writeUnsignedLong("recordId", 32, ((Number) (recordId)).longValue());

        // Simple Field (serverName)
        PascalString serverName = (PascalString) _value.getServerName();
        writeBuffer.pushContext("serverName");
        PascalStringIO.staticSerialize(writeBuffer, serverName);
        writeBuffer.popContext("serverName");

        // Simple Field (discoveryUrl)
        PascalString discoveryUrl = (PascalString) _value.getDiscoveryUrl();
        writeBuffer.pushContext("discoveryUrl");
        PascalStringIO.staticSerialize(writeBuffer, discoveryUrl);
        writeBuffer.popContext("discoveryUrl");

        // Simple Field (noOfServerCapabilities)
        int noOfServerCapabilities = (int) _value.getNoOfServerCapabilities();
        writeBuffer.writeInt("noOfServerCapabilities", 32, ((Number) (noOfServerCapabilities)).intValue());

        // Array Field (serverCapabilities)
        if(_value.getServerCapabilities() != null) {
            writeBuffer.pushContext("serverCapabilities", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServerCapabilities().length;
            int curItem = 0;
            for(PascalString element : _value.getServerCapabilities()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("serverCapabilities", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ServerOnNetwork");
    }

    public static class ServerOnNetworkBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long recordId;
        private final PascalString serverName;
        private final PascalString discoveryUrl;
        private final int noOfServerCapabilities;
        private final PascalString[] serverCapabilities;

        public ServerOnNetworkBuilder(long recordId, PascalString serverName, PascalString discoveryUrl, int noOfServerCapabilities, PascalString[] serverCapabilities) {
            this.recordId = recordId;
            this.serverName = serverName;
            this.discoveryUrl = discoveryUrl;
            this.noOfServerCapabilities = noOfServerCapabilities;
            this.serverCapabilities = serverCapabilities;
        }

        public ServerOnNetwork build() {
            return new ServerOnNetwork(recordId, serverName, discoveryUrl, noOfServerCapabilities, serverCapabilities);
        }
    }

}
