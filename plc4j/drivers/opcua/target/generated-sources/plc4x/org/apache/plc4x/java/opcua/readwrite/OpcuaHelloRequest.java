/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class OpcuaHelloRequest extends MessagePDU implements Message {

    // Accessors for discriminator values.
    public String getMessageType() {
        return "HEL";
    }
    public Boolean getResponse() {
        return false;
    }

    // Properties.
    private final String chunk;
    private final int version;
    private final int receiveBufferSize;
    private final int sendBufferSize;
    private final int maxMessageSize;
    private final int maxChunkCount;
    private final PascalString endpoint;

    public OpcuaHelloRequest(String chunk, int version, int receiveBufferSize, int sendBufferSize, int maxMessageSize, int maxChunkCount, PascalString endpoint) {
        this.chunk = chunk;
        this.version = version;
        this.receiveBufferSize = receiveBufferSize;
        this.sendBufferSize = sendBufferSize;
        this.maxMessageSize = maxMessageSize;
        this.maxChunkCount = maxChunkCount;
        this.endpoint = endpoint;
    }

    public String getChunk() {
        return chunk;
    }

    public int getVersion() {
        return version;
    }

    public int getReceiveBufferSize() {
        return receiveBufferSize;
    }

    public int getSendBufferSize() {
        return sendBufferSize;
    }

    public int getMaxMessageSize() {
        return maxMessageSize;
    }

    public int getMaxChunkCount() {
        return maxChunkCount;
    }

    public PascalString getEndpoint() {
        return endpoint;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        OpcuaHelloRequest _value  = this;

        // Simple field (chunk)
        lengthInBits += 8;

        // Implicit Field (messageSize)
        lengthInBits += 32;
        //int messageSize = (int) (_value.getLengthInBytes());

        // Simple field (version)
        lengthInBits += 32;

        // Simple field (receiveBufferSize)
        lengthInBits += 32;

        // Simple field (sendBufferSize)
        lengthInBits += 32;

        // Simple field (maxMessageSize)
        lengthInBits += 32;

        // Simple field (maxChunkCount)
        lengthInBits += 32;

        // Simple field (endpoint)
        lengthInBits += endpoint.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<MessagePDU, MessagePDU> getMessageIO() {
        return new MessagePDUIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof OpcuaHelloRequest)) {
            return false;
        }
        OpcuaHelloRequest that = (OpcuaHelloRequest) o;
        return
            (getChunk() == that.getChunk()) &&
            (getVersion() == that.getVersion()) &&
            (getReceiveBufferSize() == that.getReceiveBufferSize()) &&
            (getSendBufferSize() == that.getSendBufferSize()) &&
            (getMaxMessageSize() == that.getMaxMessageSize()) &&
            (getMaxChunkCount() == that.getMaxChunkCount()) &&
            (getEndpoint() == that.getEndpoint()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getChunk(),
            getVersion(),
            getReceiveBufferSize(),
            getSendBufferSize(),
            getMaxMessageSize(),
            getMaxChunkCount(),
            getEndpoint()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("chunk", getChunk())
            .append("version", getVersion())
            .append("receiveBufferSize", getReceiveBufferSize())
            .append("sendBufferSize", getSendBufferSize())
            .append("maxMessageSize", getMaxMessageSize())
            .append("maxChunkCount", getMaxChunkCount())
            .append("endpoint", getEndpoint())
            .toString();
    }

}
