/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class BrowseDescriptionIO implements MessageIO<BrowseDescription, BrowseDescription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrowseDescriptionIO.class);

    @Override
    public BrowseDescription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (BrowseDescription) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, BrowseDescription value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static BrowseDescriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("BrowseDescription");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("nodeId");

        // Simple Field (nodeId)
NodeId nodeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("nodeId");

        readBuffer.pullContext("browseDirection");

        // Simple Field (browseDirection)
        // enum based simple field with type BrowseDirection
        BrowseDirection browseDirection = BrowseDirection.enumForValue(readBuffer.readUnsignedLong("BrowseDirection", 32));
        readBuffer.closeContext("browseDirection");

        readBuffer.pullContext("referenceTypeId");

        // Simple Field (referenceTypeId)
NodeId referenceTypeId = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("referenceTypeId");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (includeSubtypes)
boolean includeSubtypes = readBuffer.readBit("includeSubtypes") ;

        // Simple Field (nodeClassMask)
long nodeClassMask = readBuffer.readUnsignedLong("nodeClassMask", 32) ;

        // Simple Field (resultMask)
long resultMask = readBuffer.readUnsignedLong("resultMask", 32) ;
        readBuffer.closeContext("BrowseDescription");
        // Create the instance
        return new BrowseDescriptionBuilder(nodeId, browseDirection, referenceTypeId, includeSubtypes, nodeClassMask, resultMask);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, BrowseDescription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("BrowseDescription");

        // Simple Field (nodeId)
        NodeId nodeId = (NodeId) _value.getNodeId();
        writeBuffer.pushContext("nodeId");
        NodeIdIO.staticSerialize(writeBuffer, nodeId);
        writeBuffer.popContext("nodeId");

        // Simple Field (browseDirection)
        BrowseDirection browseDirection = (BrowseDirection) _value.getBrowseDirection();
        writeBuffer.pushContext("browseDirection");
        // enum field with type BrowseDirection
        writeBuffer.writeUnsignedLong("BrowseDirection", 32, ((Number) (browseDirection.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(browseDirection.name()));
        writeBuffer.popContext("browseDirection");

        // Simple Field (referenceTypeId)
        NodeId referenceTypeId = (NodeId) _value.getReferenceTypeId();
        writeBuffer.pushContext("referenceTypeId");
        NodeIdIO.staticSerialize(writeBuffer, referenceTypeId);
        writeBuffer.popContext("referenceTypeId");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (includeSubtypes)
        boolean includeSubtypes = (boolean) _value.getIncludeSubtypes();
        writeBuffer.writeBit("includeSubtypes", (boolean) (includeSubtypes));

        // Simple Field (nodeClassMask)
        long nodeClassMask = (long) _value.getNodeClassMask();
        writeBuffer.writeUnsignedLong("nodeClassMask", 32, ((Number) (nodeClassMask)).longValue());

        // Simple Field (resultMask)
        long resultMask = (long) _value.getResultMask();
        writeBuffer.writeUnsignedLong("resultMask", 32, ((Number) (resultMask)).longValue());
        writeBuffer.popContext("BrowseDescription");
    }

    public static class BrowseDescriptionBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId nodeId;
        private final BrowseDirection browseDirection;
        private final NodeId referenceTypeId;
        private final boolean includeSubtypes;
        private final long nodeClassMask;
        private final long resultMask;

        public BrowseDescriptionBuilder(NodeId nodeId, BrowseDirection browseDirection, NodeId referenceTypeId, boolean includeSubtypes, long nodeClassMask, long resultMask) {
            this.nodeId = nodeId;
            this.browseDirection = browseDirection;
            this.referenceTypeId = referenceTypeId;
            this.includeSubtypes = includeSubtypes;
            this.nodeClassMask = nodeClassMask;
            this.resultMask = resultMask;
        }

        public BrowseDescription build() {
            return new BrowseDescription(nodeId, browseDirection, referenceTypeId, includeSubtypes, nodeClassMask, resultMask);
        }
    }

}
