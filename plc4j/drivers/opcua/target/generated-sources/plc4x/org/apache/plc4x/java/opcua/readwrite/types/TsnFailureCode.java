/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum TsnFailureCode {

    tsnFailureCodeNoFailure((long) 0),
    tsnFailureCodeInsufficientBandwidth((long) 1),
    tsnFailureCodeInsufficientResources((long) 2),
    tsnFailureCodeInsufficientTrafficClassBandwidth((long) 3),
    tsnFailureCodeStreamIdInUse((long) 4),
    tsnFailureCodeStreamDestinationAddressInUse((long) 5),
    tsnFailureCodeStreamPreemptedByHigherRank((long) 6),
    tsnFailureCodeLatencyHasChanged((long) 7),
    tsnFailureCodeEgressPortNotAvbCapable((long) 8),
    tsnFailureCodeUseDifferentDestinationAddress((long) 9),
    tsnFailureCodeOutOfMsrpResources((long) 10),
    tsnFailureCodeOutOfMmrpResources((long) 11),
    tsnFailureCodeCannotStoreDestinationAddress((long) 12),
    tsnFailureCodePriorityIsNotAnSrcClass((long) 13),
    tsnFailureCodeMaxFrameSizeTooLarge((long) 14),
    tsnFailureCodeMaxFanInPortsLimitReached((long) 15),
    tsnFailureCodeFirstValueChangedForStreamId((long) 16),
    tsnFailureCodeVlanBlockedOnEgress((long) 17),
    tsnFailureCodeVlanTaggingDisabledOnEgress((long) 18),
    tsnFailureCodeSrClassPriorityMismatch((long) 19),
    tsnFailureCodeFeatureNotPropagated((long) 20),
    tsnFailureCodeMaxLatencyExceeded((long) 21),
    tsnFailureCodeBridgeDoesNotProvideNetworkId((long) 22),
    tsnFailureCodeStreamTransformNotSupported((long) 23),
    tsnFailureCodeStreamIdTypeNotSupported((long) 24),
    tsnFailureCodeFeatureNotSupported((long) 25);

    private static final Logger logger = LoggerFactory.getLogger(TsnFailureCode.class);

    private static final Map<Long, TsnFailureCode> map;
    static {
        map = new HashMap<>();
        for (TsnFailureCode value : TsnFailureCode.values()) {
            map.put((long) value.getValue(), value);
        }
    }

    private long value;

    TsnFailureCode(long value) {
        this.value = value;
    }

    public long getValue() {
        return value;
    }

    public static TsnFailureCode enumForValue(long value) {
        if (!map.containsKey(value)) {
            logger.error("No TsnFailureCode for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(long value) {
        return map.containsKey(value);
    }

}
