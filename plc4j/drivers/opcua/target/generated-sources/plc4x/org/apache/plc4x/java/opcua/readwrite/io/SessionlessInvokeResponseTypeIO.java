/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SessionlessInvokeResponseTypeIO implements MessageIO<SessionlessInvokeResponseType, SessionlessInvokeResponseType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionlessInvokeResponseTypeIO.class);

    @Override
    public SessionlessInvokeResponseType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SessionlessInvokeResponseType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SessionlessInvokeResponseType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static SessionlessInvokeResponseTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SessionlessInvokeResponseType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (noOfNamespaceUris)
int noOfNamespaceUris = readBuffer.readInt("noOfNamespaceUris", 32) ;        // Array field (namespaceUris)
        readBuffer.pullContext("namespaceUris", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfNamespaceUris > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfNamespaceUris) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] namespaceUris;
        {
            int itemCount = Math.max(0, (int) noOfNamespaceUris);
            namespaceUris = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
namespaceUris[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("namespaceUris", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfServerUris)
int noOfServerUris = readBuffer.readInt("noOfServerUris", 32) ;        // Array field (serverUris)
        readBuffer.pullContext("serverUris", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfServerUris > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfServerUris) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] serverUris;
        {
            int itemCount = Math.max(0, (int) noOfServerUris);
            serverUris = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
serverUris[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("serverUris", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (serviceId)
long serviceId = readBuffer.readUnsignedLong("serviceId", 32) ;
        readBuffer.closeContext("SessionlessInvokeResponseType");
        // Create the instance
        return new SessionlessInvokeResponseTypeBuilder(noOfNamespaceUris, namespaceUris, noOfServerUris, serverUris, serviceId);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SessionlessInvokeResponseType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SessionlessInvokeResponseType");

        // Simple Field (noOfNamespaceUris)
        int noOfNamespaceUris = (int) _value.getNoOfNamespaceUris();
        writeBuffer.writeInt("noOfNamespaceUris", 32, ((Number) (noOfNamespaceUris)).intValue());

        // Array Field (namespaceUris)
        if(_value.getNamespaceUris() != null) {
            writeBuffer.pushContext("namespaceUris", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getNamespaceUris().length;
            int curItem = 0;
            for(PascalString element : _value.getNamespaceUris()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("namespaceUris", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfServerUris)
        int noOfServerUris = (int) _value.getNoOfServerUris();
        writeBuffer.writeInt("noOfServerUris", 32, ((Number) (noOfServerUris)).intValue());

        // Array Field (serverUris)
        if(_value.getServerUris() != null) {
            writeBuffer.pushContext("serverUris", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServerUris().length;
            int curItem = 0;
            for(PascalString element : _value.getServerUris()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("serverUris", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (serviceId)
        long serviceId = (long) _value.getServiceId();
        writeBuffer.writeUnsignedLong("serviceId", 32, ((Number) (serviceId)).longValue());
        writeBuffer.popContext("SessionlessInvokeResponseType");
    }

    public static class SessionlessInvokeResponseTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final int noOfNamespaceUris;
        private final PascalString[] namespaceUris;
        private final int noOfServerUris;
        private final PascalString[] serverUris;
        private final long serviceId;

        public SessionlessInvokeResponseTypeBuilder(int noOfNamespaceUris, PascalString[] namespaceUris, int noOfServerUris, PascalString[] serverUris, long serviceId) {
            this.noOfNamespaceUris = noOfNamespaceUris;
            this.namespaceUris = namespaceUris;
            this.noOfServerUris = noOfServerUris;
            this.serverUris = serverUris;
            this.serviceId = serviceId;
        }

        public SessionlessInvokeResponseType build() {
            return new SessionlessInvokeResponseType(noOfNamespaceUris, namespaceUris, noOfServerUris, serverUris, serviceId);
        }
    }

}
