/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PublishedVariableDataTypeIO implements MessageIO<PublishedVariableDataType, PublishedVariableDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PublishedVariableDataTypeIO.class);

    @Override
    public PublishedVariableDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PublishedVariableDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PublishedVariableDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static PublishedVariableDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PublishedVariableDataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("publishedVariable");

        // Simple Field (publishedVariable)
NodeId publishedVariable = NodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("publishedVariable");


        // Simple Field (attributeId)
long attributeId = readBuffer.readUnsignedLong("attributeId", 32) ;

        // Simple Field (samplingIntervalHint)
double samplingIntervalHint = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "samplingIntervalHint", true, 11, 52); })).get() ;

        // Simple Field (deadbandType)
long deadbandType = readBuffer.readUnsignedLong("deadbandType", 32) ;

        // Simple Field (deadbandValue)
double deadbandValue = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "deadbandValue", true, 11, 52); })).get() ;
        readBuffer.pullContext("indexRange");

        // Simple Field (indexRange)
PascalString indexRange = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("indexRange");

        readBuffer.pullContext("substituteValue");

        // Simple Field (substituteValue)
Variant substituteValue = VariantIO.staticParse(readBuffer ) ;        readBuffer.closeContext("substituteValue");


        // Simple Field (noOfMetaDataProperties)
int noOfMetaDataProperties = readBuffer.readInt("noOfMetaDataProperties", 32) ;        // Array field (metaDataProperties)
        readBuffer.pullContext("metaDataProperties", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfMetaDataProperties > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfMetaDataProperties) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        QualifiedName[] metaDataProperties;
        {
            int itemCount = Math.max(0, (int) noOfMetaDataProperties);
            metaDataProperties = new QualifiedName[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
metaDataProperties[curItem] = QualifiedNameIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("metaDataProperties", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PublishedVariableDataType");
        // Create the instance
        return new PublishedVariableDataTypeBuilder(publishedVariable, attributeId, samplingIntervalHint, deadbandType, deadbandValue, indexRange, substituteValue, noOfMetaDataProperties, metaDataProperties);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PublishedVariableDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PublishedVariableDataType");

        // Simple Field (publishedVariable)
        NodeId publishedVariable = (NodeId) _value.getPublishedVariable();
        writeBuffer.pushContext("publishedVariable");
        NodeIdIO.staticSerialize(writeBuffer, publishedVariable);
        writeBuffer.popContext("publishedVariable");

        // Simple Field (attributeId)
        long attributeId = (long) _value.getAttributeId();
        writeBuffer.writeUnsignedLong("attributeId", 32, ((Number) (attributeId)).longValue());

        // Simple Field (samplingIntervalHint)
        double samplingIntervalHint = (double) _value.getSamplingIntervalHint();
        writeBuffer.writeDouble("samplingIntervalHint", (samplingIntervalHint),11,52);

        // Simple Field (deadbandType)
        long deadbandType = (long) _value.getDeadbandType();
        writeBuffer.writeUnsignedLong("deadbandType", 32, ((Number) (deadbandType)).longValue());

        // Simple Field (deadbandValue)
        double deadbandValue = (double) _value.getDeadbandValue();
        writeBuffer.writeDouble("deadbandValue", (deadbandValue),11,52);

        // Simple Field (indexRange)
        PascalString indexRange = (PascalString) _value.getIndexRange();
        writeBuffer.pushContext("indexRange");
        PascalStringIO.staticSerialize(writeBuffer, indexRange);
        writeBuffer.popContext("indexRange");

        // Simple Field (substituteValue)
        Variant substituteValue = (Variant) _value.getSubstituteValue();
        writeBuffer.pushContext("substituteValue");
        VariantIO.staticSerialize(writeBuffer, substituteValue);
        writeBuffer.popContext("substituteValue");

        // Simple Field (noOfMetaDataProperties)
        int noOfMetaDataProperties = (int) _value.getNoOfMetaDataProperties();
        writeBuffer.writeInt("noOfMetaDataProperties", 32, ((Number) (noOfMetaDataProperties)).intValue());

        // Array Field (metaDataProperties)
        if(_value.getMetaDataProperties() != null) {
            writeBuffer.pushContext("metaDataProperties", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getMetaDataProperties().length;
            int curItem = 0;
            for(QualifiedName element : _value.getMetaDataProperties()) {
                boolean lastItem = curItem == (itemCount - 1);
                QualifiedNameIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("metaDataProperties", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PublishedVariableDataType");
    }

    public static class PublishedVariableDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final NodeId publishedVariable;
        private final long attributeId;
        private final double samplingIntervalHint;
        private final long deadbandType;
        private final double deadbandValue;
        private final PascalString indexRange;
        private final Variant substituteValue;
        private final int noOfMetaDataProperties;
        private final QualifiedName[] metaDataProperties;

        public PublishedVariableDataTypeBuilder(NodeId publishedVariable, long attributeId, double samplingIntervalHint, long deadbandType, double deadbandValue, PascalString indexRange, Variant substituteValue, int noOfMetaDataProperties, QualifiedName[] metaDataProperties) {
            this.publishedVariable = publishedVariable;
            this.attributeId = attributeId;
            this.samplingIntervalHint = samplingIntervalHint;
            this.deadbandType = deadbandType;
            this.deadbandValue = deadbandValue;
            this.indexRange = indexRange;
            this.substituteValue = substituteValue;
            this.noOfMetaDataProperties = noOfMetaDataProperties;
            this.metaDataProperties = metaDataProperties;
        }

        public PublishedVariableDataType build() {
            return new PublishedVariableDataType(publishedVariable, attributeId, samplingIntervalHint, deadbandType, deadbandValue, indexRange, substituteValue, noOfMetaDataProperties, metaDataProperties);
        }
    }

}
