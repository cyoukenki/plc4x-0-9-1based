/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ResponseHeaderIO implements MessageIO<ResponseHeader, ResponseHeader> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResponseHeaderIO.class);

    @Override
    public ResponseHeader parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ResponseHeader) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ResponseHeader value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ResponseHeaderBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ResponseHeader");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (timestamp)
long timestamp = readBuffer.readLong("timestamp", 64) ;

        // Simple Field (requestHandle)
long requestHandle = readBuffer.readUnsignedLong("requestHandle", 32) ;
        readBuffer.pullContext("serviceResult");

        // Simple Field (serviceResult)
StatusCode serviceResult = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serviceResult");

        readBuffer.pullContext("serviceDiagnostics");

        // Simple Field (serviceDiagnostics)
DiagnosticInfo serviceDiagnostics = DiagnosticInfoIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serviceDiagnostics");


        // Simple Field (noOfStringTable)
int noOfStringTable = readBuffer.readInt("noOfStringTable", 32) ;        // Array field (stringTable)
        readBuffer.pullContext("stringTable", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfStringTable > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfStringTable) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PascalString[] stringTable;
        {
            int itemCount = Math.max(0, (int) noOfStringTable);
            stringTable = new PascalString[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
stringTable[curItem] = PascalStringIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("stringTable", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("additionalHeader");

        // Simple Field (additionalHeader)
ExtensionObject additionalHeader = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("additionalHeader");

        readBuffer.closeContext("ResponseHeader");
        // Create the instance
        return new ResponseHeaderBuilder(timestamp, requestHandle, serviceResult, serviceDiagnostics, noOfStringTable, stringTable, additionalHeader);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ResponseHeader _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ResponseHeader");

        // Simple Field (timestamp)
        long timestamp = (long) _value.getTimestamp();
        writeBuffer.writeLong("timestamp", 64, ((Number) (timestamp)).longValue());

        // Simple Field (requestHandle)
        long requestHandle = (long) _value.getRequestHandle();
        writeBuffer.writeUnsignedLong("requestHandle", 32, ((Number) (requestHandle)).longValue());

        // Simple Field (serviceResult)
        StatusCode serviceResult = (StatusCode) _value.getServiceResult();
        writeBuffer.pushContext("serviceResult");
        StatusCodeIO.staticSerialize(writeBuffer, serviceResult);
        writeBuffer.popContext("serviceResult");

        // Simple Field (serviceDiagnostics)
        DiagnosticInfo serviceDiagnostics = (DiagnosticInfo) _value.getServiceDiagnostics();
        writeBuffer.pushContext("serviceDiagnostics");
        DiagnosticInfoIO.staticSerialize(writeBuffer, serviceDiagnostics);
        writeBuffer.popContext("serviceDiagnostics");

        // Simple Field (noOfStringTable)
        int noOfStringTable = (int) _value.getNoOfStringTable();
        writeBuffer.writeInt("noOfStringTable", 32, ((Number) (noOfStringTable)).intValue());

        // Array Field (stringTable)
        if(_value.getStringTable() != null) {
            writeBuffer.pushContext("stringTable", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getStringTable().length;
            int curItem = 0;
            for(PascalString element : _value.getStringTable()) {
                boolean lastItem = curItem == (itemCount - 1);
                PascalStringIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("stringTable", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (additionalHeader)
        ExtensionObject additionalHeader = (ExtensionObject) _value.getAdditionalHeader();
        writeBuffer.pushContext("additionalHeader");
        ExtensionObjectIO.staticSerialize(writeBuffer, additionalHeader);
        writeBuffer.popContext("additionalHeader");
        writeBuffer.popContext("ResponseHeader");
    }

    public static class ResponseHeaderBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long timestamp;
        private final long requestHandle;
        private final StatusCode serviceResult;
        private final DiagnosticInfo serviceDiagnostics;
        private final int noOfStringTable;
        private final PascalString[] stringTable;
        private final ExtensionObject additionalHeader;

        public ResponseHeaderBuilder(long timestamp, long requestHandle, StatusCode serviceResult, DiagnosticInfo serviceDiagnostics, int noOfStringTable, PascalString[] stringTable, ExtensionObject additionalHeader) {
            this.timestamp = timestamp;
            this.requestHandle = requestHandle;
            this.serviceResult = serviceResult;
            this.serviceDiagnostics = serviceDiagnostics;
            this.noOfStringTable = noOfStringTable;
            this.stringTable = stringTable;
            this.additionalHeader = additionalHeader;
        }

        public ResponseHeader build() {
            return new ResponseHeader(timestamp, requestHandle, serviceResult, serviceDiagnostics, noOfStringTable, stringTable, additionalHeader);
        }
    }

}
