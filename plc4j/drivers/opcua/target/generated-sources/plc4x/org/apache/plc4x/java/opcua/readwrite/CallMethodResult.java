/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class CallMethodResult extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "709";
    }

    // Properties.
    private final StatusCode statusCode;
    private final int noOfInputArgumentResults;
    private final StatusCode[] inputArgumentResults;
    private final int noOfInputArgumentDiagnosticInfos;
    private final DiagnosticInfo[] inputArgumentDiagnosticInfos;
    private final int noOfOutputArguments;
    private final Variant[] outputArguments;

    public CallMethodResult(StatusCode statusCode, int noOfInputArgumentResults, StatusCode[] inputArgumentResults, int noOfInputArgumentDiagnosticInfos, DiagnosticInfo[] inputArgumentDiagnosticInfos, int noOfOutputArguments, Variant[] outputArguments) {
        this.statusCode = statusCode;
        this.noOfInputArgumentResults = noOfInputArgumentResults;
        this.inputArgumentResults = inputArgumentResults;
        this.noOfInputArgumentDiagnosticInfos = noOfInputArgumentDiagnosticInfos;
        this.inputArgumentDiagnosticInfos = inputArgumentDiagnosticInfos;
        this.noOfOutputArguments = noOfOutputArguments;
        this.outputArguments = outputArguments;
    }

    public StatusCode getStatusCode() {
        return statusCode;
    }

    public int getNoOfInputArgumentResults() {
        return noOfInputArgumentResults;
    }

    public StatusCode[] getInputArgumentResults() {
        return inputArgumentResults;
    }

    public int getNoOfInputArgumentDiagnosticInfos() {
        return noOfInputArgumentDiagnosticInfos;
    }

    public DiagnosticInfo[] getInputArgumentDiagnosticInfos() {
        return inputArgumentDiagnosticInfos;
    }

    public int getNoOfOutputArguments() {
        return noOfOutputArguments;
    }

    public Variant[] getOutputArguments() {
        return outputArguments;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        CallMethodResult _value  = this;

        // Simple field (statusCode)
        lengthInBits += statusCode.getLengthInBits();

        // Simple field (noOfInputArgumentResults)
        lengthInBits += 32;

        // Array field
        if(inputArgumentResults != null) {
            int i=0;
            for(StatusCode element : inputArgumentResults) {
                boolean last = ++i >= inputArgumentResults.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfInputArgumentDiagnosticInfos)
        lengthInBits += 32;

        // Array field
        if(inputArgumentDiagnosticInfos != null) {
            int i=0;
            for(DiagnosticInfo element : inputArgumentDiagnosticInfos) {
                boolean last = ++i >= inputArgumentDiagnosticInfos.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfOutputArguments)
        lengthInBits += 32;

        // Array field
        if(outputArguments != null) {
            int i=0;
            for(Variant element : outputArguments) {
                boolean last = ++i >= outputArguments.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CallMethodResult)) {
            return false;
        }
        CallMethodResult that = (CallMethodResult) o;
        return
            (getStatusCode() == that.getStatusCode()) &&
            (getNoOfInputArgumentResults() == that.getNoOfInputArgumentResults()) &&
            (getInputArgumentResults() == that.getInputArgumentResults()) &&
            (getNoOfInputArgumentDiagnosticInfos() == that.getNoOfInputArgumentDiagnosticInfos()) &&
            (getInputArgumentDiagnosticInfos() == that.getInputArgumentDiagnosticInfos()) &&
            (getNoOfOutputArguments() == that.getNoOfOutputArguments()) &&
            (getOutputArguments() == that.getOutputArguments()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getStatusCode(),
            getNoOfInputArgumentResults(),
            getInputArgumentResults(),
            getNoOfInputArgumentDiagnosticInfos(),
            getInputArgumentDiagnosticInfos(),
            getNoOfOutputArguments(),
            getOutputArguments()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("statusCode", getStatusCode())
            .append("noOfInputArgumentResults", getNoOfInputArgumentResults())
            .append("inputArgumentResults", getInputArgumentResults())
            .append("noOfInputArgumentDiagnosticInfos", getNoOfInputArgumentDiagnosticInfos())
            .append("inputArgumentDiagnosticInfos", getInputArgumentDiagnosticInfos())
            .append("noOfOutputArguments", getNoOfOutputArguments())
            .append("outputArguments", getOutputArguments())
            .toString();
    }

}
