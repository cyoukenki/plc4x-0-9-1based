/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ExtensionObjectIO implements MessageIO<ExtensionObject, ExtensionObject> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionObjectIO.class);

    @Override
    public ExtensionObject parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Boolean includeEncodingMask;
        if(args[0] instanceof Boolean) {
            includeEncodingMask = (Boolean) args[0];
        } else if (args[0] instanceof String) {
            includeEncodingMask = Boolean.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean or a string which is parseable but was " + args[0].getClass().getName());
        }
        return ExtensionObjectIO.staticParse(readBuffer, includeEncodingMask);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ExtensionObject value, Object... args) throws ParseException {
        ExtensionObjectIO.staticSerialize(writeBuffer, value);
    }

    public static ExtensionObject staticParse(ReadBuffer readBuffer, Boolean includeEncodingMask) throws ParseException {
        readBuffer.pullContext("ExtensionObject");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("typeId");

        // Simple Field (typeId)
ExpandedNodeId typeId = ExpandedNodeIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("typeId");

        // Optional Field (encodingMask) (Can be skipped, if a given expression evaluates to false)
        ExtensionObjectEncodingMask encodingMask = null;
        if(includeEncodingMask) {
            encodingMask = ExtensionObjectEncodingMaskIO.staticParse(readBuffer);
        }

        // Virtual field (Just declare a local variable so we can access it in the parser)
        String identifier = String.valueOf(typeId.getIdentifier());

        readBuffer.pullContext("body");

        // Simple Field (body)
ExtensionObjectDefinition body = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(identifier) ) ;        readBuffer.closeContext("body");

        readBuffer.closeContext("ExtensionObject");
        // Create the instance
        return new ExtensionObject(typeId, encodingMask, body);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ExtensionObject _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ExtensionObject");

        // Simple Field (typeId)
        ExpandedNodeId typeId = (ExpandedNodeId) _value.getTypeId();
        writeBuffer.pushContext("typeId");
        ExpandedNodeIdIO.staticSerialize(writeBuffer, typeId);
        writeBuffer.popContext("typeId");

        // Optional Field (encodingMask) (Can be skipped, if the value is null)
        ExtensionObjectEncodingMask encodingMask = null;
        if(_value.getEncodingMask() != null) {
            encodingMask = (ExtensionObjectEncodingMask) _value.getEncodingMask();
            ExtensionObjectEncodingMaskIO.staticSerialize(writeBuffer, encodingMask);
        }

        // Simple Field (body)
        ExtensionObjectDefinition body = (ExtensionObjectDefinition) _value.getBody();
        writeBuffer.pushContext("body");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, body);
        writeBuffer.popContext("body");
        writeBuffer.popContext("ExtensionObject");
    }

}
