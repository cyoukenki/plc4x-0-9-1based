/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class RedundantServerDataTypeIO implements MessageIO<RedundantServerDataType, RedundantServerDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedundantServerDataTypeIO.class);

    @Override
    public RedundantServerDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (RedundantServerDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, RedundantServerDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static RedundantServerDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("RedundantServerDataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("serverId");

        // Simple Field (serverId)
PascalString serverId = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serverId");


        // Simple Field (serviceLevel)
short serviceLevel = readBuffer.readUnsignedShort("serviceLevel", 8) ;
        readBuffer.pullContext("serverState");

        // Simple Field (serverState)
        // enum based simple field with type ServerState
        ServerState serverState = ServerState.enumForValue(readBuffer.readUnsignedLong("ServerState", 32));
        readBuffer.closeContext("serverState");

        readBuffer.closeContext("RedundantServerDataType");
        // Create the instance
        return new RedundantServerDataTypeBuilder(serverId, serviceLevel, serverState);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, RedundantServerDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("RedundantServerDataType");

        // Simple Field (serverId)
        PascalString serverId = (PascalString) _value.getServerId();
        writeBuffer.pushContext("serverId");
        PascalStringIO.staticSerialize(writeBuffer, serverId);
        writeBuffer.popContext("serverId");

        // Simple Field (serviceLevel)
        short serviceLevel = (short) _value.getServiceLevel();
        writeBuffer.writeUnsignedShort("serviceLevel", 8, ((Number) (serviceLevel)).shortValue());

        // Simple Field (serverState)
        ServerState serverState = (ServerState) _value.getServerState();
        writeBuffer.pushContext("serverState");
        // enum field with type ServerState
        writeBuffer.writeUnsignedLong("ServerState", 32, ((Number) (serverState.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(serverState.name()));
        writeBuffer.popContext("serverState");
        writeBuffer.popContext("RedundantServerDataType");
    }

    public static class RedundantServerDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString serverId;
        private final short serviceLevel;
        private final ServerState serverState;

        public RedundantServerDataTypeBuilder(PascalString serverId, short serviceLevel, ServerState serverState) {
            this.serverId = serverId;
            this.serviceLevel = serviceLevel;
            this.serverState = serverState;
        }

        public RedundantServerDataType build() {
            return new RedundantServerDataType(serverId, serviceLevel, serverState);
        }
    }

}
