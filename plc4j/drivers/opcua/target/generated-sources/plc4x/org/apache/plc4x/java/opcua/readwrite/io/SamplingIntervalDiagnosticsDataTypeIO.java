/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SamplingIntervalDiagnosticsDataTypeIO implements MessageIO<SamplingIntervalDiagnosticsDataType, SamplingIntervalDiagnosticsDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SamplingIntervalDiagnosticsDataTypeIO.class);

    @Override
    public SamplingIntervalDiagnosticsDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SamplingIntervalDiagnosticsDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SamplingIntervalDiagnosticsDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static SamplingIntervalDiagnosticsDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SamplingIntervalDiagnosticsDataType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (samplingInterval)
double samplingInterval = ((Supplier<Double>) (() -> { return (double) toFloat(readBuffer, "samplingInterval", true, 11, 52); })).get() ;

        // Simple Field (monitoredItemCount)
long monitoredItemCount = readBuffer.readUnsignedLong("monitoredItemCount", 32) ;

        // Simple Field (maxMonitoredItemCount)
long maxMonitoredItemCount = readBuffer.readUnsignedLong("maxMonitoredItemCount", 32) ;

        // Simple Field (disabledMonitoredItemCount)
long disabledMonitoredItemCount = readBuffer.readUnsignedLong("disabledMonitoredItemCount", 32) ;
        readBuffer.closeContext("SamplingIntervalDiagnosticsDataType");
        // Create the instance
        return new SamplingIntervalDiagnosticsDataTypeBuilder(samplingInterval, monitoredItemCount, maxMonitoredItemCount, disabledMonitoredItemCount);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SamplingIntervalDiagnosticsDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SamplingIntervalDiagnosticsDataType");

        // Simple Field (samplingInterval)
        double samplingInterval = (double) _value.getSamplingInterval();
        writeBuffer.writeDouble("samplingInterval", (samplingInterval),11,52);

        // Simple Field (monitoredItemCount)
        long monitoredItemCount = (long) _value.getMonitoredItemCount();
        writeBuffer.writeUnsignedLong("monitoredItemCount", 32, ((Number) (monitoredItemCount)).longValue());

        // Simple Field (maxMonitoredItemCount)
        long maxMonitoredItemCount = (long) _value.getMaxMonitoredItemCount();
        writeBuffer.writeUnsignedLong("maxMonitoredItemCount", 32, ((Number) (maxMonitoredItemCount)).longValue());

        // Simple Field (disabledMonitoredItemCount)
        long disabledMonitoredItemCount = (long) _value.getDisabledMonitoredItemCount();
        writeBuffer.writeUnsignedLong("disabledMonitoredItemCount", 32, ((Number) (disabledMonitoredItemCount)).longValue());
        writeBuffer.popContext("SamplingIntervalDiagnosticsDataType");
    }

    public static class SamplingIntervalDiagnosticsDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final double samplingInterval;
        private final long monitoredItemCount;
        private final long maxMonitoredItemCount;
        private final long disabledMonitoredItemCount;

        public SamplingIntervalDiagnosticsDataTypeBuilder(double samplingInterval, long monitoredItemCount, long maxMonitoredItemCount, long disabledMonitoredItemCount) {
            this.samplingInterval = samplingInterval;
            this.monitoredItemCount = monitoredItemCount;
            this.maxMonitoredItemCount = maxMonitoredItemCount;
            this.disabledMonitoredItemCount = disabledMonitoredItemCount;
        }

        public SamplingIntervalDiagnosticsDataType build() {
            return new SamplingIntervalDiagnosticsDataType(samplingInterval, monitoredItemCount, maxMonitoredItemCount, disabledMonitoredItemCount);
        }
    }

}
