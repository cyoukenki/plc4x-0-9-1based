/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ContentFilterResultIO implements MessageIO<ContentFilterResult, ContentFilterResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContentFilterResultIO.class);

    @Override
    public ContentFilterResult parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ContentFilterResult) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ContentFilterResult value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ContentFilterResultBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ContentFilterResult");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (noOfElementResults)
int noOfElementResults = readBuffer.readInt("noOfElementResults", 32) ;        // Array field (elementResults)
        readBuffer.pullContext("elementResults", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfElementResults > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfElementResults) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] elementResults;
        {
            int itemCount = Math.max(0, (int) noOfElementResults);
            elementResults = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
elementResults[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(606) ) ;            }
        }
            readBuffer.closeContext("elementResults", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfElementDiagnosticInfos)
int noOfElementDiagnosticInfos = readBuffer.readInt("noOfElementDiagnosticInfos", 32) ;        // Array field (elementDiagnosticInfos)
        readBuffer.pullContext("elementDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfElementDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfElementDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] elementDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfElementDiagnosticInfos);
            elementDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
elementDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("elementDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ContentFilterResult");
        // Create the instance
        return new ContentFilterResultBuilder(noOfElementResults, elementResults, noOfElementDiagnosticInfos, elementDiagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ContentFilterResult _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ContentFilterResult");

        // Simple Field (noOfElementResults)
        int noOfElementResults = (int) _value.getNoOfElementResults();
        writeBuffer.writeInt("noOfElementResults", 32, ((Number) (noOfElementResults)).intValue());

        // Array Field (elementResults)
        if(_value.getElementResults() != null) {
            writeBuffer.pushContext("elementResults", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getElementResults().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getElementResults()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("elementResults", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfElementDiagnosticInfos)
        int noOfElementDiagnosticInfos = (int) _value.getNoOfElementDiagnosticInfos();
        writeBuffer.writeInt("noOfElementDiagnosticInfos", 32, ((Number) (noOfElementDiagnosticInfos)).intValue());

        // Array Field (elementDiagnosticInfos)
        if(_value.getElementDiagnosticInfos() != null) {
            writeBuffer.pushContext("elementDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getElementDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getElementDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("elementDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ContentFilterResult");
    }

    public static class ContentFilterResultBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final int noOfElementResults;
        private final ExtensionObjectDefinition[] elementResults;
        private final int noOfElementDiagnosticInfos;
        private final DiagnosticInfo[] elementDiagnosticInfos;

        public ContentFilterResultBuilder(int noOfElementResults, ExtensionObjectDefinition[] elementResults, int noOfElementDiagnosticInfos, DiagnosticInfo[] elementDiagnosticInfos) {
            this.noOfElementResults = noOfElementResults;
            this.elementResults = elementResults;
            this.noOfElementDiagnosticInfos = noOfElementDiagnosticInfos;
            this.elementDiagnosticInfos = elementDiagnosticInfos;
        }

        public ContentFilterResult build() {
            return new ContentFilterResult(noOfElementResults, elementResults, noOfElementDiagnosticInfos, elementDiagnosticInfos);
        }
    }

}
