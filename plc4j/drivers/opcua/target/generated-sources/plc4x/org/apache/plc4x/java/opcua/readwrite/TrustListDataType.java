/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class TrustListDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "12556";
    }

    // Properties.
    private final long specifiedLists;
    private final int noOfTrustedCertificates;
    private final PascalByteString[] trustedCertificates;
    private final int noOfTrustedCrls;
    private final PascalByteString[] trustedCrls;
    private final int noOfIssuerCertificates;
    private final PascalByteString[] issuerCertificates;
    private final int noOfIssuerCrls;
    private final PascalByteString[] issuerCrls;

    public TrustListDataType(long specifiedLists, int noOfTrustedCertificates, PascalByteString[] trustedCertificates, int noOfTrustedCrls, PascalByteString[] trustedCrls, int noOfIssuerCertificates, PascalByteString[] issuerCertificates, int noOfIssuerCrls, PascalByteString[] issuerCrls) {
        this.specifiedLists = specifiedLists;
        this.noOfTrustedCertificates = noOfTrustedCertificates;
        this.trustedCertificates = trustedCertificates;
        this.noOfTrustedCrls = noOfTrustedCrls;
        this.trustedCrls = trustedCrls;
        this.noOfIssuerCertificates = noOfIssuerCertificates;
        this.issuerCertificates = issuerCertificates;
        this.noOfIssuerCrls = noOfIssuerCrls;
        this.issuerCrls = issuerCrls;
    }

    public long getSpecifiedLists() {
        return specifiedLists;
    }

    public int getNoOfTrustedCertificates() {
        return noOfTrustedCertificates;
    }

    public PascalByteString[] getTrustedCertificates() {
        return trustedCertificates;
    }

    public int getNoOfTrustedCrls() {
        return noOfTrustedCrls;
    }

    public PascalByteString[] getTrustedCrls() {
        return trustedCrls;
    }

    public int getNoOfIssuerCertificates() {
        return noOfIssuerCertificates;
    }

    public PascalByteString[] getIssuerCertificates() {
        return issuerCertificates;
    }

    public int getNoOfIssuerCrls() {
        return noOfIssuerCrls;
    }

    public PascalByteString[] getIssuerCrls() {
        return issuerCrls;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        TrustListDataType _value  = this;

        // Simple field (specifiedLists)
        lengthInBits += 32;

        // Simple field (noOfTrustedCertificates)
        lengthInBits += 32;

        // Array field
        if(trustedCertificates != null) {
            int i=0;
            for(PascalByteString element : trustedCertificates) {
                boolean last = ++i >= trustedCertificates.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfTrustedCrls)
        lengthInBits += 32;

        // Array field
        if(trustedCrls != null) {
            int i=0;
            for(PascalByteString element : trustedCrls) {
                boolean last = ++i >= trustedCrls.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfIssuerCertificates)
        lengthInBits += 32;

        // Array field
        if(issuerCertificates != null) {
            int i=0;
            for(PascalByteString element : issuerCertificates) {
                boolean last = ++i >= issuerCertificates.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfIssuerCrls)
        lengthInBits += 32;

        // Array field
        if(issuerCrls != null) {
            int i=0;
            for(PascalByteString element : issuerCrls) {
                boolean last = ++i >= issuerCrls.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof TrustListDataType)) {
            return false;
        }
        TrustListDataType that = (TrustListDataType) o;
        return
            (getSpecifiedLists() == that.getSpecifiedLists()) &&
            (getNoOfTrustedCertificates() == that.getNoOfTrustedCertificates()) &&
            (getTrustedCertificates() == that.getTrustedCertificates()) &&
            (getNoOfTrustedCrls() == that.getNoOfTrustedCrls()) &&
            (getTrustedCrls() == that.getTrustedCrls()) &&
            (getNoOfIssuerCertificates() == that.getNoOfIssuerCertificates()) &&
            (getIssuerCertificates() == that.getIssuerCertificates()) &&
            (getNoOfIssuerCrls() == that.getNoOfIssuerCrls()) &&
            (getIssuerCrls() == that.getIssuerCrls()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getSpecifiedLists(),
            getNoOfTrustedCertificates(),
            getTrustedCertificates(),
            getNoOfTrustedCrls(),
            getTrustedCrls(),
            getNoOfIssuerCertificates(),
            getIssuerCertificates(),
            getNoOfIssuerCrls(),
            getIssuerCrls()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("specifiedLists", getSpecifiedLists())
            .append("noOfTrustedCertificates", getNoOfTrustedCertificates())
            .append("trustedCertificates", getTrustedCertificates())
            .append("noOfTrustedCrls", getNoOfTrustedCrls())
            .append("trustedCrls", getTrustedCrls())
            .append("noOfIssuerCertificates", getNoOfIssuerCertificates())
            .append("issuerCertificates", getIssuerCertificates())
            .append("noOfIssuerCrls", getNoOfIssuerCrls())
            .append("issuerCrls", getIssuerCrls())
            .toString();
    }

}
