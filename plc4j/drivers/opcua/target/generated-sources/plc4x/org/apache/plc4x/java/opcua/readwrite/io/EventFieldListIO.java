/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class EventFieldListIO implements MessageIO<EventFieldList, EventFieldList> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventFieldListIO.class);

    @Override
    public EventFieldList parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (EventFieldList) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, EventFieldList value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static EventFieldListBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("EventFieldList");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (clientHandle)
long clientHandle = readBuffer.readUnsignedLong("clientHandle", 32) ;

        // Simple Field (noOfEventFields)
int noOfEventFields = readBuffer.readInt("noOfEventFields", 32) ;        // Array field (eventFields)
        readBuffer.pullContext("eventFields", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfEventFields > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfEventFields) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        Variant[] eventFields;
        {
            int itemCount = Math.max(0, (int) noOfEventFields);
            eventFields = new Variant[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
eventFields[curItem] = VariantIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("eventFields", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("EventFieldList");
        // Create the instance
        return new EventFieldListBuilder(clientHandle, noOfEventFields, eventFields);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, EventFieldList _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("EventFieldList");

        // Simple Field (clientHandle)
        long clientHandle = (long) _value.getClientHandle();
        writeBuffer.writeUnsignedLong("clientHandle", 32, ((Number) (clientHandle)).longValue());

        // Simple Field (noOfEventFields)
        int noOfEventFields = (int) _value.getNoOfEventFields();
        writeBuffer.writeInt("noOfEventFields", 32, ((Number) (noOfEventFields)).intValue());

        // Array Field (eventFields)
        if(_value.getEventFields() != null) {
            writeBuffer.pushContext("eventFields", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getEventFields().length;
            int curItem = 0;
            for(Variant element : _value.getEventFields()) {
                boolean lastItem = curItem == (itemCount - 1);
                VariantIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("eventFields", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("EventFieldList");
    }

    public static class EventFieldListBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final long clientHandle;
        private final int noOfEventFields;
        private final Variant[] eventFields;

        public EventFieldListBuilder(long clientHandle, int noOfEventFields, Variant[] eventFields) {
            this.clientHandle = clientHandle;
            this.noOfEventFields = noOfEventFields;
            this.eventFields = eventFields;
        }

        public EventFieldList build() {
            return new EventFieldList(clientHandle, noOfEventFields, eventFields);
        }
    }

}
