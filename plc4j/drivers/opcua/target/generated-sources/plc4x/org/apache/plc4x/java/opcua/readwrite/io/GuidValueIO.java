/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;

import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class GuidValueIO implements MessageIO<GuidValue, GuidValue> {

    private static final Logger LOGGER = LoggerFactory.getLogger(GuidValueIO.class);

    @Override
    public GuidValue parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return GuidValueIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, GuidValue value, Object... args) throws ParseException {
        GuidValueIO.staticSerialize(writeBuffer, value);
    }

    public static GuidValue staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("GuidValue");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (data1)
long data1 = readBuffer.readUnsignedLong("data1", 32) ;

        // Simple Field (data2)
int data2 = readBuffer.readUnsignedInt("data2", 16) ;

        // Simple Field (data3)
int data3 = readBuffer.readUnsignedInt("data3", 16) ;        // Array field (data4)
        readBuffer.pullContext("data4", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(2 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (2) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] data4;
        {
            int itemCount = Math.max(0, (int) 2);
            data4 = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data4[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("data4", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (data5)
        readBuffer.pullContext("data5", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(6 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (6) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] data5;
        {
            int itemCount = Math.max(0, (int) 6);
            data5 = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data5[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("data5", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("GuidValue");
        // Create the instance
        return new GuidValue(data1, data2, data3, data4, data5);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, GuidValue _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("GuidValue");

        // Simple Field (data1)
        long data1 = (long) _value.getData1();
        writeBuffer.writeUnsignedLong("data1", 32, ((Number) (data1)).longValue());

        // Simple Field (data2)
        int data2 = (int) _value.getData2();
        writeBuffer.writeUnsignedInt("data2", 16, ((Number) (data2)).intValue());

        // Simple Field (data3)
        int data3 = (int) _value.getData3();
        writeBuffer.writeUnsignedInt("data3", 16, ((Number) (data3)).intValue());

        // Array Field (data4)
        if(_value.getData4() != null) {
            writeBuffer.pushContext("data4", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData4().length;
            int curItem = 0;
            for(byte element : _value.getData4()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data4", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (data5)
        if(_value.getData5() != null) {
            writeBuffer.pushContext("data5", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData5().length;
            int curItem = 0;
            for(byte element : _value.getData5()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data5", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("GuidValue");
    }

}
