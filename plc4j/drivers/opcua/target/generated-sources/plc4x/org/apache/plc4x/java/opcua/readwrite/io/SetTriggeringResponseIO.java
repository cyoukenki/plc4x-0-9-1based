/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SetTriggeringResponseIO implements MessageIO<SetTriggeringResponse, SetTriggeringResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SetTriggeringResponseIO.class);

    @Override
    public SetTriggeringResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SetTriggeringResponse) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SetTriggeringResponse value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static SetTriggeringResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SetTriggeringResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("responseHeader");

        // Simple Field (responseHeader)
ExtensionObjectDefinition responseHeader = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(394) ) ;        readBuffer.closeContext("responseHeader");


        // Simple Field (noOfAddResults)
int noOfAddResults = readBuffer.readInt("noOfAddResults", 32) ;        // Array field (addResults)
        readBuffer.pullContext("addResults", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfAddResults > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfAddResults) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] addResults;
        {
            int itemCount = Math.max(0, (int) noOfAddResults);
            addResults = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
addResults[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("addResults", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfAddDiagnosticInfos)
int noOfAddDiagnosticInfos = readBuffer.readInt("noOfAddDiagnosticInfos", 32) ;        // Array field (addDiagnosticInfos)
        readBuffer.pullContext("addDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfAddDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfAddDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] addDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfAddDiagnosticInfos);
            addDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
addDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("addDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfRemoveResults)
int noOfRemoveResults = readBuffer.readInt("noOfRemoveResults", 32) ;        // Array field (removeResults)
        readBuffer.pullContext("removeResults", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfRemoveResults > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfRemoveResults) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] removeResults;
        {
            int itemCount = Math.max(0, (int) noOfRemoveResults);
            removeResults = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
removeResults[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("removeResults", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfRemoveDiagnosticInfos)
int noOfRemoveDiagnosticInfos = readBuffer.readInt("noOfRemoveDiagnosticInfos", 32) ;        // Array field (removeDiagnosticInfos)
        readBuffer.pullContext("removeDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfRemoveDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfRemoveDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] removeDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfRemoveDiagnosticInfos);
            removeDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
removeDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("removeDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("SetTriggeringResponse");
        // Create the instance
        return new SetTriggeringResponseBuilder(responseHeader, noOfAddResults, addResults, noOfAddDiagnosticInfos, addDiagnosticInfos, noOfRemoveResults, removeResults, noOfRemoveDiagnosticInfos, removeDiagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SetTriggeringResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SetTriggeringResponse");

        // Simple Field (responseHeader)
        ExtensionObjectDefinition responseHeader = (ExtensionObjectDefinition) _value.getResponseHeader();
        writeBuffer.pushContext("responseHeader");
        ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, responseHeader);
        writeBuffer.popContext("responseHeader");

        // Simple Field (noOfAddResults)
        int noOfAddResults = (int) _value.getNoOfAddResults();
        writeBuffer.writeInt("noOfAddResults", 32, ((Number) (noOfAddResults)).intValue());

        // Array Field (addResults)
        if(_value.getAddResults() != null) {
            writeBuffer.pushContext("addResults", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getAddResults().length;
            int curItem = 0;
            for(StatusCode element : _value.getAddResults()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("addResults", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfAddDiagnosticInfos)
        int noOfAddDiagnosticInfos = (int) _value.getNoOfAddDiagnosticInfos();
        writeBuffer.writeInt("noOfAddDiagnosticInfos", 32, ((Number) (noOfAddDiagnosticInfos)).intValue());

        // Array Field (addDiagnosticInfos)
        if(_value.getAddDiagnosticInfos() != null) {
            writeBuffer.pushContext("addDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getAddDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getAddDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("addDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfRemoveResults)
        int noOfRemoveResults = (int) _value.getNoOfRemoveResults();
        writeBuffer.writeInt("noOfRemoveResults", 32, ((Number) (noOfRemoveResults)).intValue());

        // Array Field (removeResults)
        if(_value.getRemoveResults() != null) {
            writeBuffer.pushContext("removeResults", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getRemoveResults().length;
            int curItem = 0;
            for(StatusCode element : _value.getRemoveResults()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("removeResults", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfRemoveDiagnosticInfos)
        int noOfRemoveDiagnosticInfos = (int) _value.getNoOfRemoveDiagnosticInfos();
        writeBuffer.writeInt("noOfRemoveDiagnosticInfos", 32, ((Number) (noOfRemoveDiagnosticInfos)).intValue());

        // Array Field (removeDiagnosticInfos)
        if(_value.getRemoveDiagnosticInfos() != null) {
            writeBuffer.pushContext("removeDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getRemoveDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getRemoveDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("removeDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("SetTriggeringResponse");
    }

    public static class SetTriggeringResponseBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final ExtensionObjectDefinition responseHeader;
        private final int noOfAddResults;
        private final StatusCode[] addResults;
        private final int noOfAddDiagnosticInfos;
        private final DiagnosticInfo[] addDiagnosticInfos;
        private final int noOfRemoveResults;
        private final StatusCode[] removeResults;
        private final int noOfRemoveDiagnosticInfos;
        private final DiagnosticInfo[] removeDiagnosticInfos;

        public SetTriggeringResponseBuilder(ExtensionObjectDefinition responseHeader, int noOfAddResults, StatusCode[] addResults, int noOfAddDiagnosticInfos, DiagnosticInfo[] addDiagnosticInfos, int noOfRemoveResults, StatusCode[] removeResults, int noOfRemoveDiagnosticInfos, DiagnosticInfo[] removeDiagnosticInfos) {
            this.responseHeader = responseHeader;
            this.noOfAddResults = noOfAddResults;
            this.addResults = addResults;
            this.noOfAddDiagnosticInfos = noOfAddDiagnosticInfos;
            this.addDiagnosticInfos = addDiagnosticInfos;
            this.noOfRemoveResults = noOfRemoveResults;
            this.removeResults = removeResults;
            this.noOfRemoveDiagnosticInfos = noOfRemoveDiagnosticInfos;
            this.removeDiagnosticInfos = removeDiagnosticInfos;
        }

        public SetTriggeringResponse build() {
            return new SetTriggeringResponse(responseHeader, noOfAddResults, addResults, noOfAddDiagnosticInfos, addDiagnosticInfos, noOfRemoveResults, removeResults, noOfRemoveDiagnosticInfos, removeDiagnosticInfos);
        }
    }

}
