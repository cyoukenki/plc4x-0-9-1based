/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataSetWriterDataTypeIO implements MessageIO<DataSetWriterDataType, DataSetWriterDataType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataSetWriterDataTypeIO.class);

    @Override
    public DataSetWriterDataType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DataSetWriterDataType) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DataSetWriterDataType value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static DataSetWriterDataTypeBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DataSetWriterDataType");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("name");

        // Simple Field (name)
PascalString name = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("name");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (enabled)
boolean enabled = readBuffer.readBit("enabled") ;

        // Simple Field (dataSetWriterId)
int dataSetWriterId = readBuffer.readUnsignedInt("dataSetWriterId", 16) ;
        readBuffer.pullContext("dataSetFieldContentMask");

        // Simple Field (dataSetFieldContentMask)
        // enum based simple field with type DataSetFieldContentMask
        DataSetFieldContentMask dataSetFieldContentMask = DataSetFieldContentMask.enumForValue(readBuffer.readUnsignedLong("DataSetFieldContentMask", 32));
        readBuffer.closeContext("dataSetFieldContentMask");


        // Simple Field (keyFrameCount)
long keyFrameCount = readBuffer.readUnsignedLong("keyFrameCount", 32) ;
        readBuffer.pullContext("dataSetName");

        // Simple Field (dataSetName)
PascalString dataSetName = PascalStringIO.staticParse(readBuffer ) ;        readBuffer.closeContext("dataSetName");


        // Simple Field (noOfDataSetWriterProperties)
int noOfDataSetWriterProperties = readBuffer.readInt("noOfDataSetWriterProperties", 32) ;        // Array field (dataSetWriterProperties)
        readBuffer.pullContext("dataSetWriterProperties", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfDataSetWriterProperties > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfDataSetWriterProperties) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ExtensionObjectDefinition[] dataSetWriterProperties;
        {
            int itemCount = Math.max(0, (int) noOfDataSetWriterProperties);
            dataSetWriterProperties = new ExtensionObjectDefinition[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataSetWriterProperties[curItem] = ExtensionObjectDefinitionIO.staticParse(readBuffer , String.valueOf(14535) ) ;            }
        }
            readBuffer.closeContext("dataSetWriterProperties", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.pullContext("transportSettings");

        // Simple Field (transportSettings)
ExtensionObject transportSettings = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("transportSettings");

        readBuffer.pullContext("messageSettings");

        // Simple Field (messageSettings)
ExtensionObject messageSettings = ExtensionObjectIO.staticParse(readBuffer , (boolean) (true) ) ;        readBuffer.closeContext("messageSettings");

        readBuffer.closeContext("DataSetWriterDataType");
        // Create the instance
        return new DataSetWriterDataTypeBuilder(name, enabled, dataSetWriterId, dataSetFieldContentMask, keyFrameCount, dataSetName, noOfDataSetWriterProperties, dataSetWriterProperties, transportSettings, messageSettings);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DataSetWriterDataType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DataSetWriterDataType");

        // Simple Field (name)
        PascalString name = (PascalString) _value.getName();
        writeBuffer.pushContext("name");
        PascalStringIO.staticSerialize(writeBuffer, name);
        writeBuffer.popContext("name");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (enabled)
        boolean enabled = (boolean) _value.getEnabled();
        writeBuffer.writeBit("enabled", (boolean) (enabled));

        // Simple Field (dataSetWriterId)
        int dataSetWriterId = (int) _value.getDataSetWriterId();
        writeBuffer.writeUnsignedInt("dataSetWriterId", 16, ((Number) (dataSetWriterId)).intValue());

        // Simple Field (dataSetFieldContentMask)
        DataSetFieldContentMask dataSetFieldContentMask = (DataSetFieldContentMask) _value.getDataSetFieldContentMask();
        writeBuffer.pushContext("dataSetFieldContentMask");
        // enum field with type DataSetFieldContentMask
        writeBuffer.writeUnsignedLong("DataSetFieldContentMask", 32, ((Number) (dataSetFieldContentMask.getValue())).longValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(dataSetFieldContentMask.name()));
        writeBuffer.popContext("dataSetFieldContentMask");

        // Simple Field (keyFrameCount)
        long keyFrameCount = (long) _value.getKeyFrameCount();
        writeBuffer.writeUnsignedLong("keyFrameCount", 32, ((Number) (keyFrameCount)).longValue());

        // Simple Field (dataSetName)
        PascalString dataSetName = (PascalString) _value.getDataSetName();
        writeBuffer.pushContext("dataSetName");
        PascalStringIO.staticSerialize(writeBuffer, dataSetName);
        writeBuffer.popContext("dataSetName");

        // Simple Field (noOfDataSetWriterProperties)
        int noOfDataSetWriterProperties = (int) _value.getNoOfDataSetWriterProperties();
        writeBuffer.writeInt("noOfDataSetWriterProperties", 32, ((Number) (noOfDataSetWriterProperties)).intValue());

        // Array Field (dataSetWriterProperties)
        if(_value.getDataSetWriterProperties() != null) {
            writeBuffer.pushContext("dataSetWriterProperties", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataSetWriterProperties().length;
            int curItem = 0;
            for(ExtensionObjectDefinition element : _value.getDataSetWriterProperties()) {
                boolean lastItem = curItem == (itemCount - 1);
                ExtensionObjectDefinitionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataSetWriterProperties", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (transportSettings)
        ExtensionObject transportSettings = (ExtensionObject) _value.getTransportSettings();
        writeBuffer.pushContext("transportSettings");
        ExtensionObjectIO.staticSerialize(writeBuffer, transportSettings);
        writeBuffer.popContext("transportSettings");

        // Simple Field (messageSettings)
        ExtensionObject messageSettings = (ExtensionObject) _value.getMessageSettings();
        writeBuffer.pushContext("messageSettings");
        ExtensionObjectIO.staticSerialize(writeBuffer, messageSettings);
        writeBuffer.popContext("messageSettings");
        writeBuffer.popContext("DataSetWriterDataType");
    }

    public static class DataSetWriterDataTypeBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final PascalString name;
        private final boolean enabled;
        private final int dataSetWriterId;
        private final DataSetFieldContentMask dataSetFieldContentMask;
        private final long keyFrameCount;
        private final PascalString dataSetName;
        private final int noOfDataSetWriterProperties;
        private final ExtensionObjectDefinition[] dataSetWriterProperties;
        private final ExtensionObject transportSettings;
        private final ExtensionObject messageSettings;

        public DataSetWriterDataTypeBuilder(PascalString name, boolean enabled, int dataSetWriterId, DataSetFieldContentMask dataSetFieldContentMask, long keyFrameCount, PascalString dataSetName, int noOfDataSetWriterProperties, ExtensionObjectDefinition[] dataSetWriterProperties, ExtensionObject transportSettings, ExtensionObject messageSettings) {
            this.name = name;
            this.enabled = enabled;
            this.dataSetWriterId = dataSetWriterId;
            this.dataSetFieldContentMask = dataSetFieldContentMask;
            this.keyFrameCount = keyFrameCount;
            this.dataSetName = dataSetName;
            this.noOfDataSetWriterProperties = noOfDataSetWriterProperties;
            this.dataSetWriterProperties = dataSetWriterProperties;
            this.transportSettings = transportSettings;
            this.messageSettings = messageSettings;
        }

        public DataSetWriterDataType build() {
            return new DataSetWriterDataType(name, enabled, dataSetWriterId, dataSetFieldContentMask, keyFrameCount, dataSetName, noOfDataSetWriterProperties, dataSetWriterProperties, transportSettings, messageSettings);
        }
    }

}
