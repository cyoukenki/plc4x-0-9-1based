/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ResponseHeader extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "394";
    }

    // Properties.
    private final long timestamp;
    private final long requestHandle;
    private final StatusCode serviceResult;
    private final DiagnosticInfo serviceDiagnostics;
    private final int noOfStringTable;
    private final PascalString[] stringTable;
    private final ExtensionObject additionalHeader;

    public ResponseHeader(long timestamp, long requestHandle, StatusCode serviceResult, DiagnosticInfo serviceDiagnostics, int noOfStringTable, PascalString[] stringTable, ExtensionObject additionalHeader) {
        this.timestamp = timestamp;
        this.requestHandle = requestHandle;
        this.serviceResult = serviceResult;
        this.serviceDiagnostics = serviceDiagnostics;
        this.noOfStringTable = noOfStringTable;
        this.stringTable = stringTable;
        this.additionalHeader = additionalHeader;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public long getRequestHandle() {
        return requestHandle;
    }

    public StatusCode getServiceResult() {
        return serviceResult;
    }

    public DiagnosticInfo getServiceDiagnostics() {
        return serviceDiagnostics;
    }

    public int getNoOfStringTable() {
        return noOfStringTable;
    }

    public PascalString[] getStringTable() {
        return stringTable;
    }

    public ExtensionObject getAdditionalHeader() {
        return additionalHeader;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        ResponseHeader _value  = this;

        // Simple field (timestamp)
        lengthInBits += 64;

        // Simple field (requestHandle)
        lengthInBits += 32;

        // Simple field (serviceResult)
        lengthInBits += serviceResult.getLengthInBits();

        // Simple field (serviceDiagnostics)
        lengthInBits += serviceDiagnostics.getLengthInBits();

        // Simple field (noOfStringTable)
        lengthInBits += 32;

        // Array field
        if(stringTable != null) {
            int i=0;
            for(PascalString element : stringTable) {
                boolean last = ++i >= stringTable.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (additionalHeader)
        lengthInBits += additionalHeader.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ResponseHeader)) {
            return false;
        }
        ResponseHeader that = (ResponseHeader) o;
        return
            (getTimestamp() == that.getTimestamp()) &&
            (getRequestHandle() == that.getRequestHandle()) &&
            (getServiceResult() == that.getServiceResult()) &&
            (getServiceDiagnostics() == that.getServiceDiagnostics()) &&
            (getNoOfStringTable() == that.getNoOfStringTable()) &&
            (getStringTable() == that.getStringTable()) &&
            (getAdditionalHeader() == that.getAdditionalHeader()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getTimestamp(),
            getRequestHandle(),
            getServiceResult(),
            getServiceDiagnostics(),
            getNoOfStringTable(),
            getStringTable(),
            getAdditionalHeader()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("timestamp", getTimestamp())
            .append("requestHandle", getRequestHandle())
            .append("serviceResult", getServiceResult())
            .append("serviceDiagnostics", getServiceDiagnostics())
            .append("noOfStringTable", getNoOfStringTable())
            .append("stringTable", getStringTable())
            .append("additionalHeader", getAdditionalHeader())
            .toString();
    }

}
