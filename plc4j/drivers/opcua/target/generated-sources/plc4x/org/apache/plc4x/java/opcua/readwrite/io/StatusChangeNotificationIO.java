/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class StatusChangeNotificationIO implements MessageIO<StatusChangeNotification, StatusChangeNotification> {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatusChangeNotificationIO.class);

    @Override
    public StatusChangeNotification parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (StatusChangeNotification) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, StatusChangeNotification value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static StatusChangeNotificationBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("StatusChangeNotification");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (notificationLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int notificationLength = readBuffer.readInt("notificationLength", 32);

        readBuffer.pullContext("status");

        // Simple Field (status)
StatusCode status = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("status");

        readBuffer.pullContext("diagnosticInfo");

        // Simple Field (diagnosticInfo)
DiagnosticInfo diagnosticInfo = DiagnosticInfoIO.staticParse(readBuffer ) ;        readBuffer.closeContext("diagnosticInfo");

        readBuffer.closeContext("StatusChangeNotification");
        // Create the instance
        return new StatusChangeNotificationBuilder(status, diagnosticInfo);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, StatusChangeNotification _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("StatusChangeNotification");

        // Implicit Field (notificationLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int notificationLength = (int) (_value.getLengthInBytes());
        writeBuffer.writeInt("notificationLength", 32, ((Number) (notificationLength)).intValue());

        // Simple Field (status)
        StatusCode status = (StatusCode) _value.getStatus();
        writeBuffer.pushContext("status");
        StatusCodeIO.staticSerialize(writeBuffer, status);
        writeBuffer.popContext("status");

        // Simple Field (diagnosticInfo)
        DiagnosticInfo diagnosticInfo = (DiagnosticInfo) _value.getDiagnosticInfo();
        writeBuffer.pushContext("diagnosticInfo");
        DiagnosticInfoIO.staticSerialize(writeBuffer, diagnosticInfo);
        writeBuffer.popContext("diagnosticInfo");
        writeBuffer.popContext("StatusChangeNotification");
    }

    public static class StatusChangeNotificationBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final StatusCode status;
        private final DiagnosticInfo diagnosticInfo;

        public StatusChangeNotificationBuilder(StatusCode status, DiagnosticInfo diagnosticInfo) {
            this.status = status;
            this.diagnosticInfo = diagnosticInfo;
        }

        public StatusChangeNotification build() {
            return new StatusChangeNotification(status, diagnosticInfo);
        }
    }

}
