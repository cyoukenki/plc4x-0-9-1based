/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PubSubConnectionDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "15619";
    }

    // Properties.
    private final PascalString name;
    private final boolean enabled;
    private final Variant publisherId;
    private final PascalString transportProfileUri;
    private final ExtensionObject address;
    private final int noOfConnectionProperties;
    private final ExtensionObjectDefinition[] connectionProperties;
    private final ExtensionObject transportSettings;
    private final int noOfWriterGroups;
    private final PubSubGroupDataType[] writerGroups;
    private final int noOfReaderGroups;
    private final PubSubGroupDataType[] readerGroups;

    public PubSubConnectionDataType(PascalString name, boolean enabled, Variant publisherId, PascalString transportProfileUri, ExtensionObject address, int noOfConnectionProperties, ExtensionObjectDefinition[] connectionProperties, ExtensionObject transportSettings, int noOfWriterGroups, PubSubGroupDataType[] writerGroups, int noOfReaderGroups, PubSubGroupDataType[] readerGroups) {
        this.name = name;
        this.enabled = enabled;
        this.publisherId = publisherId;
        this.transportProfileUri = transportProfileUri;
        this.address = address;
        this.noOfConnectionProperties = noOfConnectionProperties;
        this.connectionProperties = connectionProperties;
        this.transportSettings = transportSettings;
        this.noOfWriterGroups = noOfWriterGroups;
        this.writerGroups = writerGroups;
        this.noOfReaderGroups = noOfReaderGroups;
        this.readerGroups = readerGroups;
    }

    public PascalString getName() {
        return name;
    }

    public boolean getEnabled() {
        return enabled;
    }

    public Variant getPublisherId() {
        return publisherId;
    }

    public PascalString getTransportProfileUri() {
        return transportProfileUri;
    }

    public ExtensionObject getAddress() {
        return address;
    }

    public int getNoOfConnectionProperties() {
        return noOfConnectionProperties;
    }

    public ExtensionObjectDefinition[] getConnectionProperties() {
        return connectionProperties;
    }

    public ExtensionObject getTransportSettings() {
        return transportSettings;
    }

    public int getNoOfWriterGroups() {
        return noOfWriterGroups;
    }

    public PubSubGroupDataType[] getWriterGroups() {
        return writerGroups;
    }

    public int getNoOfReaderGroups() {
        return noOfReaderGroups;
    }

    public PubSubGroupDataType[] getReaderGroups() {
        return readerGroups;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PubSubConnectionDataType _value  = this;

        // Simple field (name)
        lengthInBits += name.getLengthInBits();

        // Reserved Field (reserved)
        lengthInBits += 7;

        // Simple field (enabled)
        lengthInBits += 1;

        // Simple field (publisherId)
        lengthInBits += publisherId.getLengthInBits();

        // Simple field (transportProfileUri)
        lengthInBits += transportProfileUri.getLengthInBits();

        // Simple field (address)
        lengthInBits += address.getLengthInBits();

        // Simple field (noOfConnectionProperties)
        lengthInBits += 32;

        // Array field
        if(connectionProperties != null) {
            int i=0;
            for(ExtensionObjectDefinition element : connectionProperties) {
                boolean last = ++i >= connectionProperties.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (transportSettings)
        lengthInBits += transportSettings.getLengthInBits();

        // Simple field (noOfWriterGroups)
        lengthInBits += 32;

        // Array field
        if(writerGroups != null) {
            int i=0;
            for(PubSubGroupDataType element : writerGroups) {
                boolean last = ++i >= writerGroups.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (noOfReaderGroups)
        lengthInBits += 32;

        // Array field
        if(readerGroups != null) {
            int i=0;
            for(PubSubGroupDataType element : readerGroups) {
                boolean last = ++i >= readerGroups.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PubSubConnectionDataType)) {
            return false;
        }
        PubSubConnectionDataType that = (PubSubConnectionDataType) o;
        return
            (getName() == that.getName()) &&
            (getEnabled() == that.getEnabled()) &&
            (getPublisherId() == that.getPublisherId()) &&
            (getTransportProfileUri() == that.getTransportProfileUri()) &&
            (getAddress() == that.getAddress()) &&
            (getNoOfConnectionProperties() == that.getNoOfConnectionProperties()) &&
            (getConnectionProperties() == that.getConnectionProperties()) &&
            (getTransportSettings() == that.getTransportSettings()) &&
            (getNoOfWriterGroups() == that.getNoOfWriterGroups()) &&
            (getWriterGroups() == that.getWriterGroups()) &&
            (getNoOfReaderGroups() == that.getNoOfReaderGroups()) &&
            (getReaderGroups() == that.getReaderGroups()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getName(),
            getEnabled(),
            getPublisherId(),
            getTransportProfileUri(),
            getAddress(),
            getNoOfConnectionProperties(),
            getConnectionProperties(),
            getTransportSettings(),
            getNoOfWriterGroups(),
            getWriterGroups(),
            getNoOfReaderGroups(),
            getReaderGroups()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("name", getName())
            .append("enabled", getEnabled())
            .append("publisherId", getPublisherId())
            .append("transportProfileUri", getTransportProfileUri())
            .append("address", getAddress())
            .append("noOfConnectionProperties", getNoOfConnectionProperties())
            .append("connectionProperties", getConnectionProperties())
            .append("transportSettings", getTransportSettings())
            .append("noOfWriterGroups", getNoOfWriterGroups())
            .append("writerGroups", getWriterGroups())
            .append("noOfReaderGroups", getNoOfReaderGroups())
            .append("readerGroups", getReaderGroups())
            .toString();
    }

}
