/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class SessionDiagnosticsDataType extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "867";
    }

    // Properties.
    private final NodeId sessionId;
    private final PascalString sessionName;
    private final ExtensionObjectDefinition clientDescription;
    private final PascalString serverUri;
    private final PascalString endpointUrl;
    private final int noOfLocaleIds;
    private final PascalString[] localeIds;
    private final double actualSessionTimeout;
    private final long maxResponseMessageSize;
    private final long clientConnectionTime;
    private final long clientLastContactTime;
    private final long currentSubscriptionsCount;
    private final long currentMonitoredItemsCount;
    private final long currentPublishRequestsInQueue;
    private final ExtensionObjectDefinition totalRequestCount;
    private final long unauthorizedRequestCount;
    private final ExtensionObjectDefinition readCount;
    private final ExtensionObjectDefinition historyReadCount;
    private final ExtensionObjectDefinition writeCount;
    private final ExtensionObjectDefinition historyUpdateCount;
    private final ExtensionObjectDefinition callCount;
    private final ExtensionObjectDefinition createMonitoredItemsCount;
    private final ExtensionObjectDefinition modifyMonitoredItemsCount;
    private final ExtensionObjectDefinition setMonitoringModeCount;
    private final ExtensionObjectDefinition setTriggeringCount;
    private final ExtensionObjectDefinition deleteMonitoredItemsCount;
    private final ExtensionObjectDefinition createSubscriptionCount;
    private final ExtensionObjectDefinition modifySubscriptionCount;
    private final ExtensionObjectDefinition setPublishingModeCount;
    private final ExtensionObjectDefinition publishCount;
    private final ExtensionObjectDefinition republishCount;
    private final ExtensionObjectDefinition transferSubscriptionsCount;
    private final ExtensionObjectDefinition deleteSubscriptionsCount;
    private final ExtensionObjectDefinition addNodesCount;
    private final ExtensionObjectDefinition addReferencesCount;
    private final ExtensionObjectDefinition deleteNodesCount;
    private final ExtensionObjectDefinition deleteReferencesCount;
    private final ExtensionObjectDefinition browseCount;
    private final ExtensionObjectDefinition browseNextCount;
    private final ExtensionObjectDefinition translateBrowsePathsToNodeIdsCount;
    private final ExtensionObjectDefinition queryFirstCount;
    private final ExtensionObjectDefinition queryNextCount;
    private final ExtensionObjectDefinition registerNodesCount;
    private final ExtensionObjectDefinition unregisterNodesCount;

    public SessionDiagnosticsDataType(NodeId sessionId, PascalString sessionName, ExtensionObjectDefinition clientDescription, PascalString serverUri, PascalString endpointUrl, int noOfLocaleIds, PascalString[] localeIds, double actualSessionTimeout, long maxResponseMessageSize, long clientConnectionTime, long clientLastContactTime, long currentSubscriptionsCount, long currentMonitoredItemsCount, long currentPublishRequestsInQueue, ExtensionObjectDefinition totalRequestCount, long unauthorizedRequestCount, ExtensionObjectDefinition readCount, ExtensionObjectDefinition historyReadCount, ExtensionObjectDefinition writeCount, ExtensionObjectDefinition historyUpdateCount, ExtensionObjectDefinition callCount, ExtensionObjectDefinition createMonitoredItemsCount, ExtensionObjectDefinition modifyMonitoredItemsCount, ExtensionObjectDefinition setMonitoringModeCount, ExtensionObjectDefinition setTriggeringCount, ExtensionObjectDefinition deleteMonitoredItemsCount, ExtensionObjectDefinition createSubscriptionCount, ExtensionObjectDefinition modifySubscriptionCount, ExtensionObjectDefinition setPublishingModeCount, ExtensionObjectDefinition publishCount, ExtensionObjectDefinition republishCount, ExtensionObjectDefinition transferSubscriptionsCount, ExtensionObjectDefinition deleteSubscriptionsCount, ExtensionObjectDefinition addNodesCount, ExtensionObjectDefinition addReferencesCount, ExtensionObjectDefinition deleteNodesCount, ExtensionObjectDefinition deleteReferencesCount, ExtensionObjectDefinition browseCount, ExtensionObjectDefinition browseNextCount, ExtensionObjectDefinition translateBrowsePathsToNodeIdsCount, ExtensionObjectDefinition queryFirstCount, ExtensionObjectDefinition queryNextCount, ExtensionObjectDefinition registerNodesCount, ExtensionObjectDefinition unregisterNodesCount) {
        this.sessionId = sessionId;
        this.sessionName = sessionName;
        this.clientDescription = clientDescription;
        this.serverUri = serverUri;
        this.endpointUrl = endpointUrl;
        this.noOfLocaleIds = noOfLocaleIds;
        this.localeIds = localeIds;
        this.actualSessionTimeout = actualSessionTimeout;
        this.maxResponseMessageSize = maxResponseMessageSize;
        this.clientConnectionTime = clientConnectionTime;
        this.clientLastContactTime = clientLastContactTime;
        this.currentSubscriptionsCount = currentSubscriptionsCount;
        this.currentMonitoredItemsCount = currentMonitoredItemsCount;
        this.currentPublishRequestsInQueue = currentPublishRequestsInQueue;
        this.totalRequestCount = totalRequestCount;
        this.unauthorizedRequestCount = unauthorizedRequestCount;
        this.readCount = readCount;
        this.historyReadCount = historyReadCount;
        this.writeCount = writeCount;
        this.historyUpdateCount = historyUpdateCount;
        this.callCount = callCount;
        this.createMonitoredItemsCount = createMonitoredItemsCount;
        this.modifyMonitoredItemsCount = modifyMonitoredItemsCount;
        this.setMonitoringModeCount = setMonitoringModeCount;
        this.setTriggeringCount = setTriggeringCount;
        this.deleteMonitoredItemsCount = deleteMonitoredItemsCount;
        this.createSubscriptionCount = createSubscriptionCount;
        this.modifySubscriptionCount = modifySubscriptionCount;
        this.setPublishingModeCount = setPublishingModeCount;
        this.publishCount = publishCount;
        this.republishCount = republishCount;
        this.transferSubscriptionsCount = transferSubscriptionsCount;
        this.deleteSubscriptionsCount = deleteSubscriptionsCount;
        this.addNodesCount = addNodesCount;
        this.addReferencesCount = addReferencesCount;
        this.deleteNodesCount = deleteNodesCount;
        this.deleteReferencesCount = deleteReferencesCount;
        this.browseCount = browseCount;
        this.browseNextCount = browseNextCount;
        this.translateBrowsePathsToNodeIdsCount = translateBrowsePathsToNodeIdsCount;
        this.queryFirstCount = queryFirstCount;
        this.queryNextCount = queryNextCount;
        this.registerNodesCount = registerNodesCount;
        this.unregisterNodesCount = unregisterNodesCount;
    }

    public NodeId getSessionId() {
        return sessionId;
    }

    public PascalString getSessionName() {
        return sessionName;
    }

    public ExtensionObjectDefinition getClientDescription() {
        return clientDescription;
    }

    public PascalString getServerUri() {
        return serverUri;
    }

    public PascalString getEndpointUrl() {
        return endpointUrl;
    }

    public int getNoOfLocaleIds() {
        return noOfLocaleIds;
    }

    public PascalString[] getLocaleIds() {
        return localeIds;
    }

    public double getActualSessionTimeout() {
        return actualSessionTimeout;
    }

    public long getMaxResponseMessageSize() {
        return maxResponseMessageSize;
    }

    public long getClientConnectionTime() {
        return clientConnectionTime;
    }

    public long getClientLastContactTime() {
        return clientLastContactTime;
    }

    public long getCurrentSubscriptionsCount() {
        return currentSubscriptionsCount;
    }

    public long getCurrentMonitoredItemsCount() {
        return currentMonitoredItemsCount;
    }

    public long getCurrentPublishRequestsInQueue() {
        return currentPublishRequestsInQueue;
    }

    public ExtensionObjectDefinition getTotalRequestCount() {
        return totalRequestCount;
    }

    public long getUnauthorizedRequestCount() {
        return unauthorizedRequestCount;
    }

    public ExtensionObjectDefinition getReadCount() {
        return readCount;
    }

    public ExtensionObjectDefinition getHistoryReadCount() {
        return historyReadCount;
    }

    public ExtensionObjectDefinition getWriteCount() {
        return writeCount;
    }

    public ExtensionObjectDefinition getHistoryUpdateCount() {
        return historyUpdateCount;
    }

    public ExtensionObjectDefinition getCallCount() {
        return callCount;
    }

    public ExtensionObjectDefinition getCreateMonitoredItemsCount() {
        return createMonitoredItemsCount;
    }

    public ExtensionObjectDefinition getModifyMonitoredItemsCount() {
        return modifyMonitoredItemsCount;
    }

    public ExtensionObjectDefinition getSetMonitoringModeCount() {
        return setMonitoringModeCount;
    }

    public ExtensionObjectDefinition getSetTriggeringCount() {
        return setTriggeringCount;
    }

    public ExtensionObjectDefinition getDeleteMonitoredItemsCount() {
        return deleteMonitoredItemsCount;
    }

    public ExtensionObjectDefinition getCreateSubscriptionCount() {
        return createSubscriptionCount;
    }

    public ExtensionObjectDefinition getModifySubscriptionCount() {
        return modifySubscriptionCount;
    }

    public ExtensionObjectDefinition getSetPublishingModeCount() {
        return setPublishingModeCount;
    }

    public ExtensionObjectDefinition getPublishCount() {
        return publishCount;
    }

    public ExtensionObjectDefinition getRepublishCount() {
        return republishCount;
    }

    public ExtensionObjectDefinition getTransferSubscriptionsCount() {
        return transferSubscriptionsCount;
    }

    public ExtensionObjectDefinition getDeleteSubscriptionsCount() {
        return deleteSubscriptionsCount;
    }

    public ExtensionObjectDefinition getAddNodesCount() {
        return addNodesCount;
    }

    public ExtensionObjectDefinition getAddReferencesCount() {
        return addReferencesCount;
    }

    public ExtensionObjectDefinition getDeleteNodesCount() {
        return deleteNodesCount;
    }

    public ExtensionObjectDefinition getDeleteReferencesCount() {
        return deleteReferencesCount;
    }

    public ExtensionObjectDefinition getBrowseCount() {
        return browseCount;
    }

    public ExtensionObjectDefinition getBrowseNextCount() {
        return browseNextCount;
    }

    public ExtensionObjectDefinition getTranslateBrowsePathsToNodeIdsCount() {
        return translateBrowsePathsToNodeIdsCount;
    }

    public ExtensionObjectDefinition getQueryFirstCount() {
        return queryFirstCount;
    }

    public ExtensionObjectDefinition getQueryNextCount() {
        return queryNextCount;
    }

    public ExtensionObjectDefinition getRegisterNodesCount() {
        return registerNodesCount;
    }

    public ExtensionObjectDefinition getUnregisterNodesCount() {
        return unregisterNodesCount;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        SessionDiagnosticsDataType _value  = this;

        // Simple field (sessionId)
        lengthInBits += sessionId.getLengthInBits();

        // Simple field (sessionName)
        lengthInBits += sessionName.getLengthInBits();

        // Simple field (clientDescription)
        lengthInBits += clientDescription.getLengthInBits();

        // Simple field (serverUri)
        lengthInBits += serverUri.getLengthInBits();

        // Simple field (endpointUrl)
        lengthInBits += endpointUrl.getLengthInBits();

        // Simple field (noOfLocaleIds)
        lengthInBits += 32;

        // Array field
        if(localeIds != null) {
            int i=0;
            for(PascalString element : localeIds) {
                boolean last = ++i >= localeIds.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (actualSessionTimeout)
        lengthInBits += 64;

        // Simple field (maxResponseMessageSize)
        lengthInBits += 32;

        // Simple field (clientConnectionTime)
        lengthInBits += 64;

        // Simple field (clientLastContactTime)
        lengthInBits += 64;

        // Simple field (currentSubscriptionsCount)
        lengthInBits += 32;

        // Simple field (currentMonitoredItemsCount)
        lengthInBits += 32;

        // Simple field (currentPublishRequestsInQueue)
        lengthInBits += 32;

        // Simple field (totalRequestCount)
        lengthInBits += totalRequestCount.getLengthInBits();

        // Simple field (unauthorizedRequestCount)
        lengthInBits += 32;

        // Simple field (readCount)
        lengthInBits += readCount.getLengthInBits();

        // Simple field (historyReadCount)
        lengthInBits += historyReadCount.getLengthInBits();

        // Simple field (writeCount)
        lengthInBits += writeCount.getLengthInBits();

        // Simple field (historyUpdateCount)
        lengthInBits += historyUpdateCount.getLengthInBits();

        // Simple field (callCount)
        lengthInBits += callCount.getLengthInBits();

        // Simple field (createMonitoredItemsCount)
        lengthInBits += createMonitoredItemsCount.getLengthInBits();

        // Simple field (modifyMonitoredItemsCount)
        lengthInBits += modifyMonitoredItemsCount.getLengthInBits();

        // Simple field (setMonitoringModeCount)
        lengthInBits += setMonitoringModeCount.getLengthInBits();

        // Simple field (setTriggeringCount)
        lengthInBits += setTriggeringCount.getLengthInBits();

        // Simple field (deleteMonitoredItemsCount)
        lengthInBits += deleteMonitoredItemsCount.getLengthInBits();

        // Simple field (createSubscriptionCount)
        lengthInBits += createSubscriptionCount.getLengthInBits();

        // Simple field (modifySubscriptionCount)
        lengthInBits += modifySubscriptionCount.getLengthInBits();

        // Simple field (setPublishingModeCount)
        lengthInBits += setPublishingModeCount.getLengthInBits();

        // Simple field (publishCount)
        lengthInBits += publishCount.getLengthInBits();

        // Simple field (republishCount)
        lengthInBits += republishCount.getLengthInBits();

        // Simple field (transferSubscriptionsCount)
        lengthInBits += transferSubscriptionsCount.getLengthInBits();

        // Simple field (deleteSubscriptionsCount)
        lengthInBits += deleteSubscriptionsCount.getLengthInBits();

        // Simple field (addNodesCount)
        lengthInBits += addNodesCount.getLengthInBits();

        // Simple field (addReferencesCount)
        lengthInBits += addReferencesCount.getLengthInBits();

        // Simple field (deleteNodesCount)
        lengthInBits += deleteNodesCount.getLengthInBits();

        // Simple field (deleteReferencesCount)
        lengthInBits += deleteReferencesCount.getLengthInBits();

        // Simple field (browseCount)
        lengthInBits += browseCount.getLengthInBits();

        // Simple field (browseNextCount)
        lengthInBits += browseNextCount.getLengthInBits();

        // Simple field (translateBrowsePathsToNodeIdsCount)
        lengthInBits += translateBrowsePathsToNodeIdsCount.getLengthInBits();

        // Simple field (queryFirstCount)
        lengthInBits += queryFirstCount.getLengthInBits();

        // Simple field (queryNextCount)
        lengthInBits += queryNextCount.getLengthInBits();

        // Simple field (registerNodesCount)
        lengthInBits += registerNodesCount.getLengthInBits();

        // Simple field (unregisterNodesCount)
        lengthInBits += unregisterNodesCount.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SessionDiagnosticsDataType)) {
            return false;
        }
        SessionDiagnosticsDataType that = (SessionDiagnosticsDataType) o;
        return
            (getSessionId() == that.getSessionId()) &&
            (getSessionName() == that.getSessionName()) &&
            (getClientDescription() == that.getClientDescription()) &&
            (getServerUri() == that.getServerUri()) &&
            (getEndpointUrl() == that.getEndpointUrl()) &&
            (getNoOfLocaleIds() == that.getNoOfLocaleIds()) &&
            (getLocaleIds() == that.getLocaleIds()) &&
            (getActualSessionTimeout() == that.getActualSessionTimeout()) &&
            (getMaxResponseMessageSize() == that.getMaxResponseMessageSize()) &&
            (getClientConnectionTime() == that.getClientConnectionTime()) &&
            (getClientLastContactTime() == that.getClientLastContactTime()) &&
            (getCurrentSubscriptionsCount() == that.getCurrentSubscriptionsCount()) &&
            (getCurrentMonitoredItemsCount() == that.getCurrentMonitoredItemsCount()) &&
            (getCurrentPublishRequestsInQueue() == that.getCurrentPublishRequestsInQueue()) &&
            (getTotalRequestCount() == that.getTotalRequestCount()) &&
            (getUnauthorizedRequestCount() == that.getUnauthorizedRequestCount()) &&
            (getReadCount() == that.getReadCount()) &&
            (getHistoryReadCount() == that.getHistoryReadCount()) &&
            (getWriteCount() == that.getWriteCount()) &&
            (getHistoryUpdateCount() == that.getHistoryUpdateCount()) &&
            (getCallCount() == that.getCallCount()) &&
            (getCreateMonitoredItemsCount() == that.getCreateMonitoredItemsCount()) &&
            (getModifyMonitoredItemsCount() == that.getModifyMonitoredItemsCount()) &&
            (getSetMonitoringModeCount() == that.getSetMonitoringModeCount()) &&
            (getSetTriggeringCount() == that.getSetTriggeringCount()) &&
            (getDeleteMonitoredItemsCount() == that.getDeleteMonitoredItemsCount()) &&
            (getCreateSubscriptionCount() == that.getCreateSubscriptionCount()) &&
            (getModifySubscriptionCount() == that.getModifySubscriptionCount()) &&
            (getSetPublishingModeCount() == that.getSetPublishingModeCount()) &&
            (getPublishCount() == that.getPublishCount()) &&
            (getRepublishCount() == that.getRepublishCount()) &&
            (getTransferSubscriptionsCount() == that.getTransferSubscriptionsCount()) &&
            (getDeleteSubscriptionsCount() == that.getDeleteSubscriptionsCount()) &&
            (getAddNodesCount() == that.getAddNodesCount()) &&
            (getAddReferencesCount() == that.getAddReferencesCount()) &&
            (getDeleteNodesCount() == that.getDeleteNodesCount()) &&
            (getDeleteReferencesCount() == that.getDeleteReferencesCount()) &&
            (getBrowseCount() == that.getBrowseCount()) &&
            (getBrowseNextCount() == that.getBrowseNextCount()) &&
            (getTranslateBrowsePathsToNodeIdsCount() == that.getTranslateBrowsePathsToNodeIdsCount()) &&
            (getQueryFirstCount() == that.getQueryFirstCount()) &&
            (getQueryNextCount() == that.getQueryNextCount()) &&
            (getRegisterNodesCount() == that.getRegisterNodesCount()) &&
            (getUnregisterNodesCount() == that.getUnregisterNodesCount()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getSessionId(),
            getSessionName(),
            getClientDescription(),
            getServerUri(),
            getEndpointUrl(),
            getNoOfLocaleIds(),
            getLocaleIds(),
            getActualSessionTimeout(),
            getMaxResponseMessageSize(),
            getClientConnectionTime(),
            getClientLastContactTime(),
            getCurrentSubscriptionsCount(),
            getCurrentMonitoredItemsCount(),
            getCurrentPublishRequestsInQueue(),
            getTotalRequestCount(),
            getUnauthorizedRequestCount(),
            getReadCount(),
            getHistoryReadCount(),
            getWriteCount(),
            getHistoryUpdateCount(),
            getCallCount(),
            getCreateMonitoredItemsCount(),
            getModifyMonitoredItemsCount(),
            getSetMonitoringModeCount(),
            getSetTriggeringCount(),
            getDeleteMonitoredItemsCount(),
            getCreateSubscriptionCount(),
            getModifySubscriptionCount(),
            getSetPublishingModeCount(),
            getPublishCount(),
            getRepublishCount(),
            getTransferSubscriptionsCount(),
            getDeleteSubscriptionsCount(),
            getAddNodesCount(),
            getAddReferencesCount(),
            getDeleteNodesCount(),
            getDeleteReferencesCount(),
            getBrowseCount(),
            getBrowseNextCount(),
            getTranslateBrowsePathsToNodeIdsCount(),
            getQueryFirstCount(),
            getQueryNextCount(),
            getRegisterNodesCount(),
            getUnregisterNodesCount()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("sessionId", getSessionId())
            .append("sessionName", getSessionName())
            .append("clientDescription", getClientDescription())
            .append("serverUri", getServerUri())
            .append("endpointUrl", getEndpointUrl())
            .append("noOfLocaleIds", getNoOfLocaleIds())
            .append("localeIds", getLocaleIds())
            .append("actualSessionTimeout", getActualSessionTimeout())
            .append("maxResponseMessageSize", getMaxResponseMessageSize())
            .append("clientConnectionTime", getClientConnectionTime())
            .append("clientLastContactTime", getClientLastContactTime())
            .append("currentSubscriptionsCount", getCurrentSubscriptionsCount())
            .append("currentMonitoredItemsCount", getCurrentMonitoredItemsCount())
            .append("currentPublishRequestsInQueue", getCurrentPublishRequestsInQueue())
            .append("totalRequestCount", getTotalRequestCount())
            .append("unauthorizedRequestCount", getUnauthorizedRequestCount())
            .append("readCount", getReadCount())
            .append("historyReadCount", getHistoryReadCount())
            .append("writeCount", getWriteCount())
            .append("historyUpdateCount", getHistoryUpdateCount())
            .append("callCount", getCallCount())
            .append("createMonitoredItemsCount", getCreateMonitoredItemsCount())
            .append("modifyMonitoredItemsCount", getModifyMonitoredItemsCount())
            .append("setMonitoringModeCount", getSetMonitoringModeCount())
            .append("setTriggeringCount", getSetTriggeringCount())
            .append("deleteMonitoredItemsCount", getDeleteMonitoredItemsCount())
            .append("createSubscriptionCount", getCreateSubscriptionCount())
            .append("modifySubscriptionCount", getModifySubscriptionCount())
            .append("setPublishingModeCount", getSetPublishingModeCount())
            .append("publishCount", getPublishCount())
            .append("republishCount", getRepublishCount())
            .append("transferSubscriptionsCount", getTransferSubscriptionsCount())
            .append("deleteSubscriptionsCount", getDeleteSubscriptionsCount())
            .append("addNodesCount", getAddNodesCount())
            .append("addReferencesCount", getAddReferencesCount())
            .append("deleteNodesCount", getDeleteNodesCount())
            .append("deleteReferencesCount", getDeleteReferencesCount())
            .append("browseCount", getBrowseCount())
            .append("browseNextCount", getBrowseNextCount())
            .append("translateBrowsePathsToNodeIdsCount", getTranslateBrowsePathsToNodeIdsCount())
            .append("queryFirstCount", getQueryFirstCount())
            .append("queryNextCount", getQueryNextCount())
            .append("registerNodesCount", getRegisterNodesCount())
            .append("unregisterNodesCount", getUnregisterNodesCount())
            .toString();
    }

}
