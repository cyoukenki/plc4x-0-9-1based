/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.*;
import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ContentFilterElementResultIO implements MessageIO<ContentFilterElementResult, ContentFilterElementResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContentFilterElementResultIO.class);

    @Override
    public ContentFilterElementResult parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ContentFilterElementResult) new ExtensionObjectDefinitionIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ContentFilterElementResult value, Object... args) throws ParseException {
        new ExtensionObjectDefinitionIO().serialize(writeBuffer, value, args);
    }

    public static ContentFilterElementResultBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ContentFilterElementResult");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("statusCode");

        // Simple Field (statusCode)
StatusCode statusCode = StatusCodeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("statusCode");


        // Simple Field (noOfOperandStatusCodes)
int noOfOperandStatusCodes = readBuffer.readInt("noOfOperandStatusCodes", 32) ;        // Array field (operandStatusCodes)
        readBuffer.pullContext("operandStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfOperandStatusCodes > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfOperandStatusCodes) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        StatusCode[] operandStatusCodes;
        {
            int itemCount = Math.max(0, (int) noOfOperandStatusCodes);
            operandStatusCodes = new StatusCode[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
operandStatusCodes[curItem] = StatusCodeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("operandStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (noOfOperandDiagnosticInfos)
int noOfOperandDiagnosticInfos = readBuffer.readInt("noOfOperandDiagnosticInfos", 32) ;        // Array field (operandDiagnosticInfos)
        readBuffer.pullContext("operandDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(noOfOperandDiagnosticInfos > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (noOfOperandDiagnosticInfos) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DiagnosticInfo[] operandDiagnosticInfos;
        {
            int itemCount = Math.max(0, (int) noOfOperandDiagnosticInfos);
            operandDiagnosticInfos = new DiagnosticInfo[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
operandDiagnosticInfos[curItem] = DiagnosticInfoIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("operandDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ContentFilterElementResult");
        // Create the instance
        return new ContentFilterElementResultBuilder(statusCode, noOfOperandStatusCodes, operandStatusCodes, noOfOperandDiagnosticInfos, operandDiagnosticInfos);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ContentFilterElementResult _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ContentFilterElementResult");

        // Simple Field (statusCode)
        StatusCode statusCode = (StatusCode) _value.getStatusCode();
        writeBuffer.pushContext("statusCode");
        StatusCodeIO.staticSerialize(writeBuffer, statusCode);
        writeBuffer.popContext("statusCode");

        // Simple Field (noOfOperandStatusCodes)
        int noOfOperandStatusCodes = (int) _value.getNoOfOperandStatusCodes();
        writeBuffer.writeInt("noOfOperandStatusCodes", 32, ((Number) (noOfOperandStatusCodes)).intValue());

        // Array Field (operandStatusCodes)
        if(_value.getOperandStatusCodes() != null) {
            writeBuffer.pushContext("operandStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getOperandStatusCodes().length;
            int curItem = 0;
            for(StatusCode element : _value.getOperandStatusCodes()) {
                boolean lastItem = curItem == (itemCount - 1);
                StatusCodeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("operandStatusCodes", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (noOfOperandDiagnosticInfos)
        int noOfOperandDiagnosticInfos = (int) _value.getNoOfOperandDiagnosticInfos();
        writeBuffer.writeInt("noOfOperandDiagnosticInfos", 32, ((Number) (noOfOperandDiagnosticInfos)).intValue());

        // Array Field (operandDiagnosticInfos)
        if(_value.getOperandDiagnosticInfos() != null) {
            writeBuffer.pushContext("operandDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getOperandDiagnosticInfos().length;
            int curItem = 0;
            for(DiagnosticInfo element : _value.getOperandDiagnosticInfos()) {
                boolean lastItem = curItem == (itemCount - 1);
                DiagnosticInfoIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("operandDiagnosticInfos", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ContentFilterElementResult");
    }

    public static class ContentFilterElementResultBuilder implements ExtensionObjectDefinitionIO.ExtensionObjectDefinitionBuilder {
        private final StatusCode statusCode;
        private final int noOfOperandStatusCodes;
        private final StatusCode[] operandStatusCodes;
        private final int noOfOperandDiagnosticInfos;
        private final DiagnosticInfo[] operandDiagnosticInfos;

        public ContentFilterElementResultBuilder(StatusCode statusCode, int noOfOperandStatusCodes, StatusCode[] operandStatusCodes, int noOfOperandDiagnosticInfos, DiagnosticInfo[] operandDiagnosticInfos) {
            this.statusCode = statusCode;
            this.noOfOperandStatusCodes = noOfOperandStatusCodes;
            this.operandStatusCodes = operandStatusCodes;
            this.noOfOperandDiagnosticInfos = noOfOperandDiagnosticInfos;
            this.operandDiagnosticInfos = operandDiagnosticInfos;
        }

        public ContentFilterElementResult build() {
            return new ContentFilterElementResult(statusCode, noOfOperandStatusCodes, operandStatusCodes, noOfOperandDiagnosticInfos, operandDiagnosticInfos);
        }
    }

}
