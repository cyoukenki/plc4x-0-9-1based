/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum FilterOperator {

    filterOperatorEquals((long) 0),
    filterOperatorIsNull((long) 1),
    filterOperatorGreaterThan((long) 2),
    filterOperatorLessThan((long) 3),
    filterOperatorGreaterThanOrEqual((long) 4),
    filterOperatorLessThanOrEqual((long) 5),
    filterOperatorLike((long) 6),
    filterOperatorNot((long) 7),
    filterOperatorBetween((long) 8),
    filterOperatorInList((long) 9),
    filterOperatorAnd((long) 10),
    filterOperatorOr((long) 11),
    filterOperatorCast((long) 12),
    filterOperatorInView((long) 13),
    filterOperatorOfType((long) 14),
    filterOperatorRelatedTo((long) 15),
    filterOperatorBitwiseAnd((long) 16),
    filterOperatorBitwiseOr((long) 17);

    private static final Logger logger = LoggerFactory.getLogger(FilterOperator.class);

    private static final Map<Long, FilterOperator> map;
    static {
        map = new HashMap<>();
        for (FilterOperator value : FilterOperator.values()) {
            map.put((long) value.getValue(), value);
        }
    }

    private long value;

    FilterOperator(long value) {
        this.value = value;
    }

    public long getValue() {
        return value;
    }

    public static FilterOperator enumForValue(long value) {
        if (!map.containsKey(value)) {
            logger.error("No FilterOperator for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(long value) {
        return map.containsKey(value);
    }

}
