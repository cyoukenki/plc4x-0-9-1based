/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.opcua.readwrite.io.*;
import org.apache.plc4x.java.opcua.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class EndpointDescription extends ExtensionObjectDefinition implements Message {

    // Accessors for discriminator values.
    public String getIdentifier() {
        return "314";
    }

    // Properties.
    private final PascalString endpointUrl;
    private final ExtensionObjectDefinition server;
    private final PascalByteString serverCertificate;
    private final MessageSecurityMode securityMode;
    private final PascalString securityPolicyUri;
    private final int noOfUserIdentityTokens;
    private final ExtensionObjectDefinition[] userIdentityTokens;
    private final PascalString transportProfileUri;
    private final short securityLevel;

    public EndpointDescription(PascalString endpointUrl, ExtensionObjectDefinition server, PascalByteString serverCertificate, MessageSecurityMode securityMode, PascalString securityPolicyUri, int noOfUserIdentityTokens, ExtensionObjectDefinition[] userIdentityTokens, PascalString transportProfileUri, short securityLevel) {
        this.endpointUrl = endpointUrl;
        this.server = server;
        this.serverCertificate = serverCertificate;
        this.securityMode = securityMode;
        this.securityPolicyUri = securityPolicyUri;
        this.noOfUserIdentityTokens = noOfUserIdentityTokens;
        this.userIdentityTokens = userIdentityTokens;
        this.transportProfileUri = transportProfileUri;
        this.securityLevel = securityLevel;
    }

    public PascalString getEndpointUrl() {
        return endpointUrl;
    }

    public ExtensionObjectDefinition getServer() {
        return server;
    }

    public PascalByteString getServerCertificate() {
        return serverCertificate;
    }

    public MessageSecurityMode getSecurityMode() {
        return securityMode;
    }

    public PascalString getSecurityPolicyUri() {
        return securityPolicyUri;
    }

    public int getNoOfUserIdentityTokens() {
        return noOfUserIdentityTokens;
    }

    public ExtensionObjectDefinition[] getUserIdentityTokens() {
        return userIdentityTokens;
    }

    public PascalString getTransportProfileUri() {
        return transportProfileUri;
    }

    public short getSecurityLevel() {
        return securityLevel;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        EndpointDescription _value  = this;

        // Simple field (endpointUrl)
        lengthInBits += endpointUrl.getLengthInBits();

        // Simple field (server)
        lengthInBits += server.getLengthInBits();

        // Simple field (serverCertificate)
        lengthInBits += serverCertificate.getLengthInBits();

        // Simple field (securityMode)
        lengthInBits += 32;

        // Simple field (securityPolicyUri)
        lengthInBits += securityPolicyUri.getLengthInBits();

        // Simple field (noOfUserIdentityTokens)
        lengthInBits += 32;

        // Array field
        if(userIdentityTokens != null) {
            int i=0;
            for(ExtensionObjectDefinition element : userIdentityTokens) {
                boolean last = ++i >= userIdentityTokens.length;
                lengthInBits += element.getLengthInBitsConditional(last);
            }
        }

        // Simple field (transportProfileUri)
        lengthInBits += transportProfileUri.getLengthInBits();

        // Simple field (securityLevel)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<ExtensionObjectDefinition, ExtensionObjectDefinition> getMessageIO() {
        return new ExtensionObjectDefinitionIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof EndpointDescription)) {
            return false;
        }
        EndpointDescription that = (EndpointDescription) o;
        return
            (getEndpointUrl() == that.getEndpointUrl()) &&
            (getServer() == that.getServer()) &&
            (getServerCertificate() == that.getServerCertificate()) &&
            (getSecurityMode() == that.getSecurityMode()) &&
            (getSecurityPolicyUri() == that.getSecurityPolicyUri()) &&
            (getNoOfUserIdentityTokens() == that.getNoOfUserIdentityTokens()) &&
            (getUserIdentityTokens() == that.getUserIdentityTokens()) &&
            (getTransportProfileUri() == that.getTransportProfileUri()) &&
            (getSecurityLevel() == that.getSecurityLevel()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getEndpointUrl(),
            getServer(),
            getServerCertificate(),
            getSecurityMode(),
            getSecurityPolicyUri(),
            getNoOfUserIdentityTokens(),
            getUserIdentityTokens(),
            getTransportProfileUri(),
            getSecurityLevel()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("endpointUrl", getEndpointUrl())
            .append("server", getServer())
            .append("serverCertificate", getServerCertificate())
            .append("securityMode", getSecurityMode())
            .append("securityPolicyUri", getSecurityPolicyUri())
            .append("noOfUserIdentityTokens", getNoOfUserIdentityTokens())
            .append("userIdentityTokens", getUserIdentityTokens())
            .append("transportProfileUri", getTransportProfileUri())
            .append("securityLevel", getSecurityLevel())
            .toString();
    }

}
