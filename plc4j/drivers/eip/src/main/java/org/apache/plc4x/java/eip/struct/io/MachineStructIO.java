/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.struct.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.struct.*;

import org.apache.plc4x.java.eip.struct.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class MachineStructIO implements MessageIO<MachineStruct, MachineStruct> {

    private static final Logger LOGGER = LoggerFactory.getLogger(MachineStructIO.class);

    @Override
    public MachineStruct parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return MachineStructIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, MachineStruct value, Object... args) throws ParseException {
        MachineStructIO.staticSerialize(writeBuffer, value);
    }

    public static MachineStruct staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("MachineStruct");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (id)
short id = readBuffer.readShort("id", 16) ;

        // Simple Field (var1)
byte var1 = readBuffer.readSignedByte("var1", 8) ;

        // Simple Field (var2)
int var2 = readBuffer.readInt("var2", 32) ;

        // Simple Field (var3)
byte var3 = readBuffer.readSignedByte("var3", 8) ;
        readBuffer.closeContext("MachineStruct");
        // Create the instance
        return new MachineStruct(id, var1, var2, var3);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, MachineStruct _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("MachineStruct");

        // Simple Field (id)
        short id = (short) _value.getId();
        writeBuffer.writeShort("id", 16, ((Number) (id)).shortValue());

        // Simple Field (var1)
        byte var1 = (byte) _value.getVar1();
        writeBuffer.writeSignedByte("var1", 8, ((Number) (var1)).byteValue());

        // Simple Field (var2)
        int var2 = (int) _value.getVar2();
        writeBuffer.writeInt("var2", 32, ((Number) (var2)).intValue());

        // Simple Field (var3)
        byte var3 = (byte) _value.getVar3();
        writeBuffer.writeSignedByte("var3", 8, ((Number) (var3)).byteValue());
        writeBuffer.popContext("MachineStruct");
    }

}
