/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.struct;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.struct.io.*;
import org.apache.plc4x.java.eip.struct.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class MachineStruct implements Message {


    // Properties.
    private final short id;
    private final byte var1;
    private final int var2;
    private final byte var3;

    public MachineStruct(short id, byte var1, int var2, byte var3) {
        this.id = id;
        this.var1 = var1;
        this.var2 = var2;
        this.var3 = var3;
    }

    public short getId() {
        return id;
    }

    public byte getVar1() {
        return var1;
    }

    public int getVar2() {
        return var2;
    }

    public byte getVar3() {
        return var3;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        MachineStruct _value  = this;

        // Simple field (id)
        lengthInBits += 16;

        // Simple field (var1)
        lengthInBits += 8;

        // Simple field (var2)
        lengthInBits += 32;

        // Simple field (var3)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<MachineStruct, MachineStruct> getMessageIO() {
        return new MachineStructIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MachineStruct)) {
            return false;
        }
        MachineStruct that = (MachineStruct) o;
        return
            (getId() == that.getId()) &&
            (getVar1() == that.getVar1()) &&
            (getVar2() == that.getVar2()) &&
            (getVar3() == that.getVar3()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getId(),
            getVar1(),
            getVar2(),
            getVar3()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("id", getId())
            .append("var1", getVar1())
            .append("var2", getVar2())
            .append("var3", getVar3())
            .toString();
    }

}
