/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class MultipleServiceRequestIO implements MessageIO<MultipleServiceRequest, MultipleServiceRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(MultipleServiceRequestIO.class);

    @Override
    public MultipleServiceRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (MultipleServiceRequest) new CipServiceIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, MultipleServiceRequest value, Object... args) throws ParseException {
        new CipServiceIO().serialize(writeBuffer, value, args);
    }

    public static MultipleServiceRequestBuilder staticParse(ReadBuffer readBuffer, Integer serviceLen) throws ParseException {
        readBuffer.pullContext("MultipleServiceRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (RequestPathSize)
        byte RequestPathSize = readBuffer.readSignedByte("RequestPathSize", 8);
        if(RequestPathSize != MultipleServiceRequest.REQUESTPATHSIZE) {
            throw new ParseException("Expected constant value " + MultipleServiceRequest.REQUESTPATHSIZE + " but got " + RequestPathSize);
        }

        // Const Field (RequestPath)
        long RequestPath = readBuffer.readUnsignedLong("RequestPath", 32);
        if(RequestPath != MultipleServiceRequest.REQUESTPATH) {
            throw new ParseException("Expected constant value " + MultipleServiceRequest.REQUESTPATH + " but got " + RequestPath);
        }

        readBuffer.pullContext("data");

        // Simple Field (data)
Services data = ServicesIO.staticParse(readBuffer , (int) ((serviceLen) - (6)) ) ;        readBuffer.closeContext("data");

        readBuffer.closeContext("MultipleServiceRequest");
        // Create the instance
        return new MultipleServiceRequestBuilder(data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, MultipleServiceRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("MultipleServiceRequest");

        // Const Field (RequestPathSize)
        writeBuffer.writeSignedByte("RequestPathSize", 8, ((Number) 0x02).byteValue());

        // Const Field (RequestPath)
        writeBuffer.writeUnsignedLong("RequestPath", 32, ((Number) 0x01240220).longValue());

        // Simple Field (data)
        Services data = (Services) _value.getData();
        writeBuffer.pushContext("data");
        ServicesIO.staticSerialize(writeBuffer, data);
        writeBuffer.popContext("data");
        writeBuffer.popContext("MultipleServiceRequest");
    }

    public static class MultipleServiceRequestBuilder implements CipServiceIO.CipServiceBuilder {
        private final Services data;

        public MultipleServiceRequestBuilder(Services data) {
            this.data = data;
        }

        public MultipleServiceRequest build() {
            return new MultipleServiceRequest(data);
        }
    }

}
