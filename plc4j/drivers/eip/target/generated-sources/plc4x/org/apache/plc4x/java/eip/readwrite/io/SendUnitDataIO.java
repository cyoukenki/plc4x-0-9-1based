/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SendUnitDataIO implements MessageIO<SendUnitData, SendUnitData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SendUnitDataIO.class);

    @Override
    public SendUnitData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (SendUnitData) new EipPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SendUnitData value, Object... args) throws ParseException {
        new EipPacketIO().serialize(writeBuffer, value, args);
    }

    public static SendUnitDataBuilder staticParse(ReadBuffer readBuffer, Integer len) throws ParseException {
        readBuffer.pullContext("SendUnitData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (api_handle)
        long api_handle = readBuffer.readUnsignedLong("api_handle", 32);
        if(api_handle != SendUnitData.API_HANDLE) {
            throw new ParseException("Expected constant value " + SendUnitData.API_HANDLE + " but got " + api_handle);
        }

        // Const Field (timeout)
        int timeout = readBuffer.readUnsignedInt("timeout", 16);
        if(timeout != SendUnitData.TIMEOUT) {
            throw new ParseException("Expected constant value " + SendUnitData.TIMEOUT + " but got " + timeout);
        }

        // Const Field (item_count)
        int item_count = readBuffer.readUnsignedInt("item_count", 16);
        if(item_count != SendUnitData.ITEM_COUNT) {
            throw new ParseException("Expected constant value " + SendUnitData.ITEM_COUNT + " but got " + item_count);
        }

        // Const Field (connection_address)
        int connection_address = readBuffer.readUnsignedInt("connection_address", 16);
        if(connection_address != SendUnitData.CONNECTION_ADDRESS) {
            throw new ParseException("Expected constant value " + SendUnitData.CONNECTION_ADDRESS + " but got " + connection_address);
        }

        // Const Field (connection_length)
        int connection_length = readBuffer.readUnsignedInt("connection_length", 16);
        if(connection_length != SendUnitData.CONNECTION_LENGTH) {
            throw new ParseException("Expected constant value " + SendUnitData.CONNECTION_LENGTH + " but got " + connection_length);
        }


        // Simple Field (o_t_connection_id)
long o_t_connection_id = readBuffer.readUnsignedLong("o_t_connection_id", 32) ;
        // Const Field (connection_data_item)
        int connection_data_item = readBuffer.readUnsignedInt("connection_data_item", 16);
        if(connection_data_item != SendUnitData.CONNECTION_DATA_ITEM) {
            throw new ParseException("Expected constant value " + SendUnitData.CONNECTION_DATA_ITEM + " but got " + connection_data_item);
        }

        readBuffer.pullContext("exchange3");

        // Simple Field (exchange3)
CipExchange3 exchange3 = CipExchange3IO.staticParse(readBuffer , (int) ((len) - (12)) ) ;        readBuffer.closeContext("exchange3");

        readBuffer.closeContext("SendUnitData");
        // Create the instance
        return new SendUnitDataBuilder(o_t_connection_id, exchange3);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SendUnitData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SendUnitData");

        // Const Field (api_handle)
        writeBuffer.writeUnsignedLong("api_handle", 32, ((Number) 0x00).longValue());

        // Const Field (timeout)
        writeBuffer.writeUnsignedInt("timeout", 16, ((Number) 0x00).intValue());

        // Const Field (item_count)
        writeBuffer.writeUnsignedInt("item_count", 16, ((Number) 0x0002).intValue());

        // Const Field (connection_address)
        writeBuffer.writeUnsignedInt("connection_address", 16, ((Number) 0x00a1).intValue());

        // Const Field (connection_length)
        writeBuffer.writeUnsignedInt("connection_length", 16, ((Number) 0x0004).intValue());

        // Simple Field (o_t_connection_id)
        long o_t_connection_id = (long) _value.getO_t_connection_id();
        writeBuffer.writeUnsignedLong("o_t_connection_id", 32, ((Number) (o_t_connection_id)).longValue());

        // Const Field (connection_data_item)
        writeBuffer.writeUnsignedInt("connection_data_item", 16, ((Number) 0x00b1).intValue());

        // Simple Field (exchange3)
        CipExchange3 exchange3 = (CipExchange3) _value.getExchange3();
        writeBuffer.pushContext("exchange3");
        CipExchange3IO.staticSerialize(writeBuffer, exchange3);
        writeBuffer.popContext("exchange3");
        writeBuffer.popContext("SendUnitData");
    }

    public static class SendUnitDataBuilder implements EipPacketIO.EipPacketBuilder {
        private final long o_t_connection_id;
        private final CipExchange3 exchange3;

        public SendUnitDataBuilder(long o_t_connection_id, CipExchange3 exchange3) {
            this.o_t_connection_id = o_t_connection_id;
            this.exchange3 = exchange3;
        }

        public SendUnitData build(long sessionHandle, long status, short[] senderContext, long options) {
            return new SendUnitData(sessionHandle, status, senderContext, options, o_t_connection_id, exchange3);
        }
    }

}
