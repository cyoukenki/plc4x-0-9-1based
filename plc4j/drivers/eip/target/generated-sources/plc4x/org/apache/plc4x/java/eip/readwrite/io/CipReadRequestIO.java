/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CipReadRequestIO implements MessageIO<CipReadRequest, CipReadRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CipReadRequestIO.class);

    @Override
    public CipReadRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CipReadRequest) new CipServiceIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CipReadRequest value, Object... args) throws ParseException {
        new CipServiceIO().serialize(writeBuffer, value, args);
    }

    public static CipReadRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CipReadRequest");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (RequestPathSize)
byte RequestPathSize = readBuffer.readSignedByte("RequestPathSize", 8) ;        // Array field (tag)
        readBuffer.pullContext("tag", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _tagLength = ((RequestPathSize) * (2));
        List<Byte> _tagList = new LinkedList<>();
        long tagEndPos = readBuffer.getPos() + _tagLength;
        while(readBuffer.getPos() < tagEndPos) {
            _tagList.add(readBuffer.readSignedByte("", 8));
        }
        byte[] tag = new byte[_tagList.size()];
        for(int i = 0; i < _tagList.size(); i++) {
            tag[i] = (byte) _tagList.get(i);
        }
            readBuffer.closeContext("tag", WithReaderWriterArgs.WithRenderAsList(true));


        // Simple Field (elementNb)
int elementNb = readBuffer.readUnsignedInt("elementNb", 16) ;
        readBuffer.closeContext("CipReadRequest");
        // Create the instance
        return new CipReadRequestBuilder(RequestPathSize, tag, elementNb);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CipReadRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CipReadRequest");

        // Simple Field (RequestPathSize)
        byte RequestPathSize = (byte) _value.getRequestPathSize();
        writeBuffer.writeSignedByte("RequestPathSize", 8, ((Number) (RequestPathSize)).byteValue());

        // Array Field (tag)
        if(_value.getTag() != null) {
            writeBuffer.pushContext("tag", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getTag().length;
            int curItem = 0;
            for(byte element : _value.getTag()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("tag", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Simple Field (elementNb)
        int elementNb = (int) _value.getElementNb();
        writeBuffer.writeUnsignedInt("elementNb", 16, ((Number) (elementNb)).intValue());
        writeBuffer.popContext("CipReadRequest");
    }

    public static class CipReadRequestBuilder implements CipServiceIO.CipServiceBuilder {
        private final byte RequestPathSize;
        private final byte[] tag;
        private final int elementNb;

        public CipReadRequestBuilder(byte RequestPathSize, byte[] tag, int elementNb) {
            this.RequestPathSize = RequestPathSize;
            this.tag = tag;
            this.elementNb = elementNb;
        }

        public CipReadRequest build() {
            return new CipReadRequest(RequestPathSize, tag, elementNb);
        }
    }

}
