/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CipUnconnectedRequestIO implements MessageIO<CipUnconnectedRequest, CipUnconnectedRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CipUnconnectedRequestIO.class);

    @Override
    public CipUnconnectedRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CipUnconnectedRequest) new CipServiceIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CipUnconnectedRequest value, Object... args) throws ParseException {
        new CipServiceIO().serialize(writeBuffer, value, args);
    }

    public static CipUnconnectedRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("CipUnconnectedRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x02) {
                LOGGER.info("Expected constant value " + 0x02 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x20) {
                LOGGER.info("Expected constant value " + 0x20 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x06) {
                LOGGER.info("Expected constant value " + 0x06 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x24) {
                LOGGER.info("Expected constant value " + 0x24 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x01) {
                LOGGER.info("Expected constant value " + 0x01 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x9D06) {
                LOGGER.info("Expected constant value " + 0x9D06 + " but got " + reserved + " for reserved field.");
            }
        }

        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = readBuffer.readUnsignedInt("messageSize", 16);

        readBuffer.pullContext("unconnectedService");

        // Simple Field (unconnectedService)
CipService unconnectedService = CipServiceIO.staticParse(readBuffer , (int) (messageSize) ) ;        readBuffer.closeContext("unconnectedService");

        // Const Field (route)
        int route = readBuffer.readUnsignedInt("route", 16);
        if(route != CipUnconnectedRequest.ROUTE) {
            throw new ParseException("Expected constant value " + CipUnconnectedRequest.ROUTE + " but got " + route);
        }


        // Simple Field (backPlane)
byte backPlane = readBuffer.readSignedByte("backPlane", 8) ;

        // Simple Field (slot)
byte slot = readBuffer.readSignedByte("slot", 8) ;
        readBuffer.closeContext("CipUnconnectedRequest");
        // Create the instance
        return new CipUnconnectedRequestBuilder(unconnectedService, backPlane, slot);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CipUnconnectedRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CipUnconnectedRequest");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x02).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x20).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x06).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x24).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x01).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x9D06).intValue());

        // Implicit Field (messageSize) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int messageSize = (int) (((_value.getLengthInBytes()) - (10)) - (4));
        writeBuffer.writeUnsignedInt("messageSize", 16, ((Number) (messageSize)).intValue());

        // Simple Field (unconnectedService)
        CipService unconnectedService = (CipService) _value.getUnconnectedService();
        writeBuffer.pushContext("unconnectedService");
        CipServiceIO.staticSerialize(writeBuffer, unconnectedService);
        writeBuffer.popContext("unconnectedService");

        // Const Field (route)
        writeBuffer.writeUnsignedInt("route", 16, ((Number) 0x0001).intValue());

        // Simple Field (backPlane)
        byte backPlane = (byte) _value.getBackPlane();
        writeBuffer.writeSignedByte("backPlane", 8, ((Number) (backPlane)).byteValue());

        // Simple Field (slot)
        byte slot = (byte) _value.getSlot();
        writeBuffer.writeSignedByte("slot", 8, ((Number) (slot)).byteValue());
        writeBuffer.popContext("CipUnconnectedRequest");
    }

    public static class CipUnconnectedRequestBuilder implements CipServiceIO.CipServiceBuilder {
        private final CipService unconnectedService;
        private final byte backPlane;
        private final byte slot;

        public CipUnconnectedRequestBuilder(CipService unconnectedService, byte backPlane, byte slot) {
            this.unconnectedService = unconnectedService;
            this.backPlane = backPlane;
            this.slot = slot;
        }

        public CipUnconnectedRequest build() {
            return new CipUnconnectedRequest(unconnectedService, backPlane, slot);
        }
    }

}
