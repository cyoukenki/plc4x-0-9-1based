/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class LargeForwardOpenResponseIO implements MessageIO<LargeForwardOpenResponse, LargeForwardOpenResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(LargeForwardOpenResponseIO.class);

    @Override
    public LargeForwardOpenResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (LargeForwardOpenResponse) new CipServiceIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, LargeForwardOpenResponse value, Object... args) throws ParseException {
        new CipServiceIO().serialize(writeBuffer, value, args);
    }

    public static LargeForwardOpenResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("LargeForwardOpenResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (open_status)
int open_status = readBuffer.readUnsignedInt("open_status", 16) ;

        // Simple Field (o_t_connection_id)
long o_t_connection_id = readBuffer.readUnsignedLong("o_t_connection_id", 32) ;

        // Simple Field (t_o_id)
long t_o_id = readBuffer.readUnsignedLong("t_o_id", 32) ;

        // Simple Field (connection_serial_number)
int connection_serial_number = readBuffer.readUnsignedInt("connection_serial_number", 16) ;

        // Simple Field (vendor_id)
int vendor_id = readBuffer.readUnsignedInt("vendor_id", 16) ;

        // Simple Field (originator_serial_number)
long originator_serial_number = readBuffer.readUnsignedLong("originator_serial_number", 32) ;

        // Simple Field (o_t_rpi)
long o_t_rpi = readBuffer.readUnsignedLong("o_t_rpi", 32) ;

        // Simple Field (t_o_rpi)
long t_o_rpi = readBuffer.readUnsignedLong("t_o_rpi", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.closeContext("LargeForwardOpenResponse");
        // Create the instance
        return new LargeForwardOpenResponseBuilder(open_status, o_t_connection_id, t_o_id, connection_serial_number, vendor_id, originator_serial_number, o_t_rpi, t_o_rpi);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, LargeForwardOpenResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("LargeForwardOpenResponse");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Simple Field (open_status)
        int open_status = (int) _value.getOpen_status();
        writeBuffer.writeUnsignedInt("open_status", 16, ((Number) (open_status)).intValue());

        // Simple Field (o_t_connection_id)
        long o_t_connection_id = (long) _value.getO_t_connection_id();
        writeBuffer.writeUnsignedLong("o_t_connection_id", 32, ((Number) (o_t_connection_id)).longValue());

        // Simple Field (t_o_id)
        long t_o_id = (long) _value.getT_o_id();
        writeBuffer.writeUnsignedLong("t_o_id", 32, ((Number) (t_o_id)).longValue());

        // Simple Field (connection_serial_number)
        int connection_serial_number = (int) _value.getConnection_serial_number();
        writeBuffer.writeUnsignedInt("connection_serial_number", 16, ((Number) (connection_serial_number)).intValue());

        // Simple Field (vendor_id)
        int vendor_id = (int) _value.getVendor_id();
        writeBuffer.writeUnsignedInt("vendor_id", 16, ((Number) (vendor_id)).intValue());

        // Simple Field (originator_serial_number)
        long originator_serial_number = (long) _value.getOriginator_serial_number();
        writeBuffer.writeUnsignedLong("originator_serial_number", 32, ((Number) (originator_serial_number)).longValue());

        // Simple Field (o_t_rpi)
        long o_t_rpi = (long) _value.getO_t_rpi();
        writeBuffer.writeUnsignedLong("o_t_rpi", 32, ((Number) (o_t_rpi)).longValue());

        // Simple Field (t_o_rpi)
        long t_o_rpi = (long) _value.getT_o_rpi();
        writeBuffer.writeUnsignedLong("t_o_rpi", 32, ((Number) (t_o_rpi)).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x00).intValue());
        writeBuffer.popContext("LargeForwardOpenResponse");
    }

    public static class LargeForwardOpenResponseBuilder implements CipServiceIO.CipServiceBuilder {
        private final int open_status;
        private final long o_t_connection_id;
        private final long t_o_id;
        private final int connection_serial_number;
        private final int vendor_id;
        private final long originator_serial_number;
        private final long o_t_rpi;
        private final long t_o_rpi;

        public LargeForwardOpenResponseBuilder(int open_status, long o_t_connection_id, long t_o_id, int connection_serial_number, int vendor_id, long originator_serial_number, long o_t_rpi, long t_o_rpi) {
            this.open_status = open_status;
            this.o_t_connection_id = o_t_connection_id;
            this.t_o_id = t_o_id;
            this.connection_serial_number = connection_serial_number;
            this.vendor_id = vendor_id;
            this.originator_serial_number = originator_serial_number;
            this.o_t_rpi = o_t_rpi;
            this.t_o_rpi = t_o_rpi;
        }

        public LargeForwardOpenResponse build() {
            return new LargeForwardOpenResponse(open_status, o_t_connection_id, t_o_id, connection_serial_number, vendor_id, originator_serial_number, o_t_rpi, t_o_rpi);
        }
    }

}
