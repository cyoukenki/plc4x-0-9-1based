/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ServicesIO implements MessageIO<Services, Services> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServicesIO.class);

    @Override
    public Services parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Integer servicesLen;
        if(args[0] instanceof Integer) {
            servicesLen = (Integer) args[0];
        } else if (args[0] instanceof String) {
            servicesLen = Integer.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Integer or a string which is parseable but was " + args[0].getClass().getName());
        }
        return ServicesIO.staticParse(readBuffer, servicesLen);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Services value, Object... args) throws ParseException {
        ServicesIO.staticSerialize(writeBuffer, value);
    }

    public static Services staticParse(ReadBuffer readBuffer, Integer servicesLen) throws ParseException {
        readBuffer.pullContext("Services");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (serviceNb)
int serviceNb = readBuffer.readUnsignedInt("serviceNb", 16) ;        // Array field (offsets)
        readBuffer.pullContext("offsets", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(serviceNb > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (serviceNb) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        int[] offsets;
        {
            int itemCount = Math.max(0, (int) serviceNb);
            offsets = new int[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
offsets[curItem] = readBuffer.readUnsignedInt("", 16) ;            }
        }
            readBuffer.closeContext("offsets", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (services)
        readBuffer.pullContext("services", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(serviceNb > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (serviceNb) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        CipService[] services;
        {
            int itemCount = Math.max(0, (int) serviceNb);
            services = new CipService[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
services[curItem] = CipServiceIO.staticParse(readBuffer , (int) ((servicesLen) / (serviceNb)) ) ;            }
        }
            readBuffer.closeContext("services", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Services");
        // Create the instance
        return new Services(serviceNb, offsets, services);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Services _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Services");

        // Simple Field (serviceNb)
        int serviceNb = (int) _value.getServiceNb();
        writeBuffer.writeUnsignedInt("serviceNb", 16, ((Number) (serviceNb)).intValue());

        // Array Field (offsets)
        if(_value.getOffsets() != null) {
            writeBuffer.pushContext("offsets", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getOffsets().length;
            int curItem = 0;
            for(int element : _value.getOffsets()) {
                writeBuffer.writeUnsignedInt("", 16, ((Number) element).intValue());
                curItem++;
            }
            writeBuffer.popContext("offsets", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (services)
        if(_value.getServices() != null) {
            writeBuffer.pushContext("services", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getServices().length;
            int curItem = 0;
            for(CipService element : _value.getServices()) {
                boolean lastItem = curItem == (itemCount - 1);
                CipServiceIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("services", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Services");
    }

}
