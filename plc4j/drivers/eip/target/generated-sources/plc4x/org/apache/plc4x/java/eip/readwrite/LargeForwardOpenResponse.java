/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class LargeForwardOpenResponse extends CipService implements Message {

    // Accessors for discriminator values.
    public Short getService() {
        return 0xdb;
    }

    // Properties.
    private final int open_status;
    private final long o_t_connection_id;
    private final long t_o_id;
    private final int connection_serial_number;
    private final int vendor_id;
    private final long originator_serial_number;
    private final long o_t_rpi;
    private final long t_o_rpi;

    public LargeForwardOpenResponse(int open_status, long o_t_connection_id, long t_o_id, int connection_serial_number, int vendor_id, long originator_serial_number, long o_t_rpi, long t_o_rpi) {
        this.open_status = open_status;
        this.o_t_connection_id = o_t_connection_id;
        this.t_o_id = t_o_id;
        this.connection_serial_number = connection_serial_number;
        this.vendor_id = vendor_id;
        this.originator_serial_number = originator_serial_number;
        this.o_t_rpi = o_t_rpi;
        this.t_o_rpi = t_o_rpi;
    }

    public int getOpen_status() {
        return open_status;
    }

    public long getO_t_connection_id() {
        return o_t_connection_id;
    }

    public long getT_o_id() {
        return t_o_id;
    }

    public int getConnection_serial_number() {
        return connection_serial_number;
    }

    public int getVendor_id() {
        return vendor_id;
    }

    public long getOriginator_serial_number() {
        return originator_serial_number;
    }

    public long getO_t_rpi() {
        return o_t_rpi;
    }

    public long getT_o_rpi() {
        return t_o_rpi;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        LargeForwardOpenResponse _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Simple field (open_status)
        lengthInBits += 16;

        // Simple field (o_t_connection_id)
        lengthInBits += 32;

        // Simple field (t_o_id)
        lengthInBits += 32;

        // Simple field (connection_serial_number)
        lengthInBits += 16;

        // Simple field (vendor_id)
        lengthInBits += 16;

        // Simple field (originator_serial_number)
        lengthInBits += 32;

        // Simple field (o_t_rpi)
        lengthInBits += 32;

        // Simple field (t_o_rpi)
        lengthInBits += 32;

        // Reserved Field (reserved)
        lengthInBits += 16;

        return lengthInBits;
    }

    @Override
    public MessageIO<CipService, CipService> getMessageIO() {
        return new CipServiceIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LargeForwardOpenResponse)) {
            return false;
        }
        LargeForwardOpenResponse that = (LargeForwardOpenResponse) o;
        return
            (getOpen_status() == that.getOpen_status()) &&
            (getO_t_connection_id() == that.getO_t_connection_id()) &&
            (getT_o_id() == that.getT_o_id()) &&
            (getConnection_serial_number() == that.getConnection_serial_number()) &&
            (getVendor_id() == that.getVendor_id()) &&
            (getOriginator_serial_number() == that.getOriginator_serial_number()) &&
            (getO_t_rpi() == that.getO_t_rpi()) &&
            (getT_o_rpi() == that.getT_o_rpi()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getOpen_status(),
            getO_t_connection_id(),
            getT_o_id(),
            getConnection_serial_number(),
            getVendor_id(),
            getOriginator_serial_number(),
            getO_t_rpi(),
            getT_o_rpi()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("open_status", getOpen_status())
            .append("o_t_connection_id", getO_t_connection_id())
            .append("t_o_id", getT_o_id())
            .append("connection_serial_number", getConnection_serial_number())
            .append("vendor_id", getVendor_id())
            .append("originator_serial_number", getOriginator_serial_number())
            .append("o_t_rpi", getO_t_rpi())
            .append("t_o_rpi", getT_o_rpi())
            .toString();
    }

}
