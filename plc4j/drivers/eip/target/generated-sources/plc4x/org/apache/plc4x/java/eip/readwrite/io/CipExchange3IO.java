/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CipExchange3IO implements MessageIO<CipExchange3, CipExchange3> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CipExchange3IO.class);

    @Override
    public CipExchange3 parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Integer exchangeLen;
        if(args[0] instanceof Integer) {
            exchangeLen = (Integer) args[0];
        } else if (args[0] instanceof String) {
            exchangeLen = Integer.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Integer or a string which is parseable but was " + args[0].getClass().getName());
        }
        return CipExchange3IO.staticParse(readBuffer, exchangeLen);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CipExchange3 value, Object... args) throws ParseException {
        CipExchange3IO.staticSerialize(writeBuffer, value);
    }

    public static CipExchange3 staticParse(ReadBuffer readBuffer, Integer exchangeLen) throws ParseException {
        readBuffer.pullContext("CipExchange3");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int size = readBuffer.readUnsignedInt("size", 16);


        // Simple Field (sequence_count)
int sequence_count = readBuffer.readUnsignedInt("sequence_count", 16) ;
        readBuffer.pullContext("service");

        // Simple Field (service)
CipService service = CipServiceIO.staticParse(readBuffer , (int) ((exchangeLen) - (10)) ) ;        readBuffer.closeContext("service");

        readBuffer.closeContext("CipExchange3");
        // Create the instance
        return new CipExchange3(sequence_count, service);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CipExchange3 _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CipExchange3");

        // Implicit Field (size) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int size = (int) ((_value.getLengthInBytes()) - (44));
        writeBuffer.writeUnsignedInt("size", 16, ((Number) (size)).intValue());

        // Simple Field (sequence_count)
        int sequence_count = (int) _value.getSequence_count();
        writeBuffer.writeUnsignedInt("sequence_count", 16, ((Number) (sequence_count)).intValue());

        // Simple Field (service)
        CipService service = (CipService) _value.getService();
        writeBuffer.pushContext("service");
        CipServiceIO.staticSerialize(writeBuffer, service);
        writeBuffer.popContext("service");
        writeBuffer.popContext("CipExchange3");
    }

}
