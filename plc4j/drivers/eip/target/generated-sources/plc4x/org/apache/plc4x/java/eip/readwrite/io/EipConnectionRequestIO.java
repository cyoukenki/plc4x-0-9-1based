/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class EipConnectionRequestIO implements MessageIO<EipConnectionRequest, EipConnectionRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EipConnectionRequestIO.class);

    @Override
    public EipConnectionRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (EipConnectionRequest) new EipPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, EipConnectionRequest value, Object... args) throws ParseException {
        new EipPacketIO().serialize(writeBuffer, value, args);
    }

    public static EipConnectionRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("EipConnectionRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (protocolVersion)
        int protocolVersion = readBuffer.readUnsignedInt("protocolVersion", 16);
        if(protocolVersion != EipConnectionRequest.PROTOCOLVERSION) {
            throw new ParseException("Expected constant value " + EipConnectionRequest.PROTOCOLVERSION + " but got " + protocolVersion);
        }

        // Const Field (flags)
        int flags = readBuffer.readUnsignedInt("flags", 16);
        if(flags != EipConnectionRequest.FLAGS) {
            throw new ParseException("Expected constant value " + EipConnectionRequest.FLAGS + " but got " + flags);
        }

        readBuffer.closeContext("EipConnectionRequest");
        // Create the instance
        return new EipConnectionRequestBuilder();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, EipConnectionRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("EipConnectionRequest");

        // Const Field (protocolVersion)
        writeBuffer.writeUnsignedInt("protocolVersion", 16, ((Number) 0x01).intValue());

        // Const Field (flags)
        writeBuffer.writeUnsignedInt("flags", 16, ((Number) 0x00).intValue());
        writeBuffer.popContext("EipConnectionRequest");
    }

    public static class EipConnectionRequestBuilder implements EipPacketIO.EipPacketBuilder {

        public EipConnectionRequestBuilder() {
        }

        public EipConnectionRequest build(long sessionHandle, long status, short[] senderContext, long options) {
            return new EipConnectionRequest(sessionHandle, status, senderContext, options);
        }
    }

}
