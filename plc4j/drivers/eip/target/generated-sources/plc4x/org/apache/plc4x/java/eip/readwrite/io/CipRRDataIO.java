/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.*;
import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class CipRRDataIO implements MessageIO<CipRRData, CipRRData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(CipRRDataIO.class);

    @Override
    public CipRRData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (CipRRData) new EipPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, CipRRData value, Object... args) throws ParseException {
        new EipPacketIO().serialize(writeBuffer, value, args);
    }

    public static CipRRDataBuilder staticParse(ReadBuffer readBuffer, Integer len) throws ParseException {
        readBuffer.pullContext("CipRRData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 32);
            if(reserved != (long) 0x00000000) {
                LOGGER.info("Expected constant value " + 0x00000000 + " but got " + reserved + " for reserved field.");
            }
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("exchange");

        // Simple Field (exchange)
CipExchange exchange = CipExchangeIO.staticParse(readBuffer , (int) ((len) - (6)) ) ;        readBuffer.closeContext("exchange");

        readBuffer.closeContext("CipRRData");
        // Create the instance
        return new CipRRDataBuilder(exchange);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, CipRRData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("CipRRData");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 32, ((Number) (long) 0x00000000).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Simple Field (exchange)
        CipExchange exchange = (CipExchange) _value.getExchange();
        writeBuffer.pushContext("exchange");
        CipExchangeIO.staticSerialize(writeBuffer, exchange);
        writeBuffer.popContext("exchange");
        writeBuffer.popContext("CipRRData");
    }

    public static class CipRRDataBuilder implements EipPacketIO.EipPacketBuilder {
        private final CipExchange exchange;

        public CipRRDataBuilder(CipExchange exchange) {
            this.exchange = exchange;
        }

        public CipRRData build(long sessionHandle, long status, short[] senderContext, long options) {
            return new CipRRData(sessionHandle, status, senderContext, options, exchange);
        }
    }

}
