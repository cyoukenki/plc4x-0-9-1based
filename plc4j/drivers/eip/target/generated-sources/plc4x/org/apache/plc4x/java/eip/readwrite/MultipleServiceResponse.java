/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.eip.readwrite.io.*;
import org.apache.plc4x.java.eip.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class MultipleServiceResponse extends CipService implements Message {

    // Accessors for discriminator values.
    public Short getService() {
        return 0x8A;
    }

    // Properties.
    private final short status;
    private final short extStatus;
    private final int serviceNb;
    private final int[] offsets;
    private final byte[] servicesData;

    public MultipleServiceResponse(short status, short extStatus, int serviceNb, int[] offsets, byte[] servicesData) {
        this.status = status;
        this.extStatus = extStatus;
        this.serviceNb = serviceNb;
        this.offsets = offsets;
        this.servicesData = servicesData;
    }

    public short getStatus() {
        return status;
    }

    public short getExtStatus() {
        return extStatus;
    }

    public int getServiceNb() {
        return serviceNb;
    }

    public int[] getOffsets() {
        return offsets;
    }

    public byte[] getServicesData() {
        return servicesData;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        MultipleServiceResponse _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Simple field (status)
        lengthInBits += 8;

        // Simple field (extStatus)
        lengthInBits += 8;

        // Simple field (serviceNb)
        lengthInBits += 16;

        // Array field
        if(offsets != null) {
            lengthInBits += 16 * offsets.length;
        }

        // Array field
        if(servicesData != null) {
            lengthInBits += 8 * servicesData.length;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<CipService, CipService> getMessageIO() {
        return new CipServiceIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MultipleServiceResponse)) {
            return false;
        }
        MultipleServiceResponse that = (MultipleServiceResponse) o;
        return
            (getStatus() == that.getStatus()) &&
            (getExtStatus() == that.getExtStatus()) &&
            (getServiceNb() == that.getServiceNb()) &&
            (getOffsets() == that.getOffsets()) &&
            (getServicesData() == that.getServicesData()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getStatus(),
            getExtStatus(),
            getServiceNb(),
            getOffsets(),
            getServicesData()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("status", getStatus())
            .append("extStatus", getExtStatus())
            .append("serviceNb", getServiceNb())
            .append("offsets", getOffsets())
            .append("servicesData", getServicesData())
            .toString();
    }

}
