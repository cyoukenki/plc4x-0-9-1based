/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum ModeTransitionType {

    STOP((short) 0x00),
    WARM_RESTART((short) 0x01),
    RUN((short) 0x02),
    HOT_RESTART((short) 0x03),
    HOLD((short) 0x04),
    COLD_RESTART((short) 0x06),
    RUN_R((short) 0x09),
    LINK_UP((short) 0x11),
    UPDATE((short) 0x12);

    private static final Logger logger = LoggerFactory.getLogger(ModeTransitionType.class);

    private static final Map<Short, ModeTransitionType> map;
    static {
        map = new HashMap<>();
        for (ModeTransitionType value : ModeTransitionType.values()) {
            map.put((short) value.getValue(), value);
        }
    }

    private short value;

    ModeTransitionType(short value) {
        this.value = value;
    }

    public short getValue() {
        return value;
    }

    public static ModeTransitionType enumForValue(short value) {
        if (!map.containsKey(value)) {
            logger.error("No ModeTransitionType for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(short value) {
        return map.containsKey(value);
    }

}
