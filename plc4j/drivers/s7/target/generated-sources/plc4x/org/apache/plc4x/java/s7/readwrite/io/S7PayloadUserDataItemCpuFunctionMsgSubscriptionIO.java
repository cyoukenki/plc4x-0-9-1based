/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadUserDataItemCpuFunctionMsgSubscriptionIO implements MessageIO<S7PayloadUserDataItemCpuFunctionMsgSubscription, S7PayloadUserDataItemCpuFunctionMsgSubscription> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7PayloadUserDataItemCpuFunctionMsgSubscriptionIO.class);

    @Override
    public S7PayloadUserDataItemCpuFunctionMsgSubscription parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7PayloadUserDataItemCpuFunctionMsgSubscription) new S7PayloadUserDataItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionMsgSubscription value, Object... args) throws ParseException {
        new S7PayloadUserDataItemIO().serialize(writeBuffer, value, args);
    }

    public static S7PayloadUserDataItemCpuFunctionMsgSubscriptionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7PayloadUserDataItemCpuFunctionMsgSubscription");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (Subscription)
short Subscription = readBuffer.readUnsignedShort("Subscription", 8) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (magicKey)
String magicKey = readBuffer.readString("magicKey", 64, "'UTF-8'") ;
        // Optional Field (Alarmtype) (Can be skipped, if a given expression evaluates to false)
        AlarmStateType Alarmtype = null;
        if((Subscription) >= (128)) {
            Alarmtype = AlarmStateType.enumForValue(readBuffer.readUnsignedShort("Alarmtype", 8));
        }

        // Optional Field (Reserve) (Can be skipped, if a given expression evaluates to false)
        Short Reserve = null;
        if((Subscription) >= (128)) {
            Reserve = readBuffer.readUnsignedShort("Reserve", 8);
        }

        readBuffer.closeContext("S7PayloadUserDataItemCpuFunctionMsgSubscription");
        // Create the instance
        return new S7PayloadUserDataItemCpuFunctionMsgSubscriptionBuilder(Subscription, magicKey, Alarmtype, Reserve);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionMsgSubscription _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7PayloadUserDataItemCpuFunctionMsgSubscription");

        // Simple Field (Subscription)
        short Subscription = (short) _value.getSubscription();
        writeBuffer.writeUnsignedShort("Subscription", 8, ((Number) (Subscription)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Simple Field (magicKey)
        String magicKey = (String) _value.getMagicKey();
        writeBuffer.writeString("magicKey", 64, "'UTF-8'", (String) (magicKey));

        // Optional Field (Alarmtype) (Can be skipped, if the value is null)
        AlarmStateType Alarmtype = null;
        if(_value.getAlarmtype() != null) {
            Alarmtype = (AlarmStateType) _value.getAlarmtype();
            writeBuffer.writeUnsignedShort("Alarmtype", 8, ((Number) (Alarmtype.getValue())).shortValue());
        }

        // Optional Field (Reserve) (Can be skipped, if the value is null)
        Short Reserve = null;
        if(_value.getReserve() != null) {
            Reserve = (Short) _value.getReserve();
            writeBuffer.writeUnsignedShort("Reserve", 8, ((Number) (Reserve)).shortValue());
        }
        writeBuffer.popContext("S7PayloadUserDataItemCpuFunctionMsgSubscription");
    }

    public static class S7PayloadUserDataItemCpuFunctionMsgSubscriptionBuilder implements S7PayloadUserDataItemIO.S7PayloadUserDataItemBuilder {
        private final short Subscription;
        private final String magicKey;
        private final AlarmStateType Alarmtype;
        private final Short Reserve;

        public S7PayloadUserDataItemCpuFunctionMsgSubscriptionBuilder(short Subscription, String magicKey, AlarmStateType Alarmtype, Short Reserve) {
            this.Subscription = Subscription;
            this.magicKey = magicKey;
            this.Alarmtype = Alarmtype;
            this.Reserve = Reserve;
        }

        public S7PayloadUserDataItemCpuFunctionMsgSubscription build(DataTransportErrorCode returnCode, DataTransportSize transportSize) {
            return new S7PayloadUserDataItemCpuFunctionMsgSubscription(returnCode, transportSize, Subscription, magicKey, Alarmtype, Reserve);
        }
    }

}
