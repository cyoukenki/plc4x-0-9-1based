/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7ParameterUserDataItemCPUFunctionsIO implements MessageIO<S7ParameterUserDataItemCPUFunctions, S7ParameterUserDataItemCPUFunctions> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7ParameterUserDataItemCPUFunctionsIO.class);

    @Override
    public S7ParameterUserDataItemCPUFunctions parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7ParameterUserDataItemCPUFunctions) new S7ParameterUserDataItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7ParameterUserDataItemCPUFunctions value, Object... args) throws ParseException {
        new S7ParameterUserDataItemIO().serialize(writeBuffer, value, args);
    }

    public static S7ParameterUserDataItemCPUFunctionsBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7ParameterUserDataItemCPUFunctions");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = readBuffer.readUnsignedShort("itemLength", 8);


        // Simple Field (method)
short method = readBuffer.readUnsignedShort("method", 8) ;

        // Simple Field (cpuFunctionType)
byte cpuFunctionType = readBuffer.readUnsignedByte("cpuFunctionType", 4) ;

        // Simple Field (cpuFunctionGroup)
byte cpuFunctionGroup = readBuffer.readUnsignedByte("cpuFunctionGroup", 4) ;

        // Simple Field (cpuSubfunction)
short cpuSubfunction = readBuffer.readUnsignedShort("cpuSubfunction", 8) ;

        // Simple Field (sequenceNumber)
short sequenceNumber = readBuffer.readUnsignedShort("sequenceNumber", 8) ;
        // Optional Field (dataUnitReferenceNumber) (Can be skipped, if a given expression evaluates to false)
        Short dataUnitReferenceNumber = null;
        if((cpuFunctionType) == (8)) {
            dataUnitReferenceNumber = readBuffer.readUnsignedShort("dataUnitReferenceNumber", 8);
        }

        // Optional Field (lastDataUnit) (Can be skipped, if a given expression evaluates to false)
        Short lastDataUnit = null;
        if((cpuFunctionType) == (8)) {
            lastDataUnit = readBuffer.readUnsignedShort("lastDataUnit", 8);
        }

        // Optional Field (errorCode) (Can be skipped, if a given expression evaluates to false)
        Integer errorCode = null;
        if((cpuFunctionType) == (8)) {
            errorCode = readBuffer.readUnsignedInt("errorCode", 16);
        }

        readBuffer.closeContext("S7ParameterUserDataItemCPUFunctions");
        // Create the instance
        return new S7ParameterUserDataItemCPUFunctionsBuilder(method, cpuFunctionType, cpuFunctionGroup, cpuSubfunction, sequenceNumber, dataUnitReferenceNumber, lastDataUnit, errorCode);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7ParameterUserDataItemCPUFunctions _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7ParameterUserDataItemCPUFunctions");

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = (short) ((_value.getLengthInBytes()) - (2));
        writeBuffer.writeUnsignedShort("itemLength", 8, ((Number) (itemLength)).shortValue());

        // Simple Field (method)
        short method = (short) _value.getMethod();
        writeBuffer.writeUnsignedShort("method", 8, ((Number) (method)).shortValue());

        // Simple Field (cpuFunctionType)
        byte cpuFunctionType = (byte) _value.getCpuFunctionType();
        writeBuffer.writeUnsignedByte("cpuFunctionType", 4, ((Number) (cpuFunctionType)).byteValue());

        // Simple Field (cpuFunctionGroup)
        byte cpuFunctionGroup = (byte) _value.getCpuFunctionGroup();
        writeBuffer.writeUnsignedByte("cpuFunctionGroup", 4, ((Number) (cpuFunctionGroup)).byteValue());

        // Simple Field (cpuSubfunction)
        short cpuSubfunction = (short) _value.getCpuSubfunction();
        writeBuffer.writeUnsignedShort("cpuSubfunction", 8, ((Number) (cpuSubfunction)).shortValue());

        // Simple Field (sequenceNumber)
        short sequenceNumber = (short) _value.getSequenceNumber();
        writeBuffer.writeUnsignedShort("sequenceNumber", 8, ((Number) (sequenceNumber)).shortValue());

        // Optional Field (dataUnitReferenceNumber) (Can be skipped, if the value is null)
        Short dataUnitReferenceNumber = null;
        if(_value.getDataUnitReferenceNumber() != null) {
            dataUnitReferenceNumber = (Short) _value.getDataUnitReferenceNumber();
            writeBuffer.writeUnsignedShort("dataUnitReferenceNumber", 8, ((Number) (dataUnitReferenceNumber)).shortValue());
        }

        // Optional Field (lastDataUnit) (Can be skipped, if the value is null)
        Short lastDataUnit = null;
        if(_value.getLastDataUnit() != null) {
            lastDataUnit = (Short) _value.getLastDataUnit();
            writeBuffer.writeUnsignedShort("lastDataUnit", 8, ((Number) (lastDataUnit)).shortValue());
        }

        // Optional Field (errorCode) (Can be skipped, if the value is null)
        Integer errorCode = null;
        if(_value.getErrorCode() != null) {
            errorCode = (Integer) _value.getErrorCode();
            writeBuffer.writeUnsignedInt("errorCode", 16, ((Number) (errorCode)).intValue());
        }
        writeBuffer.popContext("S7ParameterUserDataItemCPUFunctions");
    }

    public static class S7ParameterUserDataItemCPUFunctionsBuilder implements S7ParameterUserDataItemIO.S7ParameterUserDataItemBuilder {
        private final short method;
        private final byte cpuFunctionType;
        private final byte cpuFunctionGroup;
        private final short cpuSubfunction;
        private final short sequenceNumber;
        private final Short dataUnitReferenceNumber;
        private final Short lastDataUnit;
        private final Integer errorCode;

        public S7ParameterUserDataItemCPUFunctionsBuilder(short method, byte cpuFunctionType, byte cpuFunctionGroup, short cpuSubfunction, short sequenceNumber, Short dataUnitReferenceNumber, Short lastDataUnit, Integer errorCode) {
            this.method = method;
            this.cpuFunctionType = cpuFunctionType;
            this.cpuFunctionGroup = cpuFunctionGroup;
            this.cpuSubfunction = cpuSubfunction;
            this.sequenceNumber = sequenceNumber;
            this.dataUnitReferenceNumber = dataUnitReferenceNumber;
            this.lastDataUnit = lastDataUnit;
            this.errorCode = errorCode;
        }

        public S7ParameterUserDataItemCPUFunctions build() {
            return new S7ParameterUserDataItemCPUFunctions(method, cpuFunctionType, cpuFunctionGroup, cpuSubfunction, sequenceNumber, dataUnitReferenceNumber, lastDataUnit, errorCode);
        }
    }

}
