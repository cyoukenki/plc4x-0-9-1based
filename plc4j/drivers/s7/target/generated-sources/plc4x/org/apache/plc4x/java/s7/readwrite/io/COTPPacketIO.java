/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class COTPPacketIO implements MessageIO<COTPPacket, COTPPacket> {

    private static final Logger LOGGER = LoggerFactory.getLogger(COTPPacketIO.class);

    @Override
    public COTPPacket parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Integer cotpLen;
        if(args[0] instanceof Integer) {
            cotpLen = (Integer) args[0];
        } else if (args[0] instanceof String) {
            cotpLen = Integer.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Integer or a string which is parseable but was " + args[0].getClass().getName());
        }
        return COTPPacketIO.staticParse(readBuffer, cotpLen);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, COTPPacket value, Object... args) throws ParseException {
        COTPPacketIO.staticSerialize(writeBuffer, value);
    }

    public static COTPPacket staticParse(ReadBuffer readBuffer, Integer cotpLen) throws ParseException {
        readBuffer.pullContext("COTPPacket");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (headerLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short headerLength = readBuffer.readUnsignedShort("headerLength", 8);

        // Discriminator Field (tpduCode) (Used as input to a switch field)
        short tpduCode = readBuffer.readUnsignedShort("tpduCode", 8);


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        COTPPacketBuilder builder = null;
                if(EvaluationHelper.equals(tpduCode, 0xF0)) {
            builder = COTPPacketDataIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(tpduCode, 0xE0)) {
            builder = COTPPacketConnectionRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(tpduCode, 0xD0)) {
            builder = COTPPacketConnectionResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(tpduCode, 0x80)) {
            builder = COTPPacketDisconnectRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(tpduCode, 0xC0)) {
            builder = COTPPacketDisconnectResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(tpduCode, 0x70)) {
            builder = COTPPacketTpduErrorIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }
        // Array field (parameters)
        readBuffer.pullContext("parameters", WithReaderWriterArgs.WithRenderAsList(true));
        curPos = readBuffer.getPos() - startPos;
        // Length array
        long _parametersLength = (((headerLength) + (1))) - (curPos);
        List<COTPParameter> _parametersList = new LinkedList<>();
        long parametersEndPos = readBuffer.getPos() + _parametersLength;
        while(readBuffer.getPos() < parametersEndPos) {
            _parametersList.add(COTPParameterIO.staticParse(readBuffer, (short) ((((headerLength) + (1))) - (curPos))));
            curPos = readBuffer.getPos() - startPos;
        }
        COTPParameter[] parameters = _parametersList.toArray(new COTPParameter[0]);
            readBuffer.closeContext("parameters", WithReaderWriterArgs.WithRenderAsList(true));

        // Optional Field (payload) (Can be skipped, if a given expression evaluates to false)
        curPos = readBuffer.getPos() - startPos;
        S7Message payload = null;
        if((curPos) < (cotpLen)) {
            payload = S7MessageIO.staticParse(readBuffer);
        }

        readBuffer.closeContext("COTPPacket");
        // Create the instance
        return builder.build(parameters, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, COTPPacket _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("COTPPacket");

        // Implicit Field (headerLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short headerLength = (short) ((_value.getLengthInBytes()) - ((((((((_value.getPayload()) != (null))) ? _value.getPayload().getLengthInBytes() : 0))) + (1))));
        writeBuffer.writeUnsignedShort("headerLength", 8, ((Number) (headerLength)).shortValue());

        // Discriminator Field (tpduCode) (Used as input to a switch field)
        short tpduCode = (short) _value.getTpduCode();
            writeBuffer.writeUnsignedShort("tpduCode", 8, ((Number) (tpduCode)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof COTPPacketData) {
            COTPPacketDataIO.staticSerialize(writeBuffer, (COTPPacketData) _value);
        } else 
        if(_value instanceof COTPPacketConnectionRequest) {
            COTPPacketConnectionRequestIO.staticSerialize(writeBuffer, (COTPPacketConnectionRequest) _value);
        } else 
        if(_value instanceof COTPPacketConnectionResponse) {
            COTPPacketConnectionResponseIO.staticSerialize(writeBuffer, (COTPPacketConnectionResponse) _value);
        } else 
        if(_value instanceof COTPPacketDisconnectRequest) {
            COTPPacketDisconnectRequestIO.staticSerialize(writeBuffer, (COTPPacketDisconnectRequest) _value);
        } else 
        if(_value instanceof COTPPacketDisconnectResponse) {
            COTPPacketDisconnectResponseIO.staticSerialize(writeBuffer, (COTPPacketDisconnectResponse) _value);
        } else 
        if(_value instanceof COTPPacketTpduError) {
            COTPPacketTpduErrorIO.staticSerialize(writeBuffer, (COTPPacketTpduError) _value);
        }

        // Array Field (parameters)
        if(_value.getParameters() != null) {
            writeBuffer.pushContext("parameters", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getParameters().length;
            int curItem = 0;
            for(COTPParameter element : _value.getParameters()) {
                boolean lastItem = curItem == (itemCount - 1);
                COTPParameterIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("parameters", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Optional Field (payload) (Can be skipped, if the value is null)
        S7Message payload = null;
        if(_value.getPayload() != null) {
            payload = (S7Message) _value.getPayload();
            S7MessageIO.staticSerialize(writeBuffer, payload);
        }
        writeBuffer.popContext("COTPPacket");
    }

    public static interface COTPPacketBuilder {
        COTPPacket build(COTPParameter[] parameters, S7Message payload);
    }

}
