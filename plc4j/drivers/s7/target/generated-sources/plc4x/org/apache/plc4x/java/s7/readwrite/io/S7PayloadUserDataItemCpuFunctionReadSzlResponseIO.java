/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadUserDataItemCpuFunctionReadSzlResponseIO implements MessageIO<S7PayloadUserDataItemCpuFunctionReadSzlResponse, S7PayloadUserDataItemCpuFunctionReadSzlResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7PayloadUserDataItemCpuFunctionReadSzlResponseIO.class);

    @Override
    public S7PayloadUserDataItemCpuFunctionReadSzlResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7PayloadUserDataItemCpuFunctionReadSzlResponse) new S7PayloadUserDataItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionReadSzlResponse value, Object... args) throws ParseException {
        new S7PayloadUserDataItemIO().serialize(writeBuffer, value, args);
    }

    public static S7PayloadUserDataItemCpuFunctionReadSzlResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7PayloadUserDataItemCpuFunctionReadSzlResponse");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("szlId");

        // Simple Field (szlId)
SzlId szlId = SzlIdIO.staticParse(readBuffer ) ;        readBuffer.closeContext("szlId");


        // Simple Field (szlIndex)
int szlIndex = readBuffer.readUnsignedInt("szlIndex", 16) ;
        // Const Field (szlItemLength)
        int szlItemLength = readBuffer.readUnsignedInt("szlItemLength", 16);
        if(szlItemLength != S7PayloadUserDataItemCpuFunctionReadSzlResponse.SZLITEMLENGTH) {
            throw new ParseException("Expected constant value " + S7PayloadUserDataItemCpuFunctionReadSzlResponse.SZLITEMLENGTH + " but got " + szlItemLength);
        }

        // Implicit Field (szlItemCount) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int szlItemCount = readBuffer.readUnsignedInt("szlItemCount", 16);
        // Array field (items)
        readBuffer.pullContext("items", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(szlItemCount > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (szlItemCount) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        SzlDataTreeItem[] items;
        {
            int itemCount = Math.max(0, (int) szlItemCount);
            items = new SzlDataTreeItem[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
items[curItem] = SzlDataTreeItemIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("items", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("S7PayloadUserDataItemCpuFunctionReadSzlResponse");
        // Create the instance
        return new S7PayloadUserDataItemCpuFunctionReadSzlResponseBuilder(szlId, szlIndex, items);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionReadSzlResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7PayloadUserDataItemCpuFunctionReadSzlResponse");

        // Simple Field (szlId)
        SzlId szlId = (SzlId) _value.getSzlId();
        writeBuffer.pushContext("szlId");
        SzlIdIO.staticSerialize(writeBuffer, szlId);
        writeBuffer.popContext("szlId");

        // Simple Field (szlIndex)
        int szlIndex = (int) _value.getSzlIndex();
        writeBuffer.writeUnsignedInt("szlIndex", 16, ((Number) (szlIndex)).intValue());

        // Const Field (szlItemLength)
        writeBuffer.writeUnsignedInt("szlItemLength", 16, ((Number) 28).intValue());

        // Implicit Field (szlItemCount) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int szlItemCount = (int) (COUNT(_value.getItems()));
        writeBuffer.writeUnsignedInt("szlItemCount", 16, ((Number) (szlItemCount)).intValue());

        // Array Field (items)
        if(_value.getItems() != null) {
            writeBuffer.pushContext("items", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getItems().length;
            int curItem = 0;
            for(SzlDataTreeItem element : _value.getItems()) {
                boolean lastItem = curItem == (itemCount - 1);
                SzlDataTreeItemIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("items", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S7PayloadUserDataItemCpuFunctionReadSzlResponse");
    }

    public static class S7PayloadUserDataItemCpuFunctionReadSzlResponseBuilder implements S7PayloadUserDataItemIO.S7PayloadUserDataItemBuilder {
        private final SzlId szlId;
        private final int szlIndex;
        private final SzlDataTreeItem[] items;

        public S7PayloadUserDataItemCpuFunctionReadSzlResponseBuilder(SzlId szlId, int szlIndex, SzlDataTreeItem[] items) {
            this.szlId = szlId;
            this.szlIndex = szlIndex;
            this.items = items;
        }

        public S7PayloadUserDataItemCpuFunctionReadSzlResponse build(DataTransportErrorCode returnCode, DataTransportSize transportSize) {
            return new S7PayloadUserDataItemCpuFunctionReadSzlResponse(returnCode, transportSize, szlId, szlIndex, items);
        }
    }

}
