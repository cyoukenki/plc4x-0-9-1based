/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;

import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class StateIO implements MessageIO<State, State> {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateIO.class);

    @Override
    public State parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return StateIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, State value, Object... args) throws ParseException {
        StateIO.staticSerialize(writeBuffer, value);
    }

    public static State staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("State");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (SIG_8)
boolean SIG_8 = readBuffer.readBit("SIG_8") ;

        // Simple Field (SIG_7)
boolean SIG_7 = readBuffer.readBit("SIG_7") ;

        // Simple Field (SIG_6)
boolean SIG_6 = readBuffer.readBit("SIG_6") ;

        // Simple Field (SIG_5)
boolean SIG_5 = readBuffer.readBit("SIG_5") ;

        // Simple Field (SIG_4)
boolean SIG_4 = readBuffer.readBit("SIG_4") ;

        // Simple Field (SIG_3)
boolean SIG_3 = readBuffer.readBit("SIG_3") ;

        // Simple Field (SIG_2)
boolean SIG_2 = readBuffer.readBit("SIG_2") ;

        // Simple Field (SIG_1)
boolean SIG_1 = readBuffer.readBit("SIG_1") ;
        readBuffer.closeContext("State");
        // Create the instance
        return new State(SIG_8, SIG_7, SIG_6, SIG_5, SIG_4, SIG_3, SIG_2, SIG_1);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, State _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("State");

        // Simple Field (SIG_8)
        boolean SIG_8 = (boolean) _value.getSIG_8();
        writeBuffer.writeBit("SIG_8", (boolean) (SIG_8));

        // Simple Field (SIG_7)
        boolean SIG_7 = (boolean) _value.getSIG_7();
        writeBuffer.writeBit("SIG_7", (boolean) (SIG_7));

        // Simple Field (SIG_6)
        boolean SIG_6 = (boolean) _value.getSIG_6();
        writeBuffer.writeBit("SIG_6", (boolean) (SIG_6));

        // Simple Field (SIG_5)
        boolean SIG_5 = (boolean) _value.getSIG_5();
        writeBuffer.writeBit("SIG_5", (boolean) (SIG_5));

        // Simple Field (SIG_4)
        boolean SIG_4 = (boolean) _value.getSIG_4();
        writeBuffer.writeBit("SIG_4", (boolean) (SIG_4));

        // Simple Field (SIG_3)
        boolean SIG_3 = (boolean) _value.getSIG_3();
        writeBuffer.writeBit("SIG_3", (boolean) (SIG_3));

        // Simple Field (SIG_2)
        boolean SIG_2 = (boolean) _value.getSIG_2();
        writeBuffer.writeBit("SIG_2", (boolean) (SIG_2));

        // Simple Field (SIG_1)
        boolean SIG_1 = (boolean) _value.getSIG_1();
        writeBuffer.writeBit("SIG_1", (boolean) (SIG_1));
        writeBuffer.popContext("State");
    }

}
