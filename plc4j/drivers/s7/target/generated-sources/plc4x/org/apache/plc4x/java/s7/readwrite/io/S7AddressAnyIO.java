/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7AddressAnyIO implements MessageIO<S7AddressAny, S7AddressAny> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7AddressAnyIO.class);

    @Override
    public S7AddressAny parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7AddressAny) new S7AddressIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7AddressAny value, Object... args) throws ParseException {
        new S7AddressIO().serialize(writeBuffer, value, args);
    }

    public static S7AddressAnyBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7AddressAny");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("transportSize");
        // Enum field (transportSize)
        TransportSize transportSize = TransportSize.firstEnumForFieldCode(readBuffer.readSignedByte("TransportSize", 8));
        readBuffer.closeContext("transportSize");


        // Simple Field (numberOfElements)
int numberOfElements = readBuffer.readUnsignedInt("numberOfElements", 16) ;

        // Simple Field (dbNumber)
int dbNumber = readBuffer.readUnsignedInt("dbNumber", 16) ;
        readBuffer.pullContext("area");

        // Simple Field (area)
        // enum based simple field with type MemoryArea
        MemoryArea area = MemoryArea.enumForValue(readBuffer.readUnsignedShort("MemoryArea", 8));
        readBuffer.closeContext("area");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 5);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (byteAddress)
int byteAddress = readBuffer.readUnsignedInt("byteAddress", 16) ;

        // Simple Field (bitAddress)
byte bitAddress = readBuffer.readUnsignedByte("bitAddress", 3) ;
        readBuffer.closeContext("S7AddressAny");
        // Create the instance
        return new S7AddressAnyBuilder(transportSize, numberOfElements, dbNumber, area, byteAddress, bitAddress);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7AddressAny _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7AddressAny");

        writeBuffer.pushContext("transportSize");
        // Enum field (transportSize)
        TransportSize transportSize = (TransportSize) _value.getTransportSize();
        writeBuffer.writeUnsignedShort("TransportSize", 8, ((Number) (transportSize.getCode())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(transportSize.name()));
        writeBuffer.popContext("transportSize");

        // Simple Field (numberOfElements)
        int numberOfElements = (int) _value.getNumberOfElements();
        writeBuffer.writeUnsignedInt("numberOfElements", 16, ((Number) (numberOfElements)).intValue());

        // Simple Field (dbNumber)
        int dbNumber = (int) _value.getDbNumber();
        writeBuffer.writeUnsignedInt("dbNumber", 16, ((Number) (dbNumber)).intValue());

        // Simple Field (area)
        MemoryArea area = (MemoryArea) _value.getArea();
        writeBuffer.pushContext("area");
        // enum field with type MemoryArea
        writeBuffer.writeUnsignedShort("MemoryArea", 8, ((Number) (area.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(area.name()));
        writeBuffer.popContext("area");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 5, ((Number) (short) 0x00).shortValue());

        // Simple Field (byteAddress)
        int byteAddress = (int) _value.getByteAddress();
        writeBuffer.writeUnsignedInt("byteAddress", 16, ((Number) (byteAddress)).intValue());

        // Simple Field (bitAddress)
        byte bitAddress = (byte) _value.getBitAddress();
        writeBuffer.writeUnsignedByte("bitAddress", 3, ((Number) (bitAddress)).byteValue());
        writeBuffer.popContext("S7AddressAny");
    }

    public static class S7AddressAnyBuilder implements S7AddressIO.S7AddressBuilder {
        private final TransportSize transportSize;
        private final int numberOfElements;
        private final int dbNumber;
        private final MemoryArea area;
        private final int byteAddress;
        private final byte bitAddress;

        public S7AddressAnyBuilder(TransportSize transportSize, int numberOfElements, int dbNumber, MemoryArea area, int byteAddress, byte bitAddress) {
            this.transportSize = transportSize;
            this.numberOfElements = numberOfElements;
            this.dbNumber = dbNumber;
            this.area = area;
            this.byteAddress = byteAddress;
            this.bitAddress = bitAddress;
        }

        public S7AddressAny build() {
            return new S7AddressAny(transportSize, numberOfElements, dbNumber, area, byteAddress, bitAddress);
        }
    }

}
