/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class S7AddressAny extends S7Address implements Message {

    // Accessors for discriminator values.
    public Short getAddressType() {
        return 0x10;
    }

    // Properties.
    private final TransportSize transportSize;
    private final int numberOfElements;
    private final int dbNumber;
    private final MemoryArea area;
    private final int byteAddress;
    private final byte bitAddress;

    public S7AddressAny(TransportSize transportSize, int numberOfElements, int dbNumber, MemoryArea area, int byteAddress, byte bitAddress) {
        this.transportSize = transportSize;
        this.numberOfElements = numberOfElements;
        this.dbNumber = dbNumber;
        this.area = area;
        this.byteAddress = byteAddress;
        this.bitAddress = bitAddress;
    }

    public TransportSize getTransportSize() {
        return transportSize;
    }

    public int getNumberOfElements() {
        return numberOfElements;
    }

    public int getDbNumber() {
        return dbNumber;
    }

    public MemoryArea getArea() {
        return area;
    }

    public int getByteAddress() {
        return byteAddress;
    }

    public byte getBitAddress() {
        return bitAddress;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        S7AddressAny _value  = this;

        // Enum Field (transportSize)
        lengthInBits += 8;

        // Simple field (numberOfElements)
        lengthInBits += 16;

        // Simple field (dbNumber)
        lengthInBits += 16;

        // Simple field (area)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 5;

        // Simple field (byteAddress)
        lengthInBits += 16;

        // Simple field (bitAddress)
        lengthInBits += 3;

        return lengthInBits;
    }

    @Override
    public MessageIO<S7Address, S7Address> getMessageIO() {
        return new S7AddressIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof S7AddressAny)) {
            return false;
        }
        S7AddressAny that = (S7AddressAny) o;
        return
            (getTransportSize() == that.getTransportSize()) &&
            (getNumberOfElements() == that.getNumberOfElements()) &&
            (getDbNumber() == that.getDbNumber()) &&
            (getArea() == that.getArea()) &&
            (getByteAddress() == that.getByteAddress()) &&
            (getBitAddress() == that.getBitAddress()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getTransportSize(),
            getNumberOfElements(),
            getDbNumber(),
            getArea(),
            getByteAddress(),
            getBitAddress()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("transportSize", getTransportSize())
            .append("numberOfElements", getNumberOfElements())
            .append("dbNumber", getDbNumber())
            .append("area", getArea())
            .append("byteAddress", getByteAddress())
            .append("bitAddress", getBitAddress())
            .toString();
    }

}
