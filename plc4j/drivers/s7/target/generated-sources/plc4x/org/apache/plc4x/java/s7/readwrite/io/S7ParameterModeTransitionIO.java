/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7ParameterModeTransitionIO implements MessageIO<S7ParameterModeTransition, S7ParameterModeTransition> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7ParameterModeTransitionIO.class);

    @Override
    public S7ParameterModeTransition parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7ParameterModeTransition) new S7ParameterIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7ParameterModeTransition value, Object... args) throws ParseException {
        new S7ParameterIO().serialize(writeBuffer, value, args);
    }

    public static S7ParameterModeTransitionBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7ParameterModeTransition");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0010) {
                LOGGER.info("Expected constant value " + 0x0010 + " but got " + reserved + " for reserved field.");
            }
        }

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = readBuffer.readUnsignedShort("itemLength", 8);


        // Simple Field (method)
short method = readBuffer.readUnsignedShort("method", 8) ;

        // Simple Field (cpuFunctionType)
byte cpuFunctionType = readBuffer.readUnsignedByte("cpuFunctionType", 4) ;

        // Simple Field (cpuFunctionGroup)
byte cpuFunctionGroup = readBuffer.readUnsignedByte("cpuFunctionGroup", 4) ;

        // Simple Field (currentMode)
short currentMode = readBuffer.readUnsignedShort("currentMode", 8) ;

        // Simple Field (sequenceNumber)
short sequenceNumber = readBuffer.readUnsignedShort("sequenceNumber", 8) ;
        readBuffer.closeContext("S7ParameterModeTransition");
        // Create the instance
        return new S7ParameterModeTransitionBuilder(method, cpuFunctionType, cpuFunctionGroup, currentMode, sequenceNumber);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7ParameterModeTransition _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7ParameterModeTransition");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0010).intValue());

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = (short) ((_value.getLengthInBytes()) - (2));
        writeBuffer.writeUnsignedShort("itemLength", 8, ((Number) (itemLength)).shortValue());

        // Simple Field (method)
        short method = (short) _value.getMethod();
        writeBuffer.writeUnsignedShort("method", 8, ((Number) (method)).shortValue());

        // Simple Field (cpuFunctionType)
        byte cpuFunctionType = (byte) _value.getCpuFunctionType();
        writeBuffer.writeUnsignedByte("cpuFunctionType", 4, ((Number) (cpuFunctionType)).byteValue());

        // Simple Field (cpuFunctionGroup)
        byte cpuFunctionGroup = (byte) _value.getCpuFunctionGroup();
        writeBuffer.writeUnsignedByte("cpuFunctionGroup", 4, ((Number) (cpuFunctionGroup)).byteValue());

        // Simple Field (currentMode)
        short currentMode = (short) _value.getCurrentMode();
        writeBuffer.writeUnsignedShort("currentMode", 8, ((Number) (currentMode)).shortValue());

        // Simple Field (sequenceNumber)
        short sequenceNumber = (short) _value.getSequenceNumber();
        writeBuffer.writeUnsignedShort("sequenceNumber", 8, ((Number) (sequenceNumber)).shortValue());
        writeBuffer.popContext("S7ParameterModeTransition");
    }

    public static class S7ParameterModeTransitionBuilder implements S7ParameterIO.S7ParameterBuilder {
        private final short method;
        private final byte cpuFunctionType;
        private final byte cpuFunctionGroup;
        private final short currentMode;
        private final short sequenceNumber;

        public S7ParameterModeTransitionBuilder(short method, byte cpuFunctionType, byte cpuFunctionGroup, short currentMode, short sequenceNumber) {
            this.method = method;
            this.cpuFunctionType = cpuFunctionType;
            this.cpuFunctionGroup = cpuFunctionGroup;
            this.currentMode = currentMode;
            this.sequenceNumber = sequenceNumber;
        }

        public S7ParameterModeTransition build() {
            return new S7ParameterModeTransition(method, cpuFunctionType, cpuFunctionGroup, currentMode, sequenceNumber);
        }
    }

}
