/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7VarRequestParameterItemAddressIO implements MessageIO<S7VarRequestParameterItemAddress, S7VarRequestParameterItemAddress> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7VarRequestParameterItemAddressIO.class);

    @Override
    public S7VarRequestParameterItemAddress parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7VarRequestParameterItemAddress) new S7VarRequestParameterItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7VarRequestParameterItemAddress value, Object... args) throws ParseException {
        new S7VarRequestParameterItemIO().serialize(writeBuffer, value, args);
    }

    public static S7VarRequestParameterItemAddressBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7VarRequestParameterItemAddress");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = readBuffer.readUnsignedShort("itemLength", 8);

        readBuffer.pullContext("address");

        // Simple Field (address)
S7Address address = S7AddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("address");

        readBuffer.closeContext("S7VarRequestParameterItemAddress");
        // Create the instance
        return new S7VarRequestParameterItemAddressBuilder(address);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7VarRequestParameterItemAddress _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7VarRequestParameterItemAddress");

        // Implicit Field (itemLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short itemLength = (short) (_value.getAddress().getLengthInBytes());
        writeBuffer.writeUnsignedShort("itemLength", 8, ((Number) (itemLength)).shortValue());

        // Simple Field (address)
        S7Address address = (S7Address) _value.getAddress();
        writeBuffer.pushContext("address");
        S7AddressIO.staticSerialize(writeBuffer, address);
        writeBuffer.popContext("address");
        writeBuffer.popContext("S7VarRequestParameterItemAddress");
    }

    public static class S7VarRequestParameterItemAddressBuilder implements S7VarRequestParameterItemIO.S7VarRequestParameterItemBuilder {
        private final S7Address address;

        public S7VarRequestParameterItemAddressBuilder(S7Address address) {
            this.address = address;
        }

        public S7VarRequestParameterItemAddress build() {
            return new S7VarRequestParameterItemAddress(address);
        }
    }

}
