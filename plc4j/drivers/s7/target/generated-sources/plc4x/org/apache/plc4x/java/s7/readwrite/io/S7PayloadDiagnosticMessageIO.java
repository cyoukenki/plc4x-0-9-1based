/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadDiagnosticMessageIO implements MessageIO<S7PayloadDiagnosticMessage, S7PayloadDiagnosticMessage> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7PayloadDiagnosticMessageIO.class);

    @Override
    public S7PayloadDiagnosticMessage parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7PayloadDiagnosticMessage) new S7PayloadUserDataItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7PayloadDiagnosticMessage value, Object... args) throws ParseException {
        new S7PayloadUserDataItemIO().serialize(writeBuffer, value, args);
    }

    public static S7PayloadDiagnosticMessageBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7PayloadDiagnosticMessage");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (EventId)
int EventId = readBuffer.readUnsignedInt("EventId", 16) ;

        // Simple Field (PriorityClass)
short PriorityClass = readBuffer.readUnsignedShort("PriorityClass", 8) ;

        // Simple Field (ObNumber)
short ObNumber = readBuffer.readUnsignedShort("ObNumber", 8) ;

        // Simple Field (DatId)
int DatId = readBuffer.readUnsignedInt("DatId", 16) ;

        // Simple Field (Info1)
int Info1 = readBuffer.readUnsignedInt("Info1", 16) ;

        // Simple Field (Info2)
long Info2 = readBuffer.readUnsignedLong("Info2", 32) ;
        readBuffer.pullContext("TimeStamp");

        // Simple Field (TimeStamp)
DateAndTime TimeStamp = DateAndTimeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("TimeStamp");

        readBuffer.closeContext("S7PayloadDiagnosticMessage");
        // Create the instance
        return new S7PayloadDiagnosticMessageBuilder(EventId, PriorityClass, ObNumber, DatId, Info1, Info2, TimeStamp);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7PayloadDiagnosticMessage _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7PayloadDiagnosticMessage");

        // Simple Field (EventId)
        int EventId = (int) _value.getEventId();
        writeBuffer.writeUnsignedInt("EventId", 16, ((Number) (EventId)).intValue());

        // Simple Field (PriorityClass)
        short PriorityClass = (short) _value.getPriorityClass();
        writeBuffer.writeUnsignedShort("PriorityClass", 8, ((Number) (PriorityClass)).shortValue());

        // Simple Field (ObNumber)
        short ObNumber = (short) _value.getObNumber();
        writeBuffer.writeUnsignedShort("ObNumber", 8, ((Number) (ObNumber)).shortValue());

        // Simple Field (DatId)
        int DatId = (int) _value.getDatId();
        writeBuffer.writeUnsignedInt("DatId", 16, ((Number) (DatId)).intValue());

        // Simple Field (Info1)
        int Info1 = (int) _value.getInfo1();
        writeBuffer.writeUnsignedInt("Info1", 16, ((Number) (Info1)).intValue());

        // Simple Field (Info2)
        long Info2 = (long) _value.getInfo2();
        writeBuffer.writeUnsignedLong("Info2", 32, ((Number) (Info2)).longValue());

        // Simple Field (TimeStamp)
        DateAndTime TimeStamp = (DateAndTime) _value.getTimeStamp();
        writeBuffer.pushContext("TimeStamp");
        DateAndTimeIO.staticSerialize(writeBuffer, TimeStamp);
        writeBuffer.popContext("TimeStamp");
        writeBuffer.popContext("S7PayloadDiagnosticMessage");
    }

    public static class S7PayloadDiagnosticMessageBuilder implements S7PayloadUserDataItemIO.S7PayloadUserDataItemBuilder {
        private final int EventId;
        private final short PriorityClass;
        private final short ObNumber;
        private final int DatId;
        private final int Info1;
        private final long Info2;
        private final DateAndTime TimeStamp;

        public S7PayloadDiagnosticMessageBuilder(int EventId, short PriorityClass, short ObNumber, int DatId, int Info1, long Info2, DateAndTime TimeStamp) {
            this.EventId = EventId;
            this.PriorityClass = PriorityClass;
            this.ObNumber = ObNumber;
            this.DatId = DatId;
            this.Info1 = Info1;
            this.Info2 = Info2;
            this.TimeStamp = TimeStamp;
        }

        public S7PayloadDiagnosticMessage build(DataTransportErrorCode returnCode, DataTransportSize transportSize) {
            return new S7PayloadDiagnosticMessage(returnCode, transportSize, EventId, PriorityClass, ObNumber, DatId, Info1, Info2, TimeStamp);
        }
    }

}
