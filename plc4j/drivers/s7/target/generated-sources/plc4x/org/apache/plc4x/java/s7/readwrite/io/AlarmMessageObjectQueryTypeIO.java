/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AlarmMessageObjectQueryTypeIO implements MessageIO<AlarmMessageObjectQueryType, AlarmMessageObjectQueryType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlarmMessageObjectQueryTypeIO.class);

    @Override
    public AlarmMessageObjectQueryType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return AlarmMessageObjectQueryTypeIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AlarmMessageObjectQueryType value, Object... args) throws ParseException {
        AlarmMessageObjectQueryTypeIO.staticSerialize(writeBuffer, value);
    }

    public static AlarmMessageObjectQueryType staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AlarmMessageObjectQueryType");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (lengthDataset)
short lengthDataset = readBuffer.readUnsignedShort("lengthDataset", 8) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }

        // Const Field (variableSpec)
        short variableSpec = readBuffer.readUnsignedShort("variableSpec", 8);
        if(variableSpec != AlarmMessageObjectQueryType.VARIABLESPEC) {
            throw new ParseException("Expected constant value " + AlarmMessageObjectQueryType.VARIABLESPEC + " but got " + variableSpec);
        }

        readBuffer.pullContext("eventState");

        // Simple Field (eventState)
State eventState = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("eventState");

        readBuffer.pullContext("ackStateGoing");

        // Simple Field (ackStateGoing)
State ackStateGoing = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ackStateGoing");

        readBuffer.pullContext("ackStateComing");

        // Simple Field (ackStateComing)
State ackStateComing = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ackStateComing");

        readBuffer.pullContext("timeComing");

        // Simple Field (timeComing)
DateAndTime timeComing = DateAndTimeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("timeComing");

        readBuffer.pullContext("valueComing");

        // Simple Field (valueComing)
AssociatedValueType valueComing = AssociatedValueTypeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("valueComing");

        readBuffer.pullContext("timeGoing");

        // Simple Field (timeGoing)
DateAndTime timeGoing = DateAndTimeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("timeGoing");

        readBuffer.pullContext("valueGoing");

        // Simple Field (valueGoing)
AssociatedValueType valueGoing = AssociatedValueTypeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("valueGoing");

        readBuffer.closeContext("AlarmMessageObjectQueryType");
        // Create the instance
        return new AlarmMessageObjectQueryType(lengthDataset, eventState, ackStateGoing, ackStateComing, timeComing, valueComing, timeGoing, valueGoing);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AlarmMessageObjectQueryType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AlarmMessageObjectQueryType");

        // Simple Field (lengthDataset)
        short lengthDataset = (short) _value.getLengthDataset();
        writeBuffer.writeUnsignedShort("lengthDataset", 8, ((Number) (lengthDataset)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Const Field (variableSpec)
        writeBuffer.writeUnsignedShort("variableSpec", 8, ((Number) 0x12).shortValue());

        // Simple Field (eventState)
        State eventState = (State) _value.getEventState();
        writeBuffer.pushContext("eventState");
        StateIO.staticSerialize(writeBuffer, eventState);
        writeBuffer.popContext("eventState");

        // Simple Field (ackStateGoing)
        State ackStateGoing = (State) _value.getAckStateGoing();
        writeBuffer.pushContext("ackStateGoing");
        StateIO.staticSerialize(writeBuffer, ackStateGoing);
        writeBuffer.popContext("ackStateGoing");

        // Simple Field (ackStateComing)
        State ackStateComing = (State) _value.getAckStateComing();
        writeBuffer.pushContext("ackStateComing");
        StateIO.staticSerialize(writeBuffer, ackStateComing);
        writeBuffer.popContext("ackStateComing");

        // Simple Field (timeComing)
        DateAndTime timeComing = (DateAndTime) _value.getTimeComing();
        writeBuffer.pushContext("timeComing");
        DateAndTimeIO.staticSerialize(writeBuffer, timeComing);
        writeBuffer.popContext("timeComing");

        // Simple Field (valueComing)
        AssociatedValueType valueComing = (AssociatedValueType) _value.getValueComing();
        writeBuffer.pushContext("valueComing");
        AssociatedValueTypeIO.staticSerialize(writeBuffer, valueComing);
        writeBuffer.popContext("valueComing");

        // Simple Field (timeGoing)
        DateAndTime timeGoing = (DateAndTime) _value.getTimeGoing();
        writeBuffer.pushContext("timeGoing");
        DateAndTimeIO.staticSerialize(writeBuffer, timeGoing);
        writeBuffer.popContext("timeGoing");

        // Simple Field (valueGoing)
        AssociatedValueType valueGoing = (AssociatedValueType) _value.getValueGoing();
        writeBuffer.pushContext("valueGoing");
        AssociatedValueTypeIO.staticSerialize(writeBuffer, valueGoing);
        writeBuffer.popContext("valueGoing");
        writeBuffer.popContext("AlarmMessageObjectQueryType");
    }

}
