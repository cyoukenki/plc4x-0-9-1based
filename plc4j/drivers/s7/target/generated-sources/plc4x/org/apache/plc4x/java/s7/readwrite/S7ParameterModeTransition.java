/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class S7ParameterModeTransition extends S7Parameter implements Message {

    // Accessors for discriminator values.
    public Short getParameterType() {
        return 0x01;
    }
    public Short getMessageType() {
        return 0x07;
    }

    // Properties.
    private final short method;
    private final byte cpuFunctionType;
    private final byte cpuFunctionGroup;
    private final short currentMode;
    private final short sequenceNumber;

    public S7ParameterModeTransition(short method, byte cpuFunctionType, byte cpuFunctionGroup, short currentMode, short sequenceNumber) {
        this.method = method;
        this.cpuFunctionType = cpuFunctionType;
        this.cpuFunctionGroup = cpuFunctionGroup;
        this.currentMode = currentMode;
        this.sequenceNumber = sequenceNumber;
    }

    public short getMethod() {
        return method;
    }

    public byte getCpuFunctionType() {
        return cpuFunctionType;
    }

    public byte getCpuFunctionGroup() {
        return cpuFunctionGroup;
    }

    public short getCurrentMode() {
        return currentMode;
    }

    public short getSequenceNumber() {
        return sequenceNumber;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        S7ParameterModeTransition _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Implicit Field (itemLength)
        lengthInBits += 8;
        //short itemLength = (short) ((_value.getLengthInBytes()) - (2));

        // Simple field (method)
        lengthInBits += 8;

        // Simple field (cpuFunctionType)
        lengthInBits += 4;

        // Simple field (cpuFunctionGroup)
        lengthInBits += 4;

        // Simple field (currentMode)
        lengthInBits += 8;

        // Simple field (sequenceNumber)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<S7Parameter, S7Parameter> getMessageIO() {
        return new S7ParameterIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof S7ParameterModeTransition)) {
            return false;
        }
        S7ParameterModeTransition that = (S7ParameterModeTransition) o;
        return
            (getMethod() == that.getMethod()) &&
            (getCpuFunctionType() == that.getCpuFunctionType()) &&
            (getCpuFunctionGroup() == that.getCpuFunctionGroup()) &&
            (getCurrentMode() == that.getCurrentMode()) &&
            (getSequenceNumber() == that.getSequenceNumber()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getMethod(),
            getCpuFunctionType(),
            getCpuFunctionGroup(),
            getCurrentMode(),
            getSequenceNumber()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("method", getMethod())
            .append("cpuFunctionType", getCpuFunctionType())
            .append("cpuFunctionGroup", getCpuFunctionGroup())
            .append("currentMode", getCurrentMode())
            .append("sequenceNumber", getSequenceNumber())
            .toString();
    }

}
