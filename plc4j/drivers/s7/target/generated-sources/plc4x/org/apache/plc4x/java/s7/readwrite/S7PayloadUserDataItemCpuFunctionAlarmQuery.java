/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadUserDataItemCpuFunctionAlarmQuery extends S7PayloadUserDataItem implements Message {

    // Accessors for discriminator values.
    public Byte getCpuFunctionType() {
        return 0x04;
    }
    public Short getCpuSubfunction() {
        return 0x13;
    }
    public Integer getDataLength() {
        return 0;
    }

    // Constant values.
    public static final short FUNCTIONID = 0x00;
    public static final short NUMBERMESSAGEOBJ = 0x01;
    public static final short VARIABLESPEC = 0x12;
    public static final short LENGTH = 0x08;

    // Properties.
    private final SyntaxIdType syntaxId;
    private final QueryType queryType;
    private final AlarmType alarmType;

    public S7PayloadUserDataItemCpuFunctionAlarmQuery(DataTransportErrorCode returnCode, DataTransportSize transportSize, SyntaxIdType syntaxId, QueryType queryType, AlarmType alarmType) {
        super(returnCode, transportSize);
        this.syntaxId = syntaxId;
        this.queryType = queryType;
        this.alarmType = alarmType;
    }

    public SyntaxIdType getSyntaxId() {
        return syntaxId;
    }

    public QueryType getQueryType() {
        return queryType;
    }

    public AlarmType getAlarmType() {
        return alarmType;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        S7PayloadUserDataItemCpuFunctionAlarmQuery _value  = this;

        // Const Field (functionId)
        lengthInBits += 8;

        // Const Field (numberMessageObj)
        lengthInBits += 8;

        // Const Field (variableSpec)
        lengthInBits += 8;

        // Const Field (length)
        lengthInBits += 8;

        // Simple field (syntaxId)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Simple field (queryType)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Simple field (alarmType)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<S7PayloadUserDataItem, S7PayloadUserDataItem> getMessageIO() {
        return new S7PayloadUserDataItemIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof S7PayloadUserDataItemCpuFunctionAlarmQuery)) {
            return false;
        }
        S7PayloadUserDataItemCpuFunctionAlarmQuery that = (S7PayloadUserDataItemCpuFunctionAlarmQuery) o;
        return
            (getSyntaxId() == that.getSyntaxId()) &&
            (getQueryType() == that.getQueryType()) &&
            (getAlarmType() == that.getAlarmType()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getSyntaxId(),
            getQueryType(),
            getAlarmType()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("syntaxId", getSyntaxId())
            .append("queryType", getQueryType())
            .append("alarmType", getAlarmType())
            .toString();
    }

}
