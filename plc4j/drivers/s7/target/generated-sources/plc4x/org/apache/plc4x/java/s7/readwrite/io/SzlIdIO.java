/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SzlIdIO implements MessageIO<SzlId, SzlId> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SzlIdIO.class);

    @Override
    public SzlId parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return SzlIdIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SzlId value, Object... args) throws ParseException {
        SzlIdIO.staticSerialize(writeBuffer, value);
    }

    public static SzlId staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SzlId");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("typeClass");

        // Simple Field (typeClass)
        // enum based simple field with type SzlModuleTypeClass
        SzlModuleTypeClass typeClass = SzlModuleTypeClass.enumForValue(readBuffer.readUnsignedByte("SzlModuleTypeClass", 4));
        readBuffer.closeContext("typeClass");


        // Simple Field (sublistExtract)
byte sublistExtract = readBuffer.readUnsignedByte("sublistExtract", 4) ;
        readBuffer.pullContext("sublistList");

        // Simple Field (sublistList)
        // enum based simple field with type SzlSublist
        SzlSublist sublistList = SzlSublist.enumForValue(readBuffer.readUnsignedShort("SzlSublist", 8));
        readBuffer.closeContext("sublistList");

        readBuffer.closeContext("SzlId");
        // Create the instance
        return new SzlId(typeClass, sublistExtract, sublistList);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SzlId _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SzlId");

        // Simple Field (typeClass)
        SzlModuleTypeClass typeClass = (SzlModuleTypeClass) _value.getTypeClass();
        writeBuffer.pushContext("typeClass");
        // enum field with type SzlModuleTypeClass
        writeBuffer.writeUnsignedByte("SzlModuleTypeClass", 4, ((Number) (typeClass.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(typeClass.name()));
        writeBuffer.popContext("typeClass");

        // Simple Field (sublistExtract)
        byte sublistExtract = (byte) _value.getSublistExtract();
        writeBuffer.writeUnsignedByte("sublistExtract", 4, ((Number) (sublistExtract)).byteValue());

        // Simple Field (sublistList)
        SzlSublist sublistList = (SzlSublist) _value.getSublistList();
        writeBuffer.pushContext("sublistList");
        // enum field with type SzlSublist
        writeBuffer.writeUnsignedShort("SzlSublist", 8, ((Number) (sublistList.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(sublistList.name()));
        writeBuffer.popContext("sublistList");
        writeBuffer.popContext("SzlId");
    }

}
