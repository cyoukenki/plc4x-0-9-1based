/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7ParameterWriteVarRequestIO implements MessageIO<S7ParameterWriteVarRequest, S7ParameterWriteVarRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7ParameterWriteVarRequestIO.class);

    @Override
    public S7ParameterWriteVarRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7ParameterWriteVarRequest) new S7ParameterIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7ParameterWriteVarRequest value, Object... args) throws ParseException {
        new S7ParameterIO().serialize(writeBuffer, value, args);
    }

    public static S7ParameterWriteVarRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7ParameterWriteVarRequest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Implicit Field (numItems) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short numItems = readBuffer.readUnsignedShort("numItems", 8);
        // Array field (items)
        readBuffer.pullContext("items", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numItems > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numItems) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        S7VarRequestParameterItem[] items;
        {
            int itemCount = Math.max(0, (int) numItems);
            items = new S7VarRequestParameterItem[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
items[curItem] = S7VarRequestParameterItemIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("items", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("S7ParameterWriteVarRequest");
        // Create the instance
        return new S7ParameterWriteVarRequestBuilder(items);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7ParameterWriteVarRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7ParameterWriteVarRequest");

        // Implicit Field (numItems) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short numItems = (short) (COUNT(_value.getItems()));
        writeBuffer.writeUnsignedShort("numItems", 8, ((Number) (numItems)).shortValue());

        // Array Field (items)
        if(_value.getItems() != null) {
            writeBuffer.pushContext("items", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getItems().length;
            int curItem = 0;
            for(S7VarRequestParameterItem element : _value.getItems()) {
                boolean lastItem = curItem == (itemCount - 1);
                S7VarRequestParameterItemIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("items", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S7ParameterWriteVarRequest");
    }

    public static class S7ParameterWriteVarRequestBuilder implements S7ParameterIO.S7ParameterBuilder {
        private final S7VarRequestParameterItem[] items;

        public S7ParameterWriteVarRequestBuilder(S7VarRequestParameterItem[] items) {
            this.items = items;
        }

        public S7ParameterWriteVarRequest build() {
            return new S7ParameterWriteVarRequest(items);
        }
    }

}
