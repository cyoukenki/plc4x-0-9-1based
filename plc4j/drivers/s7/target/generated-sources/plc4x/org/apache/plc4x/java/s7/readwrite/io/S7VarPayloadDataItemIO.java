/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7VarPayloadDataItemIO implements MessageIO<S7VarPayloadDataItem, S7VarPayloadDataItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7VarPayloadDataItemIO.class);

    @Override
    public S7VarPayloadDataItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Boolean lastItem;
        if(args[0] instanceof Boolean) {
            lastItem = (Boolean) args[0];
        } else if (args[0] instanceof String) {
            lastItem = Boolean.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean or a string which is parseable but was " + args[0].getClass().getName());
        }
        return S7VarPayloadDataItemIO.staticParse(readBuffer, lastItem);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7VarPayloadDataItem value, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        if(!(args[0] instanceof Boolean)) {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean but was " + args[0].getClass().getName());
        }
        Boolean lastItem = (Boolean) args[0];
        S7VarPayloadDataItemIO.staticSerialize(writeBuffer, value, lastItem);
    }

    public static S7VarPayloadDataItem staticParse(ReadBuffer readBuffer, Boolean lastItem) throws ParseException {
        readBuffer.pullContext("S7VarPayloadDataItem");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("returnCode");

        // Simple Field (returnCode)
        // enum based simple field with type DataTransportErrorCode
        DataTransportErrorCode returnCode = DataTransportErrorCode.enumForValue(readBuffer.readUnsignedShort("DataTransportErrorCode", 8));
        readBuffer.closeContext("returnCode");

        readBuffer.pullContext("transportSize");

        // Simple Field (transportSize)
        // enum based simple field with type DataTransportSize
        DataTransportSize transportSize = DataTransportSize.enumForValue(readBuffer.readUnsignedShort("DataTransportSize", 8));
        readBuffer.closeContext("transportSize");

        // Implicit Field (dataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dataLength = readBuffer.readUnsignedInt("dataLength", 16);
        // Byte Array field (data)
        int numberOfBytes = ((transportSize.getSizeInBits()) ? CEIL((dataLength) / (8.0)) : dataLength);
        byte[] data = readBuffer.readByteArray("data", numberOfBytes);

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) (((lastItem) ? 0 : (COUNT(data)) % (2)));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("S7VarPayloadDataItem");
        // Create the instance
        return new S7VarPayloadDataItem(returnCode, transportSize, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7VarPayloadDataItem _value, Boolean lastItem) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7VarPayloadDataItem");

        // Simple Field (returnCode)
        DataTransportErrorCode returnCode = (DataTransportErrorCode) _value.getReturnCode();
        writeBuffer.pushContext("returnCode");
        // enum field with type DataTransportErrorCode
        writeBuffer.writeUnsignedShort("DataTransportErrorCode", 8, ((Number) (returnCode.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(returnCode.name()));
        writeBuffer.popContext("returnCode");

        // Simple Field (transportSize)
        DataTransportSize transportSize = (DataTransportSize) _value.getTransportSize();
        writeBuffer.pushContext("transportSize");
        // enum field with type DataTransportSize
        writeBuffer.writeUnsignedShort("DataTransportSize", 8, ((Number) (transportSize.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(transportSize.name()));
        writeBuffer.popContext("transportSize");

        // Implicit Field (dataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dataLength = (int) ((COUNT(_value.getData())) * ((((((_value.getTransportSize()) == (DataTransportSize.BIT))) ? 1 : (((_value.getTransportSize().getSizeInBits()) ? 8 : 1))))));
        writeBuffer.writeUnsignedInt("dataLength", 16, ((Number) (dataLength)).intValue());

        // Array Field (data)
        if(_value.getData() != null) {
            // Byte Array field (data)
            writeBuffer.writeByteArray("data", _value.getData());
        }

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) (((lastItem) ? 0 : (COUNT(_value.getData())) % (2)));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("S7VarPayloadDataItem");
    }

}
