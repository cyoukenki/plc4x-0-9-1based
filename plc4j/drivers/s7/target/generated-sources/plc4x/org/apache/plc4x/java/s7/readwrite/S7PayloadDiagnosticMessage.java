/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadDiagnosticMessage extends S7PayloadUserDataItem implements Message {

    // Accessors for discriminator values.
    public Byte getCpuFunctionType() {
        return 0x00;
    }
    public Short getCpuSubfunction() {
        return 0x03;
    }
    public Integer getDataLength() {
        return 0;
    }

    // Properties.
    private final int EventId;
    private final short PriorityClass;
    private final short ObNumber;
    private final int DatId;
    private final int Info1;
    private final long Info2;
    private final DateAndTime TimeStamp;

    public S7PayloadDiagnosticMessage(DataTransportErrorCode returnCode, DataTransportSize transportSize, int EventId, short PriorityClass, short ObNumber, int DatId, int Info1, long Info2, DateAndTime TimeStamp) {
        super(returnCode, transportSize);
        this.EventId = EventId;
        this.PriorityClass = PriorityClass;
        this.ObNumber = ObNumber;
        this.DatId = DatId;
        this.Info1 = Info1;
        this.Info2 = Info2;
        this.TimeStamp = TimeStamp;
    }

    public int getEventId() {
        return EventId;
    }

    public short getPriorityClass() {
        return PriorityClass;
    }

    public short getObNumber() {
        return ObNumber;
    }

    public int getDatId() {
        return DatId;
    }

    public int getInfo1() {
        return Info1;
    }

    public long getInfo2() {
        return Info2;
    }

    public DateAndTime getTimeStamp() {
        return TimeStamp;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        S7PayloadDiagnosticMessage _value  = this;

        // Simple field (EventId)
        lengthInBits += 16;

        // Simple field (PriorityClass)
        lengthInBits += 8;

        // Simple field (ObNumber)
        lengthInBits += 8;

        // Simple field (DatId)
        lengthInBits += 16;

        // Simple field (Info1)
        lengthInBits += 16;

        // Simple field (Info2)
        lengthInBits += 32;

        // Simple field (TimeStamp)
        lengthInBits += TimeStamp.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<S7PayloadUserDataItem, S7PayloadUserDataItem> getMessageIO() {
        return new S7PayloadUserDataItemIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof S7PayloadDiagnosticMessage)) {
            return false;
        }
        S7PayloadDiagnosticMessage that = (S7PayloadDiagnosticMessage) o;
        return
            (getEventId() == that.getEventId()) &&
            (getPriorityClass() == that.getPriorityClass()) &&
            (getObNumber() == that.getObNumber()) &&
            (getDatId() == that.getDatId()) &&
            (getInfo1() == that.getInfo1()) &&
            (getInfo2() == that.getInfo2()) &&
            (getTimeStamp() == that.getTimeStamp()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getEventId(),
            getPriorityClass(),
            getObNumber(),
            getDatId(),
            getInfo1(),
            getInfo2(),
            getTimeStamp()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("EventId", getEventId())
            .append("PriorityClass", getPriorityClass())
            .append("ObNumber", getObNumber())
            .append("DatId", getDatId())
            .append("Info1", getInfo1())
            .append("Info2", getInfo2())
            .append("TimeStamp", getTimeStamp())
            .toString();
    }

}
