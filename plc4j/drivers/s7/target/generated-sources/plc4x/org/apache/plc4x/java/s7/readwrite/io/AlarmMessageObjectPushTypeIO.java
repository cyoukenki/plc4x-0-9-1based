/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class AlarmMessageObjectPushTypeIO implements MessageIO<AlarmMessageObjectPushType, AlarmMessageObjectPushType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlarmMessageObjectPushTypeIO.class);

    @Override
    public AlarmMessageObjectPushType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return AlarmMessageObjectPushTypeIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, AlarmMessageObjectPushType value, Object... args) throws ParseException {
        AlarmMessageObjectPushTypeIO.staticSerialize(writeBuffer, value);
    }

    public static AlarmMessageObjectPushType staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("AlarmMessageObjectPushType");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (variableSpec)
        short variableSpec = readBuffer.readUnsignedShort("variableSpec", 8);
        if(variableSpec != AlarmMessageObjectPushType.VARIABLESPEC) {
            throw new ParseException("Expected constant value " + AlarmMessageObjectPushType.VARIABLESPEC + " but got " + variableSpec);
        }


        // Simple Field (lengthSpec)
short lengthSpec = readBuffer.readUnsignedShort("lengthSpec", 8) ;
        readBuffer.pullContext("syntaxId");

        // Simple Field (syntaxId)
        // enum based simple field with type SyntaxIdType
        SyntaxIdType syntaxId = SyntaxIdType.enumForValue(readBuffer.readUnsignedShort("SyntaxIdType", 8));
        readBuffer.closeContext("syntaxId");


        // Simple Field (numberOfValues)
short numberOfValues = readBuffer.readUnsignedShort("numberOfValues", 8) ;

        // Simple Field (eventId)
long eventId = readBuffer.readUnsignedLong("eventId", 32) ;
        readBuffer.pullContext("eventState");

        // Simple Field (eventState)
State eventState = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("eventState");

        readBuffer.pullContext("localState");

        // Simple Field (localState)
State localState = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("localState");

        readBuffer.pullContext("ackStateGoing");

        // Simple Field (ackStateGoing)
State ackStateGoing = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ackStateGoing");

        readBuffer.pullContext("ackStateComing");

        // Simple Field (ackStateComing)
State ackStateComing = StateIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ackStateComing");
        // Array field (AssociatedValues)
        readBuffer.pullContext("AssociatedValues", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numberOfValues > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        AssociatedValueType[] AssociatedValues;
        {
            int itemCount = Math.max(0, (int) numberOfValues);
            AssociatedValues = new AssociatedValueType[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
AssociatedValues[curItem] = AssociatedValueTypeIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("AssociatedValues", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("AlarmMessageObjectPushType");
        // Create the instance
        return new AlarmMessageObjectPushType(lengthSpec, syntaxId, numberOfValues, eventId, eventState, localState, ackStateGoing, ackStateComing, AssociatedValues);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, AlarmMessageObjectPushType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("AlarmMessageObjectPushType");

        // Const Field (variableSpec)
        writeBuffer.writeUnsignedShort("variableSpec", 8, ((Number) 0x12).shortValue());

        // Simple Field (lengthSpec)
        short lengthSpec = (short) _value.getLengthSpec();
        writeBuffer.writeUnsignedShort("lengthSpec", 8, ((Number) (lengthSpec)).shortValue());

        // Simple Field (syntaxId)
        SyntaxIdType syntaxId = (SyntaxIdType) _value.getSyntaxId();
        writeBuffer.pushContext("syntaxId");
        // enum field with type SyntaxIdType
        writeBuffer.writeUnsignedShort("SyntaxIdType", 8, ((Number) (syntaxId.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(syntaxId.name()));
        writeBuffer.popContext("syntaxId");

        // Simple Field (numberOfValues)
        short numberOfValues = (short) _value.getNumberOfValues();
        writeBuffer.writeUnsignedShort("numberOfValues", 8, ((Number) (numberOfValues)).shortValue());

        // Simple Field (eventId)
        long eventId = (long) _value.getEventId();
        writeBuffer.writeUnsignedLong("eventId", 32, ((Number) (eventId)).longValue());

        // Simple Field (eventState)
        State eventState = (State) _value.getEventState();
        writeBuffer.pushContext("eventState");
        StateIO.staticSerialize(writeBuffer, eventState);
        writeBuffer.popContext("eventState");

        // Simple Field (localState)
        State localState = (State) _value.getLocalState();
        writeBuffer.pushContext("localState");
        StateIO.staticSerialize(writeBuffer, localState);
        writeBuffer.popContext("localState");

        // Simple Field (ackStateGoing)
        State ackStateGoing = (State) _value.getAckStateGoing();
        writeBuffer.pushContext("ackStateGoing");
        StateIO.staticSerialize(writeBuffer, ackStateGoing);
        writeBuffer.popContext("ackStateGoing");

        // Simple Field (ackStateComing)
        State ackStateComing = (State) _value.getAckStateComing();
        writeBuffer.pushContext("ackStateComing");
        StateIO.staticSerialize(writeBuffer, ackStateComing);
        writeBuffer.popContext("ackStateComing");

        // Array Field (AssociatedValues)
        if(_value.getAssociatedValues() != null) {
            writeBuffer.pushContext("AssociatedValues", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getAssociatedValues().length;
            int curItem = 0;
            for(AssociatedValueType element : _value.getAssociatedValues()) {
                boolean lastItem = curItem == (itemCount - 1);
                AssociatedValueTypeIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("AssociatedValues", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("AlarmMessageObjectPushType");
    }

}
