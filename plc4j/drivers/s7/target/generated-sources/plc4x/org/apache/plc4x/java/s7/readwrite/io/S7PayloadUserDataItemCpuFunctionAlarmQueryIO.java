/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadUserDataItemCpuFunctionAlarmQueryIO implements MessageIO<S7PayloadUserDataItemCpuFunctionAlarmQuery, S7PayloadUserDataItemCpuFunctionAlarmQuery> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7PayloadUserDataItemCpuFunctionAlarmQueryIO.class);

    @Override
    public S7PayloadUserDataItemCpuFunctionAlarmQuery parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (S7PayloadUserDataItemCpuFunctionAlarmQuery) new S7PayloadUserDataItemIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionAlarmQuery value, Object... args) throws ParseException {
        new S7PayloadUserDataItemIO().serialize(writeBuffer, value, args);
    }

    public static S7PayloadUserDataItemCpuFunctionAlarmQueryBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7PayloadUserDataItemCpuFunctionAlarmQuery");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (functionId)
        short functionId = readBuffer.readUnsignedShort("functionId", 8);
        if(functionId != S7PayloadUserDataItemCpuFunctionAlarmQuery.FUNCTIONID) {
            throw new ParseException("Expected constant value " + S7PayloadUserDataItemCpuFunctionAlarmQuery.FUNCTIONID + " but got " + functionId);
        }

        // Const Field (numberMessageObj)
        short numberMessageObj = readBuffer.readUnsignedShort("numberMessageObj", 8);
        if(numberMessageObj != S7PayloadUserDataItemCpuFunctionAlarmQuery.NUMBERMESSAGEOBJ) {
            throw new ParseException("Expected constant value " + S7PayloadUserDataItemCpuFunctionAlarmQuery.NUMBERMESSAGEOBJ + " but got " + numberMessageObj);
        }

        // Const Field (variableSpec)
        short variableSpec = readBuffer.readUnsignedShort("variableSpec", 8);
        if(variableSpec != S7PayloadUserDataItemCpuFunctionAlarmQuery.VARIABLESPEC) {
            throw new ParseException("Expected constant value " + S7PayloadUserDataItemCpuFunctionAlarmQuery.VARIABLESPEC + " but got " + variableSpec);
        }

        // Const Field (length)
        short length = readBuffer.readUnsignedShort("length", 8);
        if(length != S7PayloadUserDataItemCpuFunctionAlarmQuery.LENGTH) {
            throw new ParseException("Expected constant value " + S7PayloadUserDataItemCpuFunctionAlarmQuery.LENGTH + " but got " + length);
        }

        readBuffer.pullContext("syntaxId");

        // Simple Field (syntaxId)
        // enum based simple field with type SyntaxIdType
        SyntaxIdType syntaxId = SyntaxIdType.enumForValue(readBuffer.readUnsignedShort("SyntaxIdType", 8));
        readBuffer.closeContext("syntaxId");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("queryType");

        // Simple Field (queryType)
        // enum based simple field with type QueryType
        QueryType queryType = QueryType.enumForValue(readBuffer.readUnsignedShort("QueryType", 8));
        readBuffer.closeContext("queryType");

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x34) {
                LOGGER.info("Expected constant value " + 0x34 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("alarmType");

        // Simple Field (alarmType)
        // enum based simple field with type AlarmType
        AlarmType alarmType = AlarmType.enumForValue(readBuffer.readUnsignedShort("AlarmType", 8));
        readBuffer.closeContext("alarmType");

        readBuffer.closeContext("S7PayloadUserDataItemCpuFunctionAlarmQuery");
        // Create the instance
        return new S7PayloadUserDataItemCpuFunctionAlarmQueryBuilder(syntaxId, queryType, alarmType);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7PayloadUserDataItemCpuFunctionAlarmQuery _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7PayloadUserDataItemCpuFunctionAlarmQuery");

        // Const Field (functionId)
        writeBuffer.writeUnsignedShort("functionId", 8, ((Number) 0x00).shortValue());

        // Const Field (numberMessageObj)
        writeBuffer.writeUnsignedShort("numberMessageObj", 8, ((Number) 0x01).shortValue());

        // Const Field (variableSpec)
        writeBuffer.writeUnsignedShort("variableSpec", 8, ((Number) 0x12).shortValue());

        // Const Field (length)
        writeBuffer.writeUnsignedShort("length", 8, ((Number) 0x08).shortValue());

        // Simple Field (syntaxId)
        SyntaxIdType syntaxId = (SyntaxIdType) _value.getSyntaxId();
        writeBuffer.pushContext("syntaxId");
        // enum field with type SyntaxIdType
        writeBuffer.writeUnsignedShort("SyntaxIdType", 8, ((Number) (syntaxId.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(syntaxId.name()));
        writeBuffer.popContext("syntaxId");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Simple Field (queryType)
        QueryType queryType = (QueryType) _value.getQueryType();
        writeBuffer.pushContext("queryType");
        // enum field with type QueryType
        writeBuffer.writeUnsignedShort("QueryType", 8, ((Number) (queryType.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(queryType.name()));
        writeBuffer.popContext("queryType");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x34).shortValue());

        // Simple Field (alarmType)
        AlarmType alarmType = (AlarmType) _value.getAlarmType();
        writeBuffer.pushContext("alarmType");
        // enum field with type AlarmType
        writeBuffer.writeUnsignedShort("AlarmType", 8, ((Number) (alarmType.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(alarmType.name()));
        writeBuffer.popContext("alarmType");
        writeBuffer.popContext("S7PayloadUserDataItemCpuFunctionAlarmQuery");
    }

    public static class S7PayloadUserDataItemCpuFunctionAlarmQueryBuilder implements S7PayloadUserDataItemIO.S7PayloadUserDataItemBuilder {
        private final SyntaxIdType syntaxId;
        private final QueryType queryType;
        private final AlarmType alarmType;

        public S7PayloadUserDataItemCpuFunctionAlarmQueryBuilder(SyntaxIdType syntaxId, QueryType queryType, AlarmType alarmType) {
            this.syntaxId = syntaxId;
            this.queryType = queryType;
            this.alarmType = alarmType;
        }

        public S7PayloadUserDataItemCpuFunctionAlarmQuery build(DataTransportErrorCode returnCode, DataTransportSize transportSize) {
            return new S7PayloadUserDataItemCpuFunctionAlarmQuery(returnCode, transportSize, syntaxId, queryType, alarmType);
        }
    }

}
