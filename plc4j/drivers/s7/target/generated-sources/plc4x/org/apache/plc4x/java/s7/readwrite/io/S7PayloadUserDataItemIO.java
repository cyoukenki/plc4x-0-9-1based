/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7PayloadUserDataItemIO implements MessageIO<S7PayloadUserDataItem, S7PayloadUserDataItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7PayloadUserDataItemIO.class);

    @Override
    public S7PayloadUserDataItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 2)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 2, but got " + args.length);
        }
        Byte cpuFunctionType;
        if(args[0] instanceof Byte) {
            cpuFunctionType = (Byte) args[0];
        } else if (args[0] instanceof String) {
            cpuFunctionType = Byte.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Byte or a string which is parseable but was " + args[0].getClass().getName());
        }
        Short cpuSubfunction;
        if(args[1] instanceof Short) {
            cpuSubfunction = (Short) args[1];
        } else if (args[1] instanceof String) {
            cpuSubfunction = Short.valueOf((String) args[1]);
        } else {
            throw new PlcRuntimeException("Argument 1 expected to be of type Short or a string which is parseable but was " + args[1].getClass().getName());
        }
        return S7PayloadUserDataItemIO.staticParse(readBuffer, cpuFunctionType, cpuSubfunction);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7PayloadUserDataItem value, Object... args) throws ParseException {
        S7PayloadUserDataItemIO.staticSerialize(writeBuffer, value);
    }

    public static S7PayloadUserDataItem staticParse(ReadBuffer readBuffer, Byte cpuFunctionType, Short cpuSubfunction) throws ParseException {
        readBuffer.pullContext("S7PayloadUserDataItem");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("returnCode");

        // Simple Field (returnCode)
        // enum based simple field with type DataTransportErrorCode
        DataTransportErrorCode returnCode = DataTransportErrorCode.enumForValue(readBuffer.readUnsignedShort("DataTransportErrorCode", 8));
        readBuffer.closeContext("returnCode");

        readBuffer.pullContext("transportSize");

        // Simple Field (transportSize)
        // enum based simple field with type DataTransportSize
        DataTransportSize transportSize = DataTransportSize.enumForValue(readBuffer.readUnsignedShort("DataTransportSize", 8));
        readBuffer.closeContext("transportSize");

        // Implicit Field (dataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dataLength = readBuffer.readUnsignedInt("dataLength", 16);

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        S7PayloadUserDataItemBuilder builder = null;
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x03)) {
            builder = S7PayloadDiagnosticMessageIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x05)) {
            builder = S7PayloadAlarm8IO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x06)) {
            builder = S7PayloadNotifyIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x0c)) {
            builder = S7PayloadAlarmAckIndIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x11)) {
            builder = S7PayloadAlarmSQIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x12)) {
            builder = S7PayloadAlarmSIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x13)) {
            builder = S7PayloadAlarmSCIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x00) && EvaluationHelper.equals(cpuSubfunction, 0x16)) {
            builder = S7PayloadNotify8IO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x04) && EvaluationHelper.equals(cpuSubfunction, 0x01)) {
            builder = S7PayloadUserDataItemCpuFunctionReadSzlRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x01)) {
            builder = S7PayloadUserDataItemCpuFunctionReadSzlResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x04) && EvaluationHelper.equals(cpuSubfunction, 0x02)) {
            builder = S7PayloadUserDataItemCpuFunctionMsgSubscriptionIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x02) && EvaluationHelper.equals(dataLength, 0x00)) {
            builder = S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x02) && EvaluationHelper.equals(dataLength, 0x02)) {
            builder = S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x02) && EvaluationHelper.equals(dataLength, 0x05)) {
            builder = S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x04) && EvaluationHelper.equals(cpuSubfunction, 0x0b)) {
            builder = S7PayloadUserDataItemCpuFunctionAlarmAckIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x0b)) {
            builder = S7PayloadUserDataItemCpuFunctionAlarmAckResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x04) && EvaluationHelper.equals(cpuSubfunction, 0x13)) {
            builder = S7PayloadUserDataItemCpuFunctionAlarmQueryIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(cpuFunctionType, 0x08) && EvaluationHelper.equals(cpuSubfunction, 0x13)) {
            builder = S7PayloadUserDataItemCpuFunctionAlarmQueryResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("S7PayloadUserDataItem");
        // Create the instance
        return builder.build(returnCode, transportSize);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7PayloadUserDataItem _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7PayloadUserDataItem");

        // Simple Field (returnCode)
        DataTransportErrorCode returnCode = (DataTransportErrorCode) _value.getReturnCode();
        writeBuffer.pushContext("returnCode");
        // enum field with type DataTransportErrorCode
        writeBuffer.writeUnsignedShort("DataTransportErrorCode", 8, ((Number) (returnCode.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(returnCode.name()));
        writeBuffer.popContext("returnCode");

        // Simple Field (transportSize)
        DataTransportSize transportSize = (DataTransportSize) _value.getTransportSize();
        writeBuffer.pushContext("transportSize");
        // enum field with type DataTransportSize
        writeBuffer.writeUnsignedShort("DataTransportSize", 8, ((Number) (transportSize.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(transportSize.name()));
        writeBuffer.popContext("transportSize");

        // Implicit Field (dataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dataLength = (int) ((_value.getLengthInBytes()) - (4));
        writeBuffer.writeUnsignedInt("dataLength", 16, ((Number) (dataLength)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof S7PayloadDiagnosticMessage) {
            S7PayloadDiagnosticMessageIO.staticSerialize(writeBuffer, (S7PayloadDiagnosticMessage) _value);
        } else 
        if(_value instanceof S7PayloadAlarm8) {
            S7PayloadAlarm8IO.staticSerialize(writeBuffer, (S7PayloadAlarm8) _value);
        } else 
        if(_value instanceof S7PayloadNotify) {
            S7PayloadNotifyIO.staticSerialize(writeBuffer, (S7PayloadNotify) _value);
        } else 
        if(_value instanceof S7PayloadAlarmAckInd) {
            S7PayloadAlarmAckIndIO.staticSerialize(writeBuffer, (S7PayloadAlarmAckInd) _value);
        } else 
        if(_value instanceof S7PayloadAlarmSQ) {
            S7PayloadAlarmSQIO.staticSerialize(writeBuffer, (S7PayloadAlarmSQ) _value);
        } else 
        if(_value instanceof S7PayloadAlarmS) {
            S7PayloadAlarmSIO.staticSerialize(writeBuffer, (S7PayloadAlarmS) _value);
        } else 
        if(_value instanceof S7PayloadAlarmSC) {
            S7PayloadAlarmSCIO.staticSerialize(writeBuffer, (S7PayloadAlarmSC) _value);
        } else 
        if(_value instanceof S7PayloadNotify8) {
            S7PayloadNotify8IO.staticSerialize(writeBuffer, (S7PayloadNotify8) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionReadSzlRequest) {
            S7PayloadUserDataItemCpuFunctionReadSzlRequestIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionReadSzlRequest) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionReadSzlResponse) {
            S7PayloadUserDataItemCpuFunctionReadSzlResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionReadSzlResponse) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionMsgSubscription) {
            S7PayloadUserDataItemCpuFunctionMsgSubscriptionIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionMsgSubscription) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse) {
            S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse) {
            S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse) {
            S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionAlarmAck) {
            S7PayloadUserDataItemCpuFunctionAlarmAckIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionAlarmAck) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionAlarmAckResponse) {
            S7PayloadUserDataItemCpuFunctionAlarmAckResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionAlarmAckResponse) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionAlarmQuery) {
            S7PayloadUserDataItemCpuFunctionAlarmQueryIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionAlarmQuery) _value);
        } else 
        if(_value instanceof S7PayloadUserDataItemCpuFunctionAlarmQueryResponse) {
            S7PayloadUserDataItemCpuFunctionAlarmQueryResponseIO.staticSerialize(writeBuffer, (S7PayloadUserDataItemCpuFunctionAlarmQueryResponse) _value);
        }
        writeBuffer.popContext("S7PayloadUserDataItem");
    }

    public static interface S7PayloadUserDataItemBuilder {
        S7PayloadUserDataItem build(DataTransportErrorCode returnCode, DataTransportSize transportSize);
    }

}
