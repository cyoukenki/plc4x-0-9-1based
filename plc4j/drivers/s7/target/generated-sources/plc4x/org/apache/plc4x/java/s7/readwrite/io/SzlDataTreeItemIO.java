/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;

import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SzlDataTreeItemIO implements MessageIO<SzlDataTreeItem, SzlDataTreeItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SzlDataTreeItemIO.class);

    @Override
    public SzlDataTreeItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return SzlDataTreeItemIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, SzlDataTreeItem value, Object... args) throws ParseException {
        SzlDataTreeItemIO.staticSerialize(writeBuffer, value);
    }

    public static SzlDataTreeItem staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("SzlDataTreeItem");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (itemIndex)
int itemIndex = readBuffer.readUnsignedInt("itemIndex", 16) ;        // Byte Array field (mlfb)
        int numberOfBytes = 20;
        byte[] mlfb = readBuffer.readByteArray("mlfb", numberOfBytes);


        // Simple Field (moduleTypeId)
int moduleTypeId = readBuffer.readUnsignedInt("moduleTypeId", 16) ;

        // Simple Field (ausbg)
int ausbg = readBuffer.readUnsignedInt("ausbg", 16) ;

        // Simple Field (ausbe)
int ausbe = readBuffer.readUnsignedInt("ausbe", 16) ;
        readBuffer.closeContext("SzlDataTreeItem");
        // Create the instance
        return new SzlDataTreeItem(itemIndex, mlfb, moduleTypeId, ausbg, ausbe);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, SzlDataTreeItem _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("SzlDataTreeItem");

        // Simple Field (itemIndex)
        int itemIndex = (int) _value.getItemIndex();
        writeBuffer.writeUnsignedInt("itemIndex", 16, ((Number) (itemIndex)).intValue());

        // Array Field (mlfb)
        if(_value.getMlfb() != null) {
            // Byte Array field (mlfb)
            writeBuffer.writeByteArray("mlfb", _value.getMlfb());
        }

        // Simple Field (moduleTypeId)
        int moduleTypeId = (int) _value.getModuleTypeId();
        writeBuffer.writeUnsignedInt("moduleTypeId", 16, ((Number) (moduleTypeId)).intValue());

        // Simple Field (ausbg)
        int ausbg = (int) _value.getAusbg();
        writeBuffer.writeUnsignedInt("ausbg", 16, ((Number) (ausbg)).intValue());

        // Simple Field (ausbe)
        int ausbe = (int) _value.getAusbe();
        writeBuffer.writeUnsignedInt("ausbe", 16, ((Number) (ausbe)).intValue());
        writeBuffer.popContext("SzlDataTreeItem");
    }

}
