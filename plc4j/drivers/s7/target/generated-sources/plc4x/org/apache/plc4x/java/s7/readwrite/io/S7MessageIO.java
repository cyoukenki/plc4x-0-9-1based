/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class S7MessageIO implements MessageIO<S7Message, S7Message> {

    private static final Logger LOGGER = LoggerFactory.getLogger(S7MessageIO.class);

    @Override
    public S7Message parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return S7MessageIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, S7Message value, Object... args) throws ParseException {
        S7MessageIO.staticSerialize(writeBuffer, value);
    }

    public static S7Message staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("S7Message");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (protocolId)
        short protocolId = readBuffer.readUnsignedShort("protocolId", 8);
        if(protocolId != S7Message.PROTOCOLID) {
            throw new ParseException("Expected constant value " + S7Message.PROTOCOLID + " but got " + protocolId);
        }

        // Discriminator Field (messageType) (Used as input to a switch field)
        short messageType = readBuffer.readUnsignedShort("messageType", 8);


        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (tpduReference)
int tpduReference = readBuffer.readUnsignedInt("tpduReference", 16) ;
        // Implicit Field (parameterLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int parameterLength = readBuffer.readUnsignedInt("parameterLength", 16);

        // Implicit Field (payloadLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int payloadLength = readBuffer.readUnsignedInt("payloadLength", 16);

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        S7MessageBuilder builder = null;
                if(EvaluationHelper.equals(messageType, 0x01)) {
            builder = S7MessageRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, 0x02)) {
            builder = S7MessageResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, 0x03)) {
            builder = S7MessageResponseDataIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(messageType, 0x07)) {
            builder = S7MessageUserDataIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        // Optional Field (parameter) (Can be skipped, if a given expression evaluates to false)
        S7Parameter parameter = null;
        if((parameterLength) > (0)) {
            parameter = S7ParameterIO.staticParse(readBuffer, (short) (messageType));
        }

        // Optional Field (payload) (Can be skipped, if a given expression evaluates to false)
        S7Payload payload = null;
        if((payloadLength) > (0)) {
            payload = S7PayloadIO.staticParse(readBuffer, (short) (messageType), (S7Parameter) (parameter));
        }

        readBuffer.closeContext("S7Message");
        // Create the instance
        return builder.build(tpduReference, parameter, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, S7Message _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("S7Message");

        // Const Field (protocolId)
        writeBuffer.writeUnsignedShort("protocolId", 8, ((Number) 0x32).shortValue());

        // Discriminator Field (messageType) (Used as input to a switch field)
        short messageType = (short) _value.getMessageType();
            writeBuffer.writeUnsignedShort("messageType", 8, ((Number) (messageType)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Simple Field (tpduReference)
        int tpduReference = (int) _value.getTpduReference();
        writeBuffer.writeUnsignedInt("tpduReference", 16, ((Number) (tpduReference)).intValue());

        // Implicit Field (parameterLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int parameterLength = (int) ((((_value.getParameter()) != (null)) ? _value.getParameter().getLengthInBytes() : 0));
        writeBuffer.writeUnsignedInt("parameterLength", 16, ((Number) (parameterLength)).intValue());

        // Implicit Field (payloadLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int payloadLength = (int) ((((_value.getPayload()) != (null)) ? _value.getPayload().getLengthInBytes() : 0));
        writeBuffer.writeUnsignedInt("payloadLength", 16, ((Number) (payloadLength)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof S7MessageRequest) {
            S7MessageRequestIO.staticSerialize(writeBuffer, (S7MessageRequest) _value);
        } else 
        if(_value instanceof S7MessageResponse) {
            S7MessageResponseIO.staticSerialize(writeBuffer, (S7MessageResponse) _value);
        } else 
        if(_value instanceof S7MessageResponseData) {
            S7MessageResponseDataIO.staticSerialize(writeBuffer, (S7MessageResponseData) _value);
        } else 
        if(_value instanceof S7MessageUserData) {
            S7MessageUserDataIO.staticSerialize(writeBuffer, (S7MessageUserData) _value);
        }

        // Optional Field (parameter) (Can be skipped, if the value is null)
        S7Parameter parameter = null;
        if(_value.getParameter() != null) {
            parameter = (S7Parameter) _value.getParameter();
            S7ParameterIO.staticSerialize(writeBuffer, parameter);
        }

        // Optional Field (payload) (Can be skipped, if the value is null)
        S7Payload payload = null;
        if(_value.getPayload() != null) {
            payload = (S7Payload) _value.getPayload();
            S7PayloadIO.staticSerialize(writeBuffer, payload);
        }
        writeBuffer.popContext("S7Message");
    }

    public static interface S7MessageBuilder {
        S7Message build(int tpduReference, S7Parameter parameter, S7Payload payload);
    }

}
