/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class State implements Message {


    // Properties.
    private final boolean SIG_8;
    private final boolean SIG_7;
    private final boolean SIG_6;
    private final boolean SIG_5;
    private final boolean SIG_4;
    private final boolean SIG_3;
    private final boolean SIG_2;
    private final boolean SIG_1;

    public State(boolean SIG_8, boolean SIG_7, boolean SIG_6, boolean SIG_5, boolean SIG_4, boolean SIG_3, boolean SIG_2, boolean SIG_1) {
        this.SIG_8 = SIG_8;
        this.SIG_7 = SIG_7;
        this.SIG_6 = SIG_6;
        this.SIG_5 = SIG_5;
        this.SIG_4 = SIG_4;
        this.SIG_3 = SIG_3;
        this.SIG_2 = SIG_2;
        this.SIG_1 = SIG_1;
    }

    public boolean getSIG_8() {
        return SIG_8;
    }

    public boolean getSIG_7() {
        return SIG_7;
    }

    public boolean getSIG_6() {
        return SIG_6;
    }

    public boolean getSIG_5() {
        return SIG_5;
    }

    public boolean getSIG_4() {
        return SIG_4;
    }

    public boolean getSIG_3() {
        return SIG_3;
    }

    public boolean getSIG_2() {
        return SIG_2;
    }

    public boolean getSIG_1() {
        return SIG_1;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        State _value  = this;

        // Simple field (SIG_8)
        lengthInBits += 1;

        // Simple field (SIG_7)
        lengthInBits += 1;

        // Simple field (SIG_6)
        lengthInBits += 1;

        // Simple field (SIG_5)
        lengthInBits += 1;

        // Simple field (SIG_4)
        lengthInBits += 1;

        // Simple field (SIG_3)
        lengthInBits += 1;

        // Simple field (SIG_2)
        lengthInBits += 1;

        // Simple field (SIG_1)
        lengthInBits += 1;

        return lengthInBits;
    }

    @Override
    public MessageIO<State, State> getMessageIO() {
        return new StateIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof State)) {
            return false;
        }
        State that = (State) o;
        return
            (getSIG_8() == that.getSIG_8()) &&
            (getSIG_7() == that.getSIG_7()) &&
            (getSIG_6() == that.getSIG_6()) &&
            (getSIG_5() == that.getSIG_5()) &&
            (getSIG_4() == that.getSIG_4()) &&
            (getSIG_3() == that.getSIG_3()) &&
            (getSIG_2() == that.getSIG_2()) &&
            (getSIG_1() == that.getSIG_1()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getSIG_8(),
            getSIG_7(),
            getSIG_6(),
            getSIG_5(),
            getSIG_4(),
            getSIG_3(),
            getSIG_2(),
            getSIG_1()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("SIG_8", getSIG_8())
            .append("SIG_7", getSIG_7())
            .append("SIG_6", getSIG_6())
            .append("SIG_5", getSIG_5())
            .append("SIG_4", getSIG_4())
            .append("SIG_3", getSIG_3())
            .append("SIG_2", getSIG_2())
            .append("SIG_1", getSIG_1())
            .toString();
    }

}
