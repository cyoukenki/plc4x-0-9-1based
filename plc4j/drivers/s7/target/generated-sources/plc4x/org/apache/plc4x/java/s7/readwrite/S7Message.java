/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public abstract class S7Message implements Message {

    // Abstract accessors for discriminator values.
    public abstract Short getMessageType();

    // Constant values.
    public static final short PROTOCOLID = 0x32;

    // Properties.
    private final int tpduReference;
    private final S7Parameter parameter;
    private final S7Payload payload;

    public S7Message(int tpduReference, S7Parameter parameter, S7Payload payload) {
        this.tpduReference = tpduReference;
        this.parameter = parameter;
        this.payload = payload;
    }

    public int getTpduReference() {
        return tpduReference;
    }

    public S7Parameter getParameter() {
        return parameter;
    }

    public S7Payload getPayload() {
        return payload;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        S7Message _value  = this;

        // Const Field (protocolId)
        lengthInBits += 8;

        // Discriminator Field (messageType)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Simple field (tpduReference)
        lengthInBits += 16;

        // Implicit Field (parameterLength)
        lengthInBits += 16;
        //int parameterLength = (int) ((((_value.getParameter()) != (null)) ? _value.getParameter().getLengthInBytes() : 0));

        // Implicit Field (payloadLength)
        lengthInBits += 16;
        //int payloadLength = (int) ((((_value.getPayload()) != (null)) ? _value.getPayload().getLengthInBytes() : 0));

        // Length of sub-type elements will be added by sub-type...

        // Optional Field (parameter)
        if(parameter != null) {
            lengthInBits += parameter.getLengthInBits();
        }

        // Optional Field (payload)
        if(payload != null) {
            lengthInBits += payload.getLengthInBits();
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<S7Message, S7Message> getMessageIO() {
        return new S7MessageIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof S7Message)) {
            return false;
        }
        S7Message that = (S7Message) o;
        return
            (getTpduReference() == that.getTpduReference()) &&
            (getParameter() == that.getParameter()) &&
            (getPayload() == that.getPayload()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTpduReference(),
            getParameter(),
            getPayload()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("tpduReference", getTpduReference())
            .append("parameter", getParameter())
            .append("payload", getPayload())
            .toString();
    }

}
