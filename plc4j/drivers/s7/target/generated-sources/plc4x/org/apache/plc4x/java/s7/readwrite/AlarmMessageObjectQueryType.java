/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AlarmMessageObjectQueryType implements Message {


    // Constant values.
    public static final short VARIABLESPEC = 0x12;

    // Properties.
    private final short lengthDataset;
    private final State eventState;
    private final State ackStateGoing;
    private final State ackStateComing;
    private final DateAndTime timeComing;
    private final AssociatedValueType valueComing;
    private final DateAndTime timeGoing;
    private final AssociatedValueType valueGoing;

    public AlarmMessageObjectQueryType(short lengthDataset, State eventState, State ackStateGoing, State ackStateComing, DateAndTime timeComing, AssociatedValueType valueComing, DateAndTime timeGoing, AssociatedValueType valueGoing) {
        this.lengthDataset = lengthDataset;
        this.eventState = eventState;
        this.ackStateGoing = ackStateGoing;
        this.ackStateComing = ackStateComing;
        this.timeComing = timeComing;
        this.valueComing = valueComing;
        this.timeGoing = timeGoing;
        this.valueGoing = valueGoing;
    }

    public short getLengthDataset() {
        return lengthDataset;
    }

    public State getEventState() {
        return eventState;
    }

    public State getAckStateGoing() {
        return ackStateGoing;
    }

    public State getAckStateComing() {
        return ackStateComing;
    }

    public DateAndTime getTimeComing() {
        return timeComing;
    }

    public AssociatedValueType getValueComing() {
        return valueComing;
    }

    public DateAndTime getTimeGoing() {
        return timeGoing;
    }

    public AssociatedValueType getValueGoing() {
        return valueGoing;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        AlarmMessageObjectQueryType _value  = this;

        // Simple field (lengthDataset)
        lengthInBits += 8;

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Const Field (variableSpec)
        lengthInBits += 8;

        // Simple field (eventState)
        lengthInBits += eventState.getLengthInBits();

        // Simple field (ackStateGoing)
        lengthInBits += ackStateGoing.getLengthInBits();

        // Simple field (ackStateComing)
        lengthInBits += ackStateComing.getLengthInBits();

        // Simple field (timeComing)
        lengthInBits += timeComing.getLengthInBits();

        // Simple field (valueComing)
        lengthInBits += valueComing.getLengthInBits();

        // Simple field (timeGoing)
        lengthInBits += timeGoing.getLengthInBits();

        // Simple field (valueGoing)
        lengthInBits += valueGoing.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<AlarmMessageObjectQueryType, AlarmMessageObjectQueryType> getMessageIO() {
        return new AlarmMessageObjectQueryTypeIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AlarmMessageObjectQueryType)) {
            return false;
        }
        AlarmMessageObjectQueryType that = (AlarmMessageObjectQueryType) o;
        return
            (getLengthDataset() == that.getLengthDataset()) &&
            (getEventState() == that.getEventState()) &&
            (getAckStateGoing() == that.getAckStateGoing()) &&
            (getAckStateComing() == that.getAckStateComing()) &&
            (getTimeComing() == that.getTimeComing()) &&
            (getValueComing() == that.getValueComing()) &&
            (getTimeGoing() == that.getTimeGoing()) &&
            (getValueGoing() == that.getValueGoing()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getLengthDataset(),
            getEventState(),
            getAckStateGoing(),
            getAckStateComing(),
            getTimeComing(),
            getValueComing(),
            getTimeGoing(),
            getValueGoing()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("lengthDataset", getLengthDataset())
            .append("eventState", getEventState())
            .append("ackStateGoing", getAckStateGoing())
            .append("ackStateComing", getAckStateComing())
            .append("timeComing", getTimeComing())
            .append("valueComing", getValueComing())
            .append("timeGoing", getTimeGoing())
            .append("valueGoing", getValueGoing())
            .toString();
    }

}
