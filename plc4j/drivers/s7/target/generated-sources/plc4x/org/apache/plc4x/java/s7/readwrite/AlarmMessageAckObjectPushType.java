/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class AlarmMessageAckObjectPushType implements Message {


    // Constant values.
    public static final short VARIABLESPEC = 0x12;

    // Properties.
    private final short lengthSpec;
    private final SyntaxIdType syntaxId;
    private final short numberOfValues;
    private final long eventId;
    private final State ackStateGoing;
    private final State ackStateComing;

    public AlarmMessageAckObjectPushType(short lengthSpec, SyntaxIdType syntaxId, short numberOfValues, long eventId, State ackStateGoing, State ackStateComing) {
        this.lengthSpec = lengthSpec;
        this.syntaxId = syntaxId;
        this.numberOfValues = numberOfValues;
        this.eventId = eventId;
        this.ackStateGoing = ackStateGoing;
        this.ackStateComing = ackStateComing;
    }

    public short getLengthSpec() {
        return lengthSpec;
    }

    public SyntaxIdType getSyntaxId() {
        return syntaxId;
    }

    public short getNumberOfValues() {
        return numberOfValues;
    }

    public long getEventId() {
        return eventId;
    }

    public State getAckStateGoing() {
        return ackStateGoing;
    }

    public State getAckStateComing() {
        return ackStateComing;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        AlarmMessageAckObjectPushType _value  = this;

        // Const Field (variableSpec)
        lengthInBits += 8;

        // Simple field (lengthSpec)
        lengthInBits += 8;

        // Simple field (syntaxId)
        lengthInBits += 8;

        // Simple field (numberOfValues)
        lengthInBits += 8;

        // Simple field (eventId)
        lengthInBits += 32;

        // Simple field (ackStateGoing)
        lengthInBits += ackStateGoing.getLengthInBits();

        // Simple field (ackStateComing)
        lengthInBits += ackStateComing.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<AlarmMessageAckObjectPushType, AlarmMessageAckObjectPushType> getMessageIO() {
        return new AlarmMessageAckObjectPushTypeIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AlarmMessageAckObjectPushType)) {
            return false;
        }
        AlarmMessageAckObjectPushType that = (AlarmMessageAckObjectPushType) o;
        return
            (getLengthSpec() == that.getLengthSpec()) &&
            (getSyntaxId() == that.getSyntaxId()) &&
            (getNumberOfValues() == that.getNumberOfValues()) &&
            (getEventId() == that.getEventId()) &&
            (getAckStateGoing() == that.getAckStateGoing()) &&
            (getAckStateComing() == that.getAckStateComing()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getLengthSpec(),
            getSyntaxId(),
            getNumberOfValues(),
            getEventId(),
            getAckStateGoing(),
            getAckStateComing()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("lengthSpec", getLengthSpec())
            .append("syntaxId", getSyntaxId())
            .append("numberOfValues", getNumberOfValues())
            .append("eventId", getEventId())
            .append("ackStateGoing", getAckStateGoing())
            .append("ackStateComing", getAckStateComing())
            .toString();
    }

}
