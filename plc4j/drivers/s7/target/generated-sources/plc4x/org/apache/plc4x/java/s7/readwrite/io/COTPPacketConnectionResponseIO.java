/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.*;
import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class COTPPacketConnectionResponseIO implements MessageIO<COTPPacketConnectionResponse, COTPPacketConnectionResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(COTPPacketConnectionResponseIO.class);

    @Override
    public COTPPacketConnectionResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (COTPPacketConnectionResponse) new COTPPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, COTPPacketConnectionResponse value, Object... args) throws ParseException {
        new COTPPacketIO().serialize(writeBuffer, value, args);
    }

    public static COTPPacketConnectionResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("COTPPacketConnectionResponse");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (destinationReference)
int destinationReference = readBuffer.readUnsignedInt("destinationReference", 16) ;

        // Simple Field (sourceReference)
int sourceReference = readBuffer.readUnsignedInt("sourceReference", 16) ;
        readBuffer.pullContext("protocolClass");

        // Simple Field (protocolClass)
        // enum based simple field with type COTPProtocolClass
        COTPProtocolClass protocolClass = COTPProtocolClass.enumForValue(readBuffer.readSignedByte("COTPProtocolClass", 8));
        readBuffer.closeContext("protocolClass");

        readBuffer.closeContext("COTPPacketConnectionResponse");
        // Create the instance
        return new COTPPacketConnectionResponseBuilder(destinationReference, sourceReference, protocolClass);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, COTPPacketConnectionResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("COTPPacketConnectionResponse");

        // Simple Field (destinationReference)
        int destinationReference = (int) _value.getDestinationReference();
        writeBuffer.writeUnsignedInt("destinationReference", 16, ((Number) (destinationReference)).intValue());

        // Simple Field (sourceReference)
        int sourceReference = (int) _value.getSourceReference();
        writeBuffer.writeUnsignedInt("sourceReference", 16, ((Number) (sourceReference)).intValue());

        // Simple Field (protocolClass)
        COTPProtocolClass protocolClass = (COTPProtocolClass) _value.getProtocolClass();
        writeBuffer.pushContext("protocolClass");
        // enum field with type COTPProtocolClass
        writeBuffer.writeSignedByte("COTPProtocolClass", 8, ((Number) (protocolClass.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(protocolClass.name()));
        writeBuffer.popContext("protocolClass");
        writeBuffer.popContext("COTPPacketConnectionResponse");
    }

    public static class COTPPacketConnectionResponseBuilder implements COTPPacketIO.COTPPacketBuilder {
        private final int destinationReference;
        private final int sourceReference;
        private final COTPProtocolClass protocolClass;

        public COTPPacketConnectionResponseBuilder(int destinationReference, int sourceReference, COTPProtocolClass protocolClass) {
            this.destinationReference = destinationReference;
            this.sourceReference = sourceReference;
            this.protocolClass = protocolClass;
        }

        public COTPPacketConnectionResponse build(COTPParameter[] parameters, S7Message payload) {
            return new COTPPacketConnectionResponse(parameters, payload, destinationReference, sourceReference, protocolClass);
        }
    }

}
