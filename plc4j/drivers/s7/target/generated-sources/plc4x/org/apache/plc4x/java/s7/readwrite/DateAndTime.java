/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.s7.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.s7.readwrite.io.*;
import org.apache.plc4x.java.s7.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DateAndTime implements Message {


    // Properties.
    private final short year;
    private final short month;
    private final short day;
    private final short hour;
    private final short minutes;
    private final short seconds;
    private final int msec;
    private final byte dow;

    public DateAndTime(short year, short month, short day, short hour, short minutes, short seconds, int msec, byte dow) {
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = hour;
        this.minutes = minutes;
        this.seconds = seconds;
        this.msec = msec;
        this.dow = dow;
    }

    public short getYear() {
        return year;
    }

    public short getMonth() {
        return month;
    }

    public short getDay() {
        return day;
    }

    public short getHour() {
        return hour;
    }

    public short getMinutes() {
        return minutes;
    }

    public short getSeconds() {
        return seconds;
    }

    public int getMsec() {
        return msec;
    }

    public byte getDow() {
        return dow;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        DateAndTime _value  = this;

        // Manual Field (year)
        lengthInBits += 1 * 8;

        // Manual Field (month)
        lengthInBits += 1 * 8;

        // Manual Field (day)
        lengthInBits += 1 * 8;

        // Manual Field (hour)
        lengthInBits += 1 * 8;

        // Manual Field (minutes)
        lengthInBits += 1 * 8;

        // Manual Field (seconds)
        lengthInBits += 1 * 8;

        // Manual Field (msec)
        lengthInBits += 2 * 8;

        // Simple field (dow)
        lengthInBits += 4;

        return lengthInBits;
    }

    @Override
    public MessageIO<DateAndTime, DateAndTime> getMessageIO() {
        return new DateAndTimeIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DateAndTime)) {
            return false;
        }
        DateAndTime that = (DateAndTime) o;
        return
            (getYear() == that.getYear()) &&
            (getMonth() == that.getMonth()) &&
            (getDay() == that.getDay()) &&
            (getHour() == that.getHour()) &&
            (getMinutes() == that.getMinutes()) &&
            (getSeconds() == that.getSeconds()) &&
            (getMsec() == that.getMsec()) &&
            (getDow() == that.getDow()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getYear(),
            getMonth(),
            getDay(),
            getHour(),
            getMinutes(),
            getSeconds(),
            getMsec(),
            getDow()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("year", getYear())
            .append("month", getMonth())
            .append("day", getDay())
            .append("hour", getHour())
            .append("minutes", getMinutes())
            .append("seconds", getSeconds())
            .append("msec", getMsec())
            .append("dow", getDow())
            .toString();
    }

}
