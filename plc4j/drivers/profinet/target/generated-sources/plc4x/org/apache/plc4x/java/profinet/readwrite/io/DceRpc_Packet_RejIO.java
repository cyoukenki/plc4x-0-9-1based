/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DceRpc_Packet_RejIO implements MessageIO<DceRpc_Packet_Rej, DceRpc_Packet_Rej> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DceRpc_Packet_RejIO.class);

    @Override
    public DceRpc_Packet_Rej parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (DceRpc_Packet_Rej) new DceRpc_PacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DceRpc_Packet_Rej value, Object... args) throws ParseException {
        new DceRpc_PacketIO().serialize(writeBuffer, value, args);
    }

    public static DceRpc_Packet_RejBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DceRpc_Packet_Rej");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        // Const Field (broadcast)
        byte broadcast = readBuffer.readUnsignedByte("broadcast", 1);
        if(broadcast != DceRpc_Packet_Rej.BROADCAST) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.BROADCAST + " but got " + broadcast);
        }

        // Const Field (idempotent)
        byte idempotent = readBuffer.readUnsignedByte("idempotent", 1);
        if(idempotent != DceRpc_Packet_Rej.IDEMPOTENT) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.IDEMPOTENT + " but got " + idempotent);
        }

        // Const Field (maybe)
        byte maybe = readBuffer.readUnsignedByte("maybe", 1);
        if(maybe != DceRpc_Packet_Rej.MAYBE) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.MAYBE + " but got " + maybe);
        }

        // Const Field (noFragmentAcknowledgeRequested)
        byte noFragmentAcknowledgeRequested = readBuffer.readUnsignedByte("noFragmentAcknowledgeRequested", 1);
        if(noFragmentAcknowledgeRequested != DceRpc_Packet_Rej.NOFRAGMENTACKNOWLEDGEREQUESTED) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.NOFRAGMENTACKNOWLEDGEREQUESTED + " but got " + noFragmentAcknowledgeRequested);
        }

        // Const Field (fragment)
        byte fragment = readBuffer.readUnsignedByte("fragment", 1);
        if(fragment != DceRpc_Packet_Rej.FRAGMENT) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.FRAGMENT + " but got " + fragment);
        }

        // Const Field (lastFragment)
        byte lastFragment = readBuffer.readUnsignedByte("lastFragment", 1);
        if(lastFragment != DceRpc_Packet_Rej.LASTFRAGMENT) {
            throw new ParseException("Expected constant value " + DceRpc_Packet_Rej.LASTFRAGMENT + " but got " + lastFragment);
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.closeContext("DceRpc_Packet_Rej");
        // Create the instance
        return new DceRpc_Packet_RejBuilder();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DceRpc_Packet_Rej _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DceRpc_Packet_Rej");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x0).byteValue());

        // Const Field (broadcast)
        writeBuffer.writeUnsignedByte("broadcast", 1, ((Number) 0).byteValue());

        // Const Field (idempotent)
        writeBuffer.writeUnsignedByte("idempotent", 1, ((Number) 0).byteValue());

        // Const Field (maybe)
        writeBuffer.writeUnsignedByte("maybe", 1, ((Number) 0).byteValue());

        // Const Field (noFragmentAcknowledgeRequested)
        writeBuffer.writeUnsignedByte("noFragmentAcknowledgeRequested", 1, ((Number) 0).byteValue());

        // Const Field (fragment)
        writeBuffer.writeUnsignedByte("fragment", 1, ((Number) 0).byteValue());

        // Const Field (lastFragment)
        writeBuffer.writeUnsignedByte("lastFragment", 1, ((Number) 0).byteValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x0).byteValue());
        writeBuffer.popContext("DceRpc_Packet_Rej");
    }

    public static class DceRpc_Packet_RejBuilder implements DceRpc_PacketIO.DceRpc_PacketBuilder {

        public DceRpc_Packet_RejBuilder() {
        }

        public DceRpc_Packet_Rej build(int instanceOrNodeNumber, int deviceId, int vendorId, long activity, long serverBootTime, long sequenceNumber, DceRpc_Operation operation, PnIoCm_Packet payload) {
            return new DceRpc_Packet_Rej(instanceOrNodeNumber, deviceId, vendorId, activity, serverBootTime, sequenceNumber, operation, payload);
        }
    }

}
