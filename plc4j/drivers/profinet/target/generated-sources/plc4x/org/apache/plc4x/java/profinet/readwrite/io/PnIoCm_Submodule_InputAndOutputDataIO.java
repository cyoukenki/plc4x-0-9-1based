/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Submodule_InputAndOutputDataIO implements MessageIO<PnIoCm_Submodule_InputAndOutputData, PnIoCm_Submodule_InputAndOutputData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Submodule_InputAndOutputDataIO.class);

    @Override
    public PnIoCm_Submodule_InputAndOutputData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Submodule_InputAndOutputData) new PnIoCm_SubmoduleIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Submodule_InputAndOutputData value, Object... args) throws ParseException {
        new PnIoCm_SubmoduleIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Submodule_InputAndOutputDataBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Submodule_InputAndOutputData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (inputDataDescription)
        int inputDataDescription = readBuffer.readUnsignedInt("inputDataDescription", 16);
        if(inputDataDescription != PnIoCm_Submodule_InputAndOutputData.INPUTDATADESCRIPTION) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_InputAndOutputData.INPUTDATADESCRIPTION + " but got " + inputDataDescription);
        }


        // Simple Field (inputSubmoduleDataLength)
int inputSubmoduleDataLength = readBuffer.readUnsignedInt("inputSubmoduleDataLength", 16) ;

        // Simple Field (inputLengthIoCs)
short inputLengthIoCs = readBuffer.readUnsignedShort("inputLengthIoCs", 8) ;

        // Simple Field (inputLengthIoPs)
short inputLengthIoPs = readBuffer.readUnsignedShort("inputLengthIoPs", 8) ;
        // Const Field (outputDataDescription)
        int outputDataDescription = readBuffer.readUnsignedInt("outputDataDescription", 16);
        if(outputDataDescription != PnIoCm_Submodule_InputAndOutputData.OUTPUTDATADESCRIPTION) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_InputAndOutputData.OUTPUTDATADESCRIPTION + " but got " + outputDataDescription);
        }


        // Simple Field (outputSubmoduleDataLength)
int outputSubmoduleDataLength = readBuffer.readUnsignedInt("outputSubmoduleDataLength", 16) ;

        // Simple Field (outputLengthIoCs)
short outputLengthIoCs = readBuffer.readUnsignedShort("outputLengthIoCs", 8) ;

        // Simple Field (outputLengthIoPs)
short outputLengthIoPs = readBuffer.readUnsignedShort("outputLengthIoPs", 8) ;
        readBuffer.closeContext("PnIoCm_Submodule_InputAndOutputData");
        // Create the instance
        return new PnIoCm_Submodule_InputAndOutputDataBuilder(inputSubmoduleDataLength, inputLengthIoCs, inputLengthIoPs, outputSubmoduleDataLength, outputLengthIoCs, outputLengthIoPs);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Submodule_InputAndOutputData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Submodule_InputAndOutputData");

        // Const Field (inputDataDescription)
        writeBuffer.writeUnsignedInt("inputDataDescription", 16, ((Number) 0x0001).intValue());

        // Simple Field (inputSubmoduleDataLength)
        int inputSubmoduleDataLength = (int) _value.getInputSubmoduleDataLength();
        writeBuffer.writeUnsignedInt("inputSubmoduleDataLength", 16, ((Number) (inputSubmoduleDataLength)).intValue());

        // Simple Field (inputLengthIoCs)
        short inputLengthIoCs = (short) _value.getInputLengthIoCs();
        writeBuffer.writeUnsignedShort("inputLengthIoCs", 8, ((Number) (inputLengthIoCs)).shortValue());

        // Simple Field (inputLengthIoPs)
        short inputLengthIoPs = (short) _value.getInputLengthIoPs();
        writeBuffer.writeUnsignedShort("inputLengthIoPs", 8, ((Number) (inputLengthIoPs)).shortValue());

        // Const Field (outputDataDescription)
        writeBuffer.writeUnsignedInt("outputDataDescription", 16, ((Number) 0x0002).intValue());

        // Simple Field (outputSubmoduleDataLength)
        int outputSubmoduleDataLength = (int) _value.getOutputSubmoduleDataLength();
        writeBuffer.writeUnsignedInt("outputSubmoduleDataLength", 16, ((Number) (outputSubmoduleDataLength)).intValue());

        // Simple Field (outputLengthIoCs)
        short outputLengthIoCs = (short) _value.getOutputLengthIoCs();
        writeBuffer.writeUnsignedShort("outputLengthIoCs", 8, ((Number) (outputLengthIoCs)).shortValue());

        // Simple Field (outputLengthIoPs)
        short outputLengthIoPs = (short) _value.getOutputLengthIoPs();
        writeBuffer.writeUnsignedShort("outputLengthIoPs", 8, ((Number) (outputLengthIoPs)).shortValue());
        writeBuffer.popContext("PnIoCm_Submodule_InputAndOutputData");
    }

    public static class PnIoCm_Submodule_InputAndOutputDataBuilder implements PnIoCm_SubmoduleIO.PnIoCm_SubmoduleBuilder {
        private final int inputSubmoduleDataLength;
        private final short inputLengthIoCs;
        private final short inputLengthIoPs;
        private final int outputSubmoduleDataLength;
        private final short outputLengthIoCs;
        private final short outputLengthIoPs;

        public PnIoCm_Submodule_InputAndOutputDataBuilder(int inputSubmoduleDataLength, short inputLengthIoCs, short inputLengthIoPs, int outputSubmoduleDataLength, short outputLengthIoCs, short outputLengthIoPs) {
            this.inputSubmoduleDataLength = inputSubmoduleDataLength;
            this.inputLengthIoCs = inputLengthIoCs;
            this.inputLengthIoPs = inputLengthIoPs;
            this.outputSubmoduleDataLength = outputSubmoduleDataLength;
            this.outputLengthIoCs = outputLengthIoCs;
            this.outputLengthIoPs = outputLengthIoPs;
        }

        public PnIoCm_Submodule_InputAndOutputData build(int slotNumber, long submoduleIdentNumber, boolean discardIoxs, boolean reduceOutputModuleDataLength, boolean reduceInputModuleDataLength, boolean sharedInput) {
            return new PnIoCm_Submodule_InputAndOutputData(slotNumber, submoduleIdentNumber, discardIoxs, reduceOutputModuleDataLength, reduceInputModuleDataLength, sharedInput, inputSubmoduleDataLength, inputLengthIoCs, inputLengthIoPs, outputSubmoduleDataLength, outputLengthIoCs, outputLengthIoPs);
        }
    }

}
