/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class Ethernet_FramePayload_IPv4 extends Ethernet_FramePayload implements Message {

    // Accessors for discriminator values.
    public Integer getPacketType() {
        return 0x0800;
    }

    // Constant values.
    public static final byte VERSION = 0x4;
    public static final byte HEADERLENGTH = 0x5;
    public static final short DIFFERENTIATEDSERVICESCODEPOINT = 0x00;
    public static final byte EXPLICITCONGESTIONNOTIFICATION = 0x0;
    public static final byte FLAGS = 0x00;
    public static final int FRAGMENTOFFSET = 0x00;
    public static final short TIMETOLIVE = 0x40;
    public static final short PROTOCOL = 0x11;

    // Properties.
    private final int identification;
    private final IpAddress sourceAddress;
    private final IpAddress destinationAddress;
    private final Udp_Packet packet;

    public Ethernet_FramePayload_IPv4(int identification, IpAddress sourceAddress, IpAddress destinationAddress, Udp_Packet packet) {
        this.identification = identification;
        this.sourceAddress = sourceAddress;
        this.destinationAddress = destinationAddress;
        this.packet = packet;
    }

    public int getIdentification() {
        return identification;
    }

    public IpAddress getSourceAddress() {
        return sourceAddress;
    }

    public IpAddress getDestinationAddress() {
        return destinationAddress;
    }

    public Udp_Packet getPacket() {
        return packet;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        Ethernet_FramePayload_IPv4 _value  = this;

        // Const Field (version)
        lengthInBits += 4;

        // Const Field (headerLength)
        lengthInBits += 4;

        // Const Field (differentiatedServicesCodepoint)
        lengthInBits += 6;

        // Const Field (explicitCongestionNotification)
        lengthInBits += 2;

        // Implicit Field (totalLength)
        lengthInBits += 16;
        //int totalLength = (int) ((20) + (_value.getPacket().getLengthInBytes()));

        // Simple field (identification)
        lengthInBits += 15;

        // Const Field (flags)
        lengthInBits += 3;

        // Const Field (fragmentOffset)
        lengthInBits += 13;

        // Const Field (timeToLive)
        lengthInBits += 8;

        // Const Field (protocol)
        lengthInBits += 8;

        // Simple field (sourceAddress)
        lengthInBits += sourceAddress.getLengthInBits();

        // Simple field (destinationAddress)
        lengthInBits += destinationAddress.getLengthInBits();

        // Simple field (packet)
        lengthInBits += packet.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<Ethernet_FramePayload, Ethernet_FramePayload> getMessageIO() {
        return new Ethernet_FramePayloadIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Ethernet_FramePayload_IPv4)) {
            return false;
        }
        Ethernet_FramePayload_IPv4 that = (Ethernet_FramePayload_IPv4) o;
        return
            (getIdentification() == that.getIdentification()) &&
            (getSourceAddress() == that.getSourceAddress()) &&
            (getDestinationAddress() == that.getDestinationAddress()) &&
            (getPacket() == that.getPacket()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getIdentification(),
            getSourceAddress(),
            getDestinationAddress(),
            getPacket()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("identification", getIdentification())
            .append("sourceAddress", getSourceAddress())
            .append("destinationAddress", getDestinationAddress())
            .append("packet", getPacket())
            .toString();
    }

}
