/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_ModuleDiffBlockApi_ModuleIO implements MessageIO<PnIoCm_ModuleDiffBlockApi_Module, PnIoCm_ModuleDiffBlockApi_Module> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_ModuleDiffBlockApi_ModuleIO.class);

    @Override
    public PnIoCm_ModuleDiffBlockApi_Module parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnIoCm_ModuleDiffBlockApi_ModuleIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_ModuleDiffBlockApi_Module value, Object... args) throws ParseException {
        PnIoCm_ModuleDiffBlockApi_ModuleIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_ModuleDiffBlockApi_Module staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_ModuleDiffBlockApi_Module");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (slotNumber)
int slotNumber = readBuffer.readUnsignedInt("slotNumber", 16) ;

        // Simple Field (moduleIdentNumber)
long moduleIdentNumber = readBuffer.readUnsignedLong("moduleIdentNumber", 32) ;
        readBuffer.pullContext("moduleState");

        // Simple Field (moduleState)
        // enum based simple field with type PnIoCm_ModuleState
        PnIoCm_ModuleState moduleState = PnIoCm_ModuleState.enumForValue(readBuffer.readUnsignedInt("PnIoCm_ModuleState", 16));
        readBuffer.closeContext("moduleState");

        // Implicit Field (numSubmodules) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numSubmodules = readBuffer.readUnsignedInt("numSubmodules", 16);
        // Array field (submodules)
        readBuffer.pullContext("submodules", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numSubmodules > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numSubmodules) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PnIoCm_ModuleDiffBlockApi_Submodule[] submodules;
        {
            int itemCount = Math.max(0, (int) numSubmodules);
            submodules = new PnIoCm_ModuleDiffBlockApi_Submodule[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
submodules[curItem] = PnIoCm_ModuleDiffBlockApi_SubmoduleIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("submodules", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnIoCm_ModuleDiffBlockApi_Module");
        // Create the instance
        return new PnIoCm_ModuleDiffBlockApi_Module(slotNumber, moduleIdentNumber, moduleState, submodules);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_ModuleDiffBlockApi_Module _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_ModuleDiffBlockApi_Module");

        // Simple Field (slotNumber)
        int slotNumber = (int) _value.getSlotNumber();
        writeBuffer.writeUnsignedInt("slotNumber", 16, ((Number) (slotNumber)).intValue());

        // Simple Field (moduleIdentNumber)
        long moduleIdentNumber = (long) _value.getModuleIdentNumber();
        writeBuffer.writeUnsignedLong("moduleIdentNumber", 32, ((Number) (moduleIdentNumber)).longValue());

        // Simple Field (moduleState)
        PnIoCm_ModuleState moduleState = (PnIoCm_ModuleState) _value.getModuleState();
        writeBuffer.pushContext("moduleState");
        // enum field with type PnIoCm_ModuleState
        writeBuffer.writeUnsignedInt("PnIoCm_ModuleState", 16, ((Number) (moduleState.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(moduleState.name()));
        writeBuffer.popContext("moduleState");

        // Implicit Field (numSubmodules) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numSubmodules = (int) (COUNT(_value.getSubmodules()));
        writeBuffer.writeUnsignedInt("numSubmodules", 16, ((Number) (numSubmodules)).intValue());

        // Array Field (submodules)
        if(_value.getSubmodules() != null) {
            writeBuffer.pushContext("submodules", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getSubmodules().length;
            int curItem = 0;
            for(PnIoCm_ModuleDiffBlockApi_Submodule element : _value.getSubmodules()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnIoCm_ModuleDiffBlockApi_SubmoduleIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("submodules", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnIoCm_ModuleDiffBlockApi_Module");
    }

}
