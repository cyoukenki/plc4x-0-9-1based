/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class Ethernet_FramePayload_VirtualLanIO implements MessageIO<Ethernet_FramePayload_VirtualLan, Ethernet_FramePayload_VirtualLan> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ethernet_FramePayload_VirtualLanIO.class);

    @Override
    public Ethernet_FramePayload_VirtualLan parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Ethernet_FramePayload_VirtualLan) new Ethernet_FramePayloadIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Ethernet_FramePayload_VirtualLan value, Object... args) throws ParseException {
        new Ethernet_FramePayloadIO().serialize(writeBuffer, value, args);
    }

    public static Ethernet_FramePayload_VirtualLanBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Ethernet_FramePayload_VirtualLan");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("priority");

        // Simple Field (priority)
        // enum based simple field with type VirtualLanPriority
        VirtualLanPriority priority = VirtualLanPriority.enumForValue(readBuffer.readUnsignedByte("VirtualLanPriority", 3));
        readBuffer.closeContext("priority");


        // Simple Field (ineligible)
boolean ineligible = readBuffer.readBit("ineligible") ;

        // Simple Field (id)
int id = readBuffer.readUnsignedInt("id", 12) ;
        readBuffer.pullContext("payload");

        // Simple Field (payload)
Ethernet_FramePayload payload = Ethernet_FramePayloadIO.staticParse(readBuffer ) ;        readBuffer.closeContext("payload");

        readBuffer.closeContext("Ethernet_FramePayload_VirtualLan");
        // Create the instance
        return new Ethernet_FramePayload_VirtualLanBuilder(priority, ineligible, id, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Ethernet_FramePayload_VirtualLan _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Ethernet_FramePayload_VirtualLan");

        // Simple Field (priority)
        VirtualLanPriority priority = (VirtualLanPriority) _value.getPriority();
        writeBuffer.pushContext("priority");
        // enum field with type VirtualLanPriority
        writeBuffer.writeUnsignedByte("VirtualLanPriority", 3, ((Number) (priority.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(priority.name()));
        writeBuffer.popContext("priority");

        // Simple Field (ineligible)
        boolean ineligible = (boolean) _value.getIneligible();
        writeBuffer.writeBit("ineligible", (boolean) (ineligible));

        // Simple Field (id)
        int id = (int) _value.getId();
        writeBuffer.writeUnsignedInt("id", 12, ((Number) (id)).intValue());

        // Simple Field (payload)
        Ethernet_FramePayload payload = (Ethernet_FramePayload) _value.getPayload();
        writeBuffer.pushContext("payload");
        Ethernet_FramePayloadIO.staticSerialize(writeBuffer, payload);
        writeBuffer.popContext("payload");
        writeBuffer.popContext("Ethernet_FramePayload_VirtualLan");
    }

    public static class Ethernet_FramePayload_VirtualLanBuilder implements Ethernet_FramePayloadIO.Ethernet_FramePayloadBuilder {
        private final VirtualLanPriority priority;
        private final boolean ineligible;
        private final int id;
        private final Ethernet_FramePayload payload;

        public Ethernet_FramePayload_VirtualLanBuilder(VirtualLanPriority priority, boolean ineligible, int id, Ethernet_FramePayload payload) {
            this.priority = priority;
            this.ineligible = ineligible;
            this.id = id;
            this.payload = payload;
        }

        public Ethernet_FramePayload_VirtualLan build() {
            return new Ethernet_FramePayload_VirtualLan(priority, ineligible, id, payload);
        }
    }

}
