/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class Ethernet_FramePayloadIO implements MessageIO<Ethernet_FramePayload, Ethernet_FramePayload> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ethernet_FramePayloadIO.class);

    @Override
    public Ethernet_FramePayload parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return Ethernet_FramePayloadIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Ethernet_FramePayload value, Object... args) throws ParseException {
        Ethernet_FramePayloadIO.staticSerialize(writeBuffer, value);
    }

    public static Ethernet_FramePayload staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Ethernet_FramePayload");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (packetType) (Used as input to a switch field)
        int packetType = readBuffer.readUnsignedInt("packetType", 16);


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        Ethernet_FramePayloadBuilder builder = null;
                if(EvaluationHelper.equals(packetType, 0x0800)) {
            builder = Ethernet_FramePayload_IPv4IO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(packetType, 0x8100)) {
            builder = Ethernet_FramePayload_VirtualLanIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(packetType, 0x8892)) {
            builder = Ethernet_FramePayload_PnDcpIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("Ethernet_FramePayload");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Ethernet_FramePayload _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Ethernet_FramePayload");

        // Discriminator Field (packetType) (Used as input to a switch field)
        int packetType = (int) _value.getPacketType();
            writeBuffer.writeUnsignedInt("packetType", 16, ((Number) (packetType)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof Ethernet_FramePayload_IPv4) {
            Ethernet_FramePayload_IPv4IO.staticSerialize(writeBuffer, (Ethernet_FramePayload_IPv4) _value);
        } else 
        if(_value instanceof Ethernet_FramePayload_VirtualLan) {
            Ethernet_FramePayload_VirtualLanIO.staticSerialize(writeBuffer, (Ethernet_FramePayload_VirtualLan) _value);
        } else 
        if(_value instanceof Ethernet_FramePayload_PnDcp) {
            Ethernet_FramePayload_PnDcpIO.staticSerialize(writeBuffer, (Ethernet_FramePayload_PnDcp) _value);
        }
        writeBuffer.popContext("Ethernet_FramePayload");
    }

    public static interface Ethernet_FramePayloadBuilder {
        Ethernet_FramePayload build();
    }

}
