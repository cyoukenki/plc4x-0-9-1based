/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_BlockIO implements MessageIO<PnDcp_Block, PnDcp_Block> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_BlockIO.class);

    @Override
    public PnDcp_Block parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnDcp_BlockIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block value, Object... args) throws ParseException {
        PnDcp_BlockIO.staticSerialize(writeBuffer, value);
    }

    public static PnDcp_Block staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_Block");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (option) (Used as input to a switch field)
        PnDcp_BlockOptions option = PnDcp_BlockOptions.enumForValue(readBuffer.readUnsignedShort("option", 8));


        // Discriminator Field (suboption) (Used as input to a switch field)
        short suboption = readBuffer.readUnsignedShort("suboption", 8);


        // Implicit Field (blockLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int blockLength = readBuffer.readUnsignedInt("blockLength", 16);

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        PnDcp_BlockBuilder builder = null;
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.IP_OPTION) && EvaluationHelper.equals(suboption, 1)) {
            builder = PnDcp_Block_IpMacAddressIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.IP_OPTION) && EvaluationHelper.equals(suboption, 2)) {
            builder = PnDcp_Block_IpParameterIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.IP_OPTION) && EvaluationHelper.equals(suboption, 3)) {
            builder = PnDcp_Block_FullIpSuiteIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 1)) {
            builder = PnDcp_Block_DevicePropertiesDeviceVendorIO.staticParse(readBuffer, blockLength);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 2)) {
            builder = PnDcp_Block_DevicePropertiesNameOfStationIO.staticParse(readBuffer, blockLength);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 3)) {
            builder = PnDcp_Block_DevicePropertiesDeviceIdIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 4)) {
            builder = PnDcp_Block_DevicePropertiesDeviceRoleIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 5)) {
            builder = PnDcp_Block_DevicePropertiesDeviceOptionsIO.staticParse(readBuffer, blockLength);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 6)) {
            builder = PnDcp_Block_DevicePropertiesAliasNameIO.staticParse(readBuffer, blockLength);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 7)) {
            builder = PnDcp_Block_DevicePropertiesDeviceInstanceIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 8)) {
            builder = PnDcp_Block_DevicePropertiesOemDeviceIdIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_PROPERTIES_OPTION) && EvaluationHelper.equals(suboption, 9)) {
            builder = PnDcp_Block_DevicePropertiesStandardGatewayIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 12)) {
            builder = PnDcp_Block_DhcpOptionHostNameIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 43)) {
            builder = PnDcp_Block_DhcpOptionVendorSpecificInformationIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 54)) {
            builder = PnDcp_Block_DhcpOptionServerIdentifierIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 55)) {
            builder = PnDcp_Block_DhcpOptionParameterRequestListIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 60)) {
            builder = PnDcp_Block_DhcpOptionClassIdentifierIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 61)) {
            builder = PnDcp_Block_DhcpOptionDhcpClientIdentifierIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 81)) {
            builder = PnDcp_Block_DhcpOptionFullyQualifiedDomainNameIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DCP_OPTION) && EvaluationHelper.equals(suboption, 97)) {
            builder = PnDcp_Block_DhcpOptionUuidBasedClientIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 1)) {
            builder = PnDcp_Block_ControlOptionStartIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 2)) {
            builder = PnDcp_Block_ControlOptionStopIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 3)) {
            builder = PnDcp_Block_ControlOptionSignalIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 4)) {
            builder = PnDcp_Block_ControlOptionResponseIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 5)) {
            builder = PnDcp_Block_ControlOptionFactoryResetIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.CONTROL_OPTION) && EvaluationHelper.equals(suboption, 6)) {
            builder = PnDcp_Block_ControlOptionResetToFactoryIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.DEVICE_INITIATIVE_OPTION) && EvaluationHelper.equals(suboption, 1)) {
            builder = PnDcp_Block_DeviceInitiativeOptionIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(option, PnDcp_BlockOptions.ALL_SELECTOR_OPTION) && EvaluationHelper.equals(suboption, 0xFF)) {
            builder = PnDcp_Block_ALLSelectorIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("PnDcp_Block");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block");

        // Discriminator Field (option) (Used as input to a switch field)
        PnDcp_BlockOptions option = (PnDcp_BlockOptions) _value.getOption();
                writeBuffer.writeUnsignedShort("option", 8, ((Number) (option.getValue())).shortValue());

        // Discriminator Field (suboption) (Used as input to a switch field)
        short suboption = (short) _value.getSuboption();
            writeBuffer.writeUnsignedShort("suboption", 8, ((Number) (suboption)).shortValue());

        // Implicit Field (blockLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int blockLength = (int) ((_value.getLengthInBytes()) - (4));
        writeBuffer.writeUnsignedInt("blockLength", 16, ((Number) (blockLength)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof PnDcp_Block_IpMacAddress) {
            PnDcp_Block_IpMacAddressIO.staticSerialize(writeBuffer, (PnDcp_Block_IpMacAddress) _value);
        } else 
        if(_value instanceof PnDcp_Block_IpParameter) {
            PnDcp_Block_IpParameterIO.staticSerialize(writeBuffer, (PnDcp_Block_IpParameter) _value);
        } else 
        if(_value instanceof PnDcp_Block_FullIpSuite) {
            PnDcp_Block_FullIpSuiteIO.staticSerialize(writeBuffer, (PnDcp_Block_FullIpSuite) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesDeviceVendor) {
            PnDcp_Block_DevicePropertiesDeviceVendorIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesDeviceVendor) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesNameOfStation) {
            PnDcp_Block_DevicePropertiesNameOfStationIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesNameOfStation) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesDeviceId) {
            PnDcp_Block_DevicePropertiesDeviceIdIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesDeviceId) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesDeviceRole) {
            PnDcp_Block_DevicePropertiesDeviceRoleIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesDeviceRole) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesDeviceOptions) {
            PnDcp_Block_DevicePropertiesDeviceOptionsIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesDeviceOptions) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesAliasName) {
            PnDcp_Block_DevicePropertiesAliasNameIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesAliasName) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesDeviceInstance) {
            PnDcp_Block_DevicePropertiesDeviceInstanceIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesDeviceInstance) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesOemDeviceId) {
            PnDcp_Block_DevicePropertiesOemDeviceIdIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesOemDeviceId) _value);
        } else 
        if(_value instanceof PnDcp_Block_DevicePropertiesStandardGateway) {
            PnDcp_Block_DevicePropertiesStandardGatewayIO.staticSerialize(writeBuffer, (PnDcp_Block_DevicePropertiesStandardGateway) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionHostName) {
            PnDcp_Block_DhcpOptionHostNameIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionHostName) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionVendorSpecificInformation) {
            PnDcp_Block_DhcpOptionVendorSpecificInformationIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionVendorSpecificInformation) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionServerIdentifier) {
            PnDcp_Block_DhcpOptionServerIdentifierIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionServerIdentifier) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionParameterRequestList) {
            PnDcp_Block_DhcpOptionParameterRequestListIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionParameterRequestList) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionClassIdentifier) {
            PnDcp_Block_DhcpOptionClassIdentifierIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionClassIdentifier) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionDhcpClientIdentifier) {
            PnDcp_Block_DhcpOptionDhcpClientIdentifierIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionDhcpClientIdentifier) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionFullyQualifiedDomainName) {
            PnDcp_Block_DhcpOptionFullyQualifiedDomainNameIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionFullyQualifiedDomainName) _value);
        } else 
        if(_value instanceof PnDcp_Block_DhcpOptionUuidBasedClient) {
            PnDcp_Block_DhcpOptionUuidBasedClientIO.staticSerialize(writeBuffer, (PnDcp_Block_DhcpOptionUuidBasedClient) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionStart) {
            PnDcp_Block_ControlOptionStartIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionStart) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionStop) {
            PnDcp_Block_ControlOptionStopIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionStop) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionSignal) {
            PnDcp_Block_ControlOptionSignalIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionSignal) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionResponse) {
            PnDcp_Block_ControlOptionResponseIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionResponse) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionFactoryReset) {
            PnDcp_Block_ControlOptionFactoryResetIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionFactoryReset) _value);
        } else 
        if(_value instanceof PnDcp_Block_ControlOptionResetToFactory) {
            PnDcp_Block_ControlOptionResetToFactoryIO.staticSerialize(writeBuffer, (PnDcp_Block_ControlOptionResetToFactory) _value);
        } else 
        if(_value instanceof PnDcp_Block_DeviceInitiativeOption) {
            PnDcp_Block_DeviceInitiativeOptionIO.staticSerialize(writeBuffer, (PnDcp_Block_DeviceInitiativeOption) _value);
        } else 
        if(_value instanceof PnDcp_Block_ALLSelector) {
            PnDcp_Block_ALLSelectorIO.staticSerialize(writeBuffer, (PnDcp_Block_ALLSelector) _value);
        }
        writeBuffer.popContext("PnDcp_Block");
    }

    public static interface PnDcp_BlockBuilder {
        PnDcp_Block build();
    }

}
