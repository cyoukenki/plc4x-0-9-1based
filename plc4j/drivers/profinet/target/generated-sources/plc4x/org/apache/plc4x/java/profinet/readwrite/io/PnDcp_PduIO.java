/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_PduIO implements MessageIO<PnDcp_Pdu, PnDcp_Pdu> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_PduIO.class);

    @Override
    public PnDcp_Pdu parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnDcp_PduIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Pdu value, Object... args) throws ParseException {
        PnDcp_PduIO.staticSerialize(writeBuffer, value);
    }

    public static PnDcp_Pdu staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_Pdu");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (frameId) (Used as input to a switch field)
        PnDcp_FrameId frameId = PnDcp_FrameId.enumForValue(readBuffer.readUnsignedInt("frameId", 16));


        // Discriminator Field (serviceId) (Used as input to a switch field)
        PnDcp_ServiceId serviceId = PnDcp_ServiceId.enumForValue(readBuffer.readUnsignedShort("serviceId", 8));


        readBuffer.pullContext("serviceType");

        // Simple Field (serviceType)
PnDcp_ServiceType serviceType = PnDcp_ServiceTypeIO.staticParse(readBuffer ) ;        readBuffer.closeContext("serviceType");


        // Simple Field (xid)
long xid = readBuffer.readUnsignedLong("xid", 32) ;

        // Simple Field (responseDelayFactorOrPadding)
int responseDelayFactorOrPadding = readBuffer.readUnsignedInt("responseDelayFactorOrPadding", 16) ;
        // Implicit Field (dcpDataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dcpDataLength = readBuffer.readUnsignedInt("dcpDataLength", 16);

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        PnDcp_PduBuilder builder = null;
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_Identify_ReqPDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.IDENTIFY) && EvaluationHelper.equals(serviceType.getResponse(), false)) {
            builder = PnDcp_Pdu_IdentifyReqIO.staticParse(readBuffer, dcpDataLength);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_Identify_ResPDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.IDENTIFY) && EvaluationHelper.equals(serviceType.getResponse(), true)) {
            builder = PnDcp_Pdu_IdentifyResIO.staticParse(readBuffer, dcpDataLength);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_Hello_ReqPDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.HELLO) && EvaluationHelper.equals(serviceType.getResponse(), false)) {
            builder = PnDcp_Pdu_HelloReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_GetSet_PDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.GET) && EvaluationHelper.equals(serviceType.getResponse(), false)) {
            builder = PnDcp_Pdu_GetReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_GetSet_PDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.GET) && EvaluationHelper.equals(serviceType.getResponse(), true)) {
            builder = PnDcp_Pdu_GetResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_GetSet_PDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.SET) && EvaluationHelper.equals(serviceType.getResponse(), false)) {
            builder = PnDcp_Pdu_SetReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(frameId, PnDcp_FrameId.DCP_GetSet_PDU) && EvaluationHelper.equals(serviceId, PnDcp_ServiceId.SET) && EvaluationHelper.equals(serviceType.getResponse(), true)) {
            builder = PnDcp_Pdu_SetResIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("PnDcp_Pdu");
        // Create the instance
        return builder.build(serviceType, xid, responseDelayFactorOrPadding);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Pdu _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Pdu");

        // Discriminator Field (frameId) (Used as input to a switch field)
        PnDcp_FrameId frameId = (PnDcp_FrameId) _value.getFrameId();
                writeBuffer.writeUnsignedInt("frameId", 16, ((Number) (frameId.getValue())).intValue());

        // Discriminator Field (serviceId) (Used as input to a switch field)
        PnDcp_ServiceId serviceId = (PnDcp_ServiceId) _value.getServiceId();
                writeBuffer.writeUnsignedShort("serviceId", 8, ((Number) (serviceId.getValue())).shortValue());

        // Simple Field (serviceType)
        PnDcp_ServiceType serviceType = (PnDcp_ServiceType) _value.getServiceType();
        writeBuffer.pushContext("serviceType");
        PnDcp_ServiceTypeIO.staticSerialize(writeBuffer, serviceType);
        writeBuffer.popContext("serviceType");

        // Simple Field (xid)
        long xid = (long) _value.getXid();
        writeBuffer.writeUnsignedLong("xid", 32, ((Number) (xid)).longValue());

        // Simple Field (responseDelayFactorOrPadding)
        int responseDelayFactorOrPadding = (int) _value.getResponseDelayFactorOrPadding();
        writeBuffer.writeUnsignedInt("responseDelayFactorOrPadding", 16, ((Number) (responseDelayFactorOrPadding)).intValue());

        // Implicit Field (dcpDataLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int dcpDataLength = (int) ((_value.getLengthInBytes()) - (12));
        writeBuffer.writeUnsignedInt("dcpDataLength", 16, ((Number) (dcpDataLength)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof PnDcp_Pdu_IdentifyReq) {
            PnDcp_Pdu_IdentifyReqIO.staticSerialize(writeBuffer, (PnDcp_Pdu_IdentifyReq) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_IdentifyRes) {
            PnDcp_Pdu_IdentifyResIO.staticSerialize(writeBuffer, (PnDcp_Pdu_IdentifyRes) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_HelloReq) {
            PnDcp_Pdu_HelloReqIO.staticSerialize(writeBuffer, (PnDcp_Pdu_HelloReq) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_GetReq) {
            PnDcp_Pdu_GetReqIO.staticSerialize(writeBuffer, (PnDcp_Pdu_GetReq) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_GetRes) {
            PnDcp_Pdu_GetResIO.staticSerialize(writeBuffer, (PnDcp_Pdu_GetRes) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_SetReq) {
            PnDcp_Pdu_SetReqIO.staticSerialize(writeBuffer, (PnDcp_Pdu_SetReq) _value);
        } else 
        if(_value instanceof PnDcp_Pdu_SetRes) {
            PnDcp_Pdu_SetResIO.staticSerialize(writeBuffer, (PnDcp_Pdu_SetRes) _value);
        }
        writeBuffer.popContext("PnDcp_Pdu");
    }

    public static interface PnDcp_PduBuilder {
        PnDcp_Pdu build(PnDcp_ServiceType serviceType, long xid, int responseDelayFactorOrPadding);
    }

}
