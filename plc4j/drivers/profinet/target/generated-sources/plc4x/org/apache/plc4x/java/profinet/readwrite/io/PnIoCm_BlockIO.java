/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_BlockIO implements MessageIO<PnIoCm_Block, PnIoCm_Block> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_BlockIO.class);

    @Override
    public PnIoCm_Block parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnIoCm_BlockIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block value, Object... args) throws ParseException {
        PnIoCm_BlockIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_Block staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (blockType) (Used as input to a switch field)
        PnIoCm_BlockType blockType = PnIoCm_BlockType.enumForValue(readBuffer.readUnsignedInt("blockType", 16));


        // Implicit Field (blockLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int blockLength = readBuffer.readUnsignedInt("blockLength", 16);


        // Simple Field (blockVersionHigh)
short blockVersionHigh = readBuffer.readUnsignedShort("blockVersionHigh", 8) ;

        // Simple Field (blockVersionLow)
short blockVersionLow = readBuffer.readUnsignedShort("blockVersionLow", 8) ;
        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        PnIoCm_BlockBuilder builder = null;
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.AR_BLOCK_REQ)) {
            builder = PnIoCm_Block_ArReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.AR_BLOCK_RES)) {
            builder = PnIoCm_Block_ArResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.IO_CR_BLOCK_REQ)) {
            builder = PnIoCm_Block_IoCrReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.IO_CR_BLOCK_RES)) {
            builder = PnIoCm_Block_IoCrResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.ALARM_CR_BLOCK_REQ)) {
            builder = PnIoCm_Block_AlarmCrReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.ALARM_CR_BLOCK_RES)) {
            builder = PnIoCm_Block_AlarmCrResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.EXPECTED_SUBMODULE_BLOCK_REQ)) {
            builder = PnIoCm_Block_ExpectedSubmoduleReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.MODULE_DIFF_BLOCK)) {
            builder = PnIoCm_Block_ModuleDiffIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(blockType, PnIoCm_BlockType.AR_SERVER_BLOCK)) {
            builder = PnIoCm_Block_ArServerIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("PnIoCm_Block");
        // Create the instance
        return builder.build(blockVersionHigh, blockVersionLow);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block");

        // Discriminator Field (blockType) (Used as input to a switch field)
        PnIoCm_BlockType blockType = (PnIoCm_BlockType) _value.getBlockType();
                writeBuffer.writeUnsignedInt("blockType", 16, ((Number) (blockType.getValue())).intValue());

        // Implicit Field (blockLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int blockLength = (int) ((_value.getLengthInBytes()) - (4));
        writeBuffer.writeUnsignedInt("blockLength", 16, ((Number) (blockLength)).intValue());

        // Simple Field (blockVersionHigh)
        short blockVersionHigh = (short) _value.getBlockVersionHigh();
        writeBuffer.writeUnsignedShort("blockVersionHigh", 8, ((Number) (blockVersionHigh)).shortValue());

        // Simple Field (blockVersionLow)
        short blockVersionLow = (short) _value.getBlockVersionLow();
        writeBuffer.writeUnsignedShort("blockVersionLow", 8, ((Number) (blockVersionLow)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof PnIoCm_Block_ArReq) {
            PnIoCm_Block_ArReqIO.staticSerialize(writeBuffer, (PnIoCm_Block_ArReq) _value);
        } else 
        if(_value instanceof PnIoCm_Block_ArRes) {
            PnIoCm_Block_ArResIO.staticSerialize(writeBuffer, (PnIoCm_Block_ArRes) _value);
        } else 
        if(_value instanceof PnIoCm_Block_IoCrReq) {
            PnIoCm_Block_IoCrReqIO.staticSerialize(writeBuffer, (PnIoCm_Block_IoCrReq) _value);
        } else 
        if(_value instanceof PnIoCm_Block_IoCrRes) {
            PnIoCm_Block_IoCrResIO.staticSerialize(writeBuffer, (PnIoCm_Block_IoCrRes) _value);
        } else 
        if(_value instanceof PnIoCm_Block_AlarmCrReq) {
            PnIoCm_Block_AlarmCrReqIO.staticSerialize(writeBuffer, (PnIoCm_Block_AlarmCrReq) _value);
        } else 
        if(_value instanceof PnIoCm_Block_AlarmCrRes) {
            PnIoCm_Block_AlarmCrResIO.staticSerialize(writeBuffer, (PnIoCm_Block_AlarmCrRes) _value);
        } else 
        if(_value instanceof PnIoCm_Block_ExpectedSubmoduleReq) {
            PnIoCm_Block_ExpectedSubmoduleReqIO.staticSerialize(writeBuffer, (PnIoCm_Block_ExpectedSubmoduleReq) _value);
        } else 
        if(_value instanceof PnIoCm_Block_ModuleDiff) {
            PnIoCm_Block_ModuleDiffIO.staticSerialize(writeBuffer, (PnIoCm_Block_ModuleDiff) _value);
        } else 
        if(_value instanceof PnIoCm_Block_ArServer) {
            PnIoCm_Block_ArServerIO.staticSerialize(writeBuffer, (PnIoCm_Block_ArServer) _value);
        }
        writeBuffer.popContext("PnIoCm_Block");
    }

    public static interface PnIoCm_BlockBuilder {
        PnIoCm_Block build(short blockVersionHigh, short blockVersionLow);
    }

}
