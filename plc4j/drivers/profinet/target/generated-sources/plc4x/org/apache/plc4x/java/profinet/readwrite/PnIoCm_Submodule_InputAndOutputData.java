/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Submodule_InputAndOutputData extends PnIoCm_Submodule implements Message {

    // Accessors for discriminator values.
    public PnIoCm_SubmoduleType getSubmoduleType() {
        return PnIoCm_SubmoduleType.INPUT_AND_OUTPUT_DATA;
    }

    // Constant values.
    public static final int INPUTDATADESCRIPTION = 0x0001;
    public static final int OUTPUTDATADESCRIPTION = 0x0002;

    // Properties.
    private final int inputSubmoduleDataLength;
    private final short inputLengthIoCs;
    private final short inputLengthIoPs;
    private final int outputSubmoduleDataLength;
    private final short outputLengthIoCs;
    private final short outputLengthIoPs;

    public PnIoCm_Submodule_InputAndOutputData(int slotNumber, long submoduleIdentNumber, boolean discardIoxs, boolean reduceOutputModuleDataLength, boolean reduceInputModuleDataLength, boolean sharedInput, int inputSubmoduleDataLength, short inputLengthIoCs, short inputLengthIoPs, int outputSubmoduleDataLength, short outputLengthIoCs, short outputLengthIoPs) {
        super(slotNumber, submoduleIdentNumber, discardIoxs, reduceOutputModuleDataLength, reduceInputModuleDataLength, sharedInput);
        this.inputSubmoduleDataLength = inputSubmoduleDataLength;
        this.inputLengthIoCs = inputLengthIoCs;
        this.inputLengthIoPs = inputLengthIoPs;
        this.outputSubmoduleDataLength = outputSubmoduleDataLength;
        this.outputLengthIoCs = outputLengthIoCs;
        this.outputLengthIoPs = outputLengthIoPs;
    }

    public int getInputSubmoduleDataLength() {
        return inputSubmoduleDataLength;
    }

    public short getInputLengthIoCs() {
        return inputLengthIoCs;
    }

    public short getInputLengthIoPs() {
        return inputLengthIoPs;
    }

    public int getOutputSubmoduleDataLength() {
        return outputSubmoduleDataLength;
    }

    public short getOutputLengthIoCs() {
        return outputLengthIoCs;
    }

    public short getOutputLengthIoPs() {
        return outputLengthIoPs;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PnIoCm_Submodule_InputAndOutputData _value  = this;

        // Const Field (inputDataDescription)
        lengthInBits += 16;

        // Simple field (inputSubmoduleDataLength)
        lengthInBits += 16;

        // Simple field (inputLengthIoCs)
        lengthInBits += 8;

        // Simple field (inputLengthIoPs)
        lengthInBits += 8;

        // Const Field (outputDataDescription)
        lengthInBits += 16;

        // Simple field (outputSubmoduleDataLength)
        lengthInBits += 16;

        // Simple field (outputLengthIoCs)
        lengthInBits += 8;

        // Simple field (outputLengthIoPs)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<PnIoCm_Submodule, PnIoCm_Submodule> getMessageIO() {
        return new PnIoCm_SubmoduleIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PnIoCm_Submodule_InputAndOutputData)) {
            return false;
        }
        PnIoCm_Submodule_InputAndOutputData that = (PnIoCm_Submodule_InputAndOutputData) o;
        return
            (getInputSubmoduleDataLength() == that.getInputSubmoduleDataLength()) &&
            (getInputLengthIoCs() == that.getInputLengthIoCs()) &&
            (getInputLengthIoPs() == that.getInputLengthIoPs()) &&
            (getOutputSubmoduleDataLength() == that.getOutputSubmoduleDataLength()) &&
            (getOutputLengthIoCs() == that.getOutputLengthIoCs()) &&
            (getOutputLengthIoPs() == that.getOutputLengthIoPs()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getInputSubmoduleDataLength(),
            getInputLengthIoCs(),
            getInputLengthIoPs(),
            getOutputSubmoduleDataLength(),
            getOutputLengthIoCs(),
            getOutputLengthIoPs()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("inputSubmoduleDataLength", getInputSubmoduleDataLength())
            .append("inputLengthIoCs", getInputLengthIoCs())
            .append("inputLengthIoPs", getInputLengthIoPs())
            .append("outputSubmoduleDataLength", getOutputSubmoduleDataLength())
            .append("outputLengthIoCs", getOutputLengthIoCs())
            .append("outputLengthIoPs", getOutputLengthIoPs())
            .toString();
    }

}
