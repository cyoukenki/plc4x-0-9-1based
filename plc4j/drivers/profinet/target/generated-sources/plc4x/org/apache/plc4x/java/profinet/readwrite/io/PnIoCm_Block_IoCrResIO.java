/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_IoCrResIO implements MessageIO<PnIoCm_Block_IoCrRes, PnIoCm_Block_IoCrRes> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Block_IoCrResIO.class);

    @Override
    public PnIoCm_Block_IoCrRes parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Block_IoCrRes) new PnIoCm_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block_IoCrRes value, Object... args) throws ParseException {
        new PnIoCm_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Block_IoCrResBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block_IoCrRes");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("ioCrType");

        // Simple Field (ioCrType)
        // enum based simple field with type PnIoCm_IoCrType
        PnIoCm_IoCrType ioCrType = PnIoCm_IoCrType.enumForValue(readBuffer.readUnsignedInt("PnIoCm_IoCrType", 16));
        readBuffer.closeContext("ioCrType");


        // Simple Field (ioCrReference)
int ioCrReference = readBuffer.readUnsignedInt("ioCrReference", 16) ;

        // Simple Field (frameId)
int frameId = readBuffer.readUnsignedInt("frameId", 16) ;
        readBuffer.closeContext("PnIoCm_Block_IoCrRes");
        // Create the instance
        return new PnIoCm_Block_IoCrResBuilder(ioCrType, ioCrReference, frameId);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block_IoCrRes _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block_IoCrRes");

        // Simple Field (ioCrType)
        PnIoCm_IoCrType ioCrType = (PnIoCm_IoCrType) _value.getIoCrType();
        writeBuffer.pushContext("ioCrType");
        // enum field with type PnIoCm_IoCrType
        writeBuffer.writeUnsignedInt("PnIoCm_IoCrType", 16, ((Number) (ioCrType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(ioCrType.name()));
        writeBuffer.popContext("ioCrType");

        // Simple Field (ioCrReference)
        int ioCrReference = (int) _value.getIoCrReference();
        writeBuffer.writeUnsignedInt("ioCrReference", 16, ((Number) (ioCrReference)).intValue());

        // Simple Field (frameId)
        int frameId = (int) _value.getFrameId();
        writeBuffer.writeUnsignedInt("frameId", 16, ((Number) (frameId)).intValue());
        writeBuffer.popContext("PnIoCm_Block_IoCrRes");
    }

    public static class PnIoCm_Block_IoCrResBuilder implements PnIoCm_BlockIO.PnIoCm_BlockBuilder {
        private final PnIoCm_IoCrType ioCrType;
        private final int ioCrReference;
        private final int frameId;

        public PnIoCm_Block_IoCrResBuilder(PnIoCm_IoCrType ioCrType, int ioCrReference, int frameId) {
            this.ioCrType = ioCrType;
            this.ioCrReference = ioCrReference;
            this.frameId = frameId;
        }

        public PnIoCm_Block_IoCrRes build(short blockVersionHigh, short blockVersionLow) {
            return new PnIoCm_Block_IoCrRes(blockVersionHigh, blockVersionLow, ioCrType, ioCrReference, frameId);
        }
    }

}
