/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Pdu_IdentifyReqIO implements MessageIO<PnDcp_Pdu_IdentifyReq, PnDcp_Pdu_IdentifyReq> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Pdu_IdentifyReqIO.class);

    @Override
    public PnDcp_Pdu_IdentifyReq parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Pdu_IdentifyReq) new PnDcp_PduIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Pdu_IdentifyReq value, Object... args) throws ParseException {
        new PnDcp_PduIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Pdu_IdentifyReqBuilder staticParse(ReadBuffer readBuffer, Integer dcpDataLength) throws ParseException {
        readBuffer.pullContext("PnDcp_Pdu_IdentifyReq");
        int startPos = readBuffer.getPos();
        int curPos;
        // Array field (blocks)
        readBuffer.pullContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _blocksLength = dcpDataLength;
        List<PnDcp_Block> _blocksList = new LinkedList<>();
        long blocksEndPos = readBuffer.getPos() + _blocksLength;
        while(readBuffer.getPos() < blocksEndPos) {
            _blocksList.add(PnDcp_BlockIO.staticParse(readBuffer));
        }
        PnDcp_Block[] blocks = _blocksList.toArray(new PnDcp_Block[0]);
            readBuffer.closeContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnDcp_Pdu_IdentifyReq");
        // Create the instance
        return new PnDcp_Pdu_IdentifyReqBuilder(blocks);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Pdu_IdentifyReq _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Pdu_IdentifyReq");

        // Array Field (blocks)
        if(_value.getBlocks() != null) {
            writeBuffer.pushContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getBlocks().length;
            int curItem = 0;
            for(PnDcp_Block element : _value.getBlocks()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnDcp_BlockIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnDcp_Pdu_IdentifyReq");
    }

    public static class PnDcp_Pdu_IdentifyReqBuilder implements PnDcp_PduIO.PnDcp_PduBuilder {
        private final PnDcp_Block[] blocks;

        public PnDcp_Pdu_IdentifyReqBuilder(PnDcp_Block[] blocks) {
            this.blocks = blocks;
        }

        public PnDcp_Pdu_IdentifyReq build(PnDcp_ServiceType serviceType, long xid, int responseDelayFactorOrPadding) {
            return new PnDcp_Pdu_IdentifyReq(serviceType, xid, responseDelayFactorOrPadding, blocks);
        }
    }

}
