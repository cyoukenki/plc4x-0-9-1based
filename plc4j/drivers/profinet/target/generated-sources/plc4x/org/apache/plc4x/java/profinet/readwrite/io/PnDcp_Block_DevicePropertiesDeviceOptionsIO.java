/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_DevicePropertiesDeviceOptionsIO implements MessageIO<PnDcp_Block_DevicePropertiesDeviceOptions, PnDcp_Block_DevicePropertiesDeviceOptions> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Block_DevicePropertiesDeviceOptionsIO.class);

    @Override
    public PnDcp_Block_DevicePropertiesDeviceOptions parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Block_DevicePropertiesDeviceOptions) new PnDcp_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceOptions value, Object... args) throws ParseException {
        new PnDcp_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Block_DevicePropertiesDeviceOptionsBuilder staticParse(ReadBuffer readBuffer, Integer blockLength) throws ParseException {
        readBuffer.pullContext("PnDcp_Block_DevicePropertiesDeviceOptions");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }
        // Array field (supportedOptions)
        readBuffer.pullContext("supportedOptions", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _supportedOptionsLength = (blockLength) - (2);
        List<PnDcp_SupportedDeviceOption> _supportedOptionsList = new LinkedList<>();
        long supportedOptionsEndPos = readBuffer.getPos() + _supportedOptionsLength;
        while(readBuffer.getPos() < supportedOptionsEndPos) {
            _supportedOptionsList.add(PnDcp_SupportedDeviceOptionIO.staticParse(readBuffer));
        }
        PnDcp_SupportedDeviceOption[] supportedOptions = _supportedOptionsList.toArray(new PnDcp_SupportedDeviceOption[0]);
            readBuffer.closeContext("supportedOptions", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnDcp_Block_DevicePropertiesDeviceOptions");
        // Create the instance
        return new PnDcp_Block_DevicePropertiesDeviceOptionsBuilder(supportedOptions);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceOptions _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block_DevicePropertiesDeviceOptions");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Array Field (supportedOptions)
        if(_value.getSupportedOptions() != null) {
            writeBuffer.pushContext("supportedOptions", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getSupportedOptions().length;
            int curItem = 0;
            for(PnDcp_SupportedDeviceOption element : _value.getSupportedOptions()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnDcp_SupportedDeviceOptionIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("supportedOptions", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnDcp_Block_DevicePropertiesDeviceOptions");
    }

    public static class PnDcp_Block_DevicePropertiesDeviceOptionsBuilder implements PnDcp_BlockIO.PnDcp_BlockBuilder {
        private final PnDcp_SupportedDeviceOption[] supportedOptions;

        public PnDcp_Block_DevicePropertiesDeviceOptionsBuilder(PnDcp_SupportedDeviceOption[] supportedOptions) {
            this.supportedOptions = supportedOptions;
        }

        public PnDcp_Block_DevicePropertiesDeviceOptions build() {
            return new PnDcp_Block_DevicePropertiesDeviceOptions(supportedOptions);
        }
    }

}
