/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_ArReq extends PnIoCm_Block implements Message {

    // Accessors for discriminator values.
    public PnIoCm_BlockType getBlockType() {
        return PnIoCm_BlockType.AR_BLOCK_REQ;
    }

    // Properties.
    private final PnIoCm_ArType arType;
    private final Uuid arUuid;
    private final int sessionKey;
    private final MacAddress cmInitiatorMacAddr;
    private final Uuid cmInitiatorObjectUuid;
    private final boolean pullModuleAlarmAllowed;
    private final boolean nonLegacyStartupMode;
    private final boolean combinedObjectContainerUsed;
    private final boolean acknowledgeCompanionAr;
    private final PnIoCm_CompanionArType companionArType;
    private final boolean deviceAccess;
    private final boolean cmInitiator;
    private final boolean supervisorTakeoverAllowed;
    private final PnIoCm_State state;
    private final int cmInitiatorActivityTimeoutFactor;
    private final int cmInitiatorUdpRtPort;
    private final String cmInitiatorStationName;

    public PnIoCm_Block_ArReq(short blockVersionHigh, short blockVersionLow, PnIoCm_ArType arType, Uuid arUuid, int sessionKey, MacAddress cmInitiatorMacAddr, Uuid cmInitiatorObjectUuid, boolean pullModuleAlarmAllowed, boolean nonLegacyStartupMode, boolean combinedObjectContainerUsed, boolean acknowledgeCompanionAr, PnIoCm_CompanionArType companionArType, boolean deviceAccess, boolean cmInitiator, boolean supervisorTakeoverAllowed, PnIoCm_State state, int cmInitiatorActivityTimeoutFactor, int cmInitiatorUdpRtPort, String cmInitiatorStationName) {
        super(blockVersionHigh, blockVersionLow);
        this.arType = arType;
        this.arUuid = arUuid;
        this.sessionKey = sessionKey;
        this.cmInitiatorMacAddr = cmInitiatorMacAddr;
        this.cmInitiatorObjectUuid = cmInitiatorObjectUuid;
        this.pullModuleAlarmAllowed = pullModuleAlarmAllowed;
        this.nonLegacyStartupMode = nonLegacyStartupMode;
        this.combinedObjectContainerUsed = combinedObjectContainerUsed;
        this.acknowledgeCompanionAr = acknowledgeCompanionAr;
        this.companionArType = companionArType;
        this.deviceAccess = deviceAccess;
        this.cmInitiator = cmInitiator;
        this.supervisorTakeoverAllowed = supervisorTakeoverAllowed;
        this.state = state;
        this.cmInitiatorActivityTimeoutFactor = cmInitiatorActivityTimeoutFactor;
        this.cmInitiatorUdpRtPort = cmInitiatorUdpRtPort;
        this.cmInitiatorStationName = cmInitiatorStationName;
    }

    public PnIoCm_ArType getArType() {
        return arType;
    }

    public Uuid getArUuid() {
        return arUuid;
    }

    public int getSessionKey() {
        return sessionKey;
    }

    public MacAddress getCmInitiatorMacAddr() {
        return cmInitiatorMacAddr;
    }

    public Uuid getCmInitiatorObjectUuid() {
        return cmInitiatorObjectUuid;
    }

    public boolean getPullModuleAlarmAllowed() {
        return pullModuleAlarmAllowed;
    }

    public boolean getNonLegacyStartupMode() {
        return nonLegacyStartupMode;
    }

    public boolean getCombinedObjectContainerUsed() {
        return combinedObjectContainerUsed;
    }

    public boolean getAcknowledgeCompanionAr() {
        return acknowledgeCompanionAr;
    }

    public PnIoCm_CompanionArType getCompanionArType() {
        return companionArType;
    }

    public boolean getDeviceAccess() {
        return deviceAccess;
    }

    public boolean getCmInitiator() {
        return cmInitiator;
    }

    public boolean getSupervisorTakeoverAllowed() {
        return supervisorTakeoverAllowed;
    }

    public PnIoCm_State getState() {
        return state;
    }

    public int getCmInitiatorActivityTimeoutFactor() {
        return cmInitiatorActivityTimeoutFactor;
    }

    public int getCmInitiatorUdpRtPort() {
        return cmInitiatorUdpRtPort;
    }

    public String getCmInitiatorStationName() {
        return cmInitiatorStationName;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PnIoCm_Block_ArReq _value  = this;

        // Simple field (arType)
        lengthInBits += 16;

        // Simple field (arUuid)
        lengthInBits += arUuid.getLengthInBits();

        // Simple field (sessionKey)
        lengthInBits += 16;

        // Simple field (cmInitiatorMacAddr)
        lengthInBits += cmInitiatorMacAddr.getLengthInBits();

        // Simple field (cmInitiatorObjectUuid)
        lengthInBits += cmInitiatorObjectUuid.getLengthInBits();

        // Simple field (pullModuleAlarmAllowed)
        lengthInBits += 1;

        // Simple field (nonLegacyStartupMode)
        lengthInBits += 1;

        // Simple field (combinedObjectContainerUsed)
        lengthInBits += 1;

        // Reserved Field (reserved)
        lengthInBits += 17;

        // Simple field (acknowledgeCompanionAr)
        lengthInBits += 1;

        // Simple field (companionArType)
        lengthInBits += 2;

        // Simple field (deviceAccess)
        lengthInBits += 1;

        // Reserved Field (reserved)
        lengthInBits += 3;

        // Simple field (cmInitiator)
        lengthInBits += 1;

        // Simple field (supervisorTakeoverAllowed)
        lengthInBits += 1;

        // Simple field (state)
        lengthInBits += 3;

        // Simple field (cmInitiatorActivityTimeoutFactor)
        lengthInBits += 16;

        // Simple field (cmInitiatorUdpRtPort)
        lengthInBits += 16;

        // Implicit Field (stationNameLength)
        lengthInBits += 16;
        //int stationNameLength = (int) (STR_LEN(_value.getCmInitiatorStationName()));

        // Simple field (cmInitiatorStationName)
        lengthInBits += (STR_LEN(_value.getCmInitiatorStationName())) * (8);

        return lengthInBits;
    }

    @Override
    public MessageIO<PnIoCm_Block, PnIoCm_Block> getMessageIO() {
        return new PnIoCm_BlockIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PnIoCm_Block_ArReq)) {
            return false;
        }
        PnIoCm_Block_ArReq that = (PnIoCm_Block_ArReq) o;
        return
            (getArType() == that.getArType()) &&
            (getArUuid() == that.getArUuid()) &&
            (getSessionKey() == that.getSessionKey()) &&
            (getCmInitiatorMacAddr() == that.getCmInitiatorMacAddr()) &&
            (getCmInitiatorObjectUuid() == that.getCmInitiatorObjectUuid()) &&
            (getPullModuleAlarmAllowed() == that.getPullModuleAlarmAllowed()) &&
            (getNonLegacyStartupMode() == that.getNonLegacyStartupMode()) &&
            (getCombinedObjectContainerUsed() == that.getCombinedObjectContainerUsed()) &&
            (getAcknowledgeCompanionAr() == that.getAcknowledgeCompanionAr()) &&
            (getCompanionArType() == that.getCompanionArType()) &&
            (getDeviceAccess() == that.getDeviceAccess()) &&
            (getCmInitiator() == that.getCmInitiator()) &&
            (getSupervisorTakeoverAllowed() == that.getSupervisorTakeoverAllowed()) &&
            (getState() == that.getState()) &&
            (getCmInitiatorActivityTimeoutFactor() == that.getCmInitiatorActivityTimeoutFactor()) &&
            (getCmInitiatorUdpRtPort() == that.getCmInitiatorUdpRtPort()) &&
            (getCmInitiatorStationName() == that.getCmInitiatorStationName()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getArType(),
            getArUuid(),
            getSessionKey(),
            getCmInitiatorMacAddr(),
            getCmInitiatorObjectUuid(),
            getPullModuleAlarmAllowed(),
            getNonLegacyStartupMode(),
            getCombinedObjectContainerUsed(),
            getAcknowledgeCompanionAr(),
            getCompanionArType(),
            getDeviceAccess(),
            getCmInitiator(),
            getSupervisorTakeoverAllowed(),
            getState(),
            getCmInitiatorActivityTimeoutFactor(),
            getCmInitiatorUdpRtPort(),
            getCmInitiatorStationName()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("arType", getArType())
            .append("arUuid", getArUuid())
            .append("sessionKey", getSessionKey())
            .append("cmInitiatorMacAddr", getCmInitiatorMacAddr())
            .append("cmInitiatorObjectUuid", getCmInitiatorObjectUuid())
            .append("pullModuleAlarmAllowed", getPullModuleAlarmAllowed())
            .append("nonLegacyStartupMode", getNonLegacyStartupMode())
            .append("combinedObjectContainerUsed", getCombinedObjectContainerUsed())
            .append("acknowledgeCompanionAr", getAcknowledgeCompanionAr())
            .append("companionArType", getCompanionArType())
            .append("deviceAccess", getDeviceAccess())
            .append("cmInitiator", getCmInitiator())
            .append("supervisorTakeoverAllowed", getSupervisorTakeoverAllowed())
            .append("state", getState())
            .append("cmInitiatorActivityTimeoutFactor", getCmInitiatorActivityTimeoutFactor())
            .append("cmInitiatorUdpRtPort", getCmInitiatorUdpRtPort())
            .append("cmInitiatorStationName", getCmInitiatorStationName())
            .toString();
    }

}
