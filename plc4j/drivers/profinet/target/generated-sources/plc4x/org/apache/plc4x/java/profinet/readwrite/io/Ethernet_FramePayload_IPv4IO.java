/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class Ethernet_FramePayload_IPv4IO implements MessageIO<Ethernet_FramePayload_IPv4, Ethernet_FramePayload_IPv4> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ethernet_FramePayload_IPv4IO.class);

    @Override
    public Ethernet_FramePayload_IPv4 parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Ethernet_FramePayload_IPv4) new Ethernet_FramePayloadIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Ethernet_FramePayload_IPv4 value, Object... args) throws ParseException {
        new Ethernet_FramePayloadIO().serialize(writeBuffer, value, args);
    }

    public static Ethernet_FramePayload_IPv4Builder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Ethernet_FramePayload_IPv4");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (version)
        byte version = readBuffer.readUnsignedByte("version", 4);
        if(version != Ethernet_FramePayload_IPv4.VERSION) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.VERSION + " but got " + version);
        }

        // Const Field (headerLength)
        byte headerLength = readBuffer.readUnsignedByte("headerLength", 4);
        if(headerLength != Ethernet_FramePayload_IPv4.HEADERLENGTH) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.HEADERLENGTH + " but got " + headerLength);
        }

        // Const Field (differentiatedServicesCodepoint)
        short differentiatedServicesCodepoint = readBuffer.readUnsignedShort("differentiatedServicesCodepoint", 6);
        if(differentiatedServicesCodepoint != Ethernet_FramePayload_IPv4.DIFFERENTIATEDSERVICESCODEPOINT) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.DIFFERENTIATEDSERVICESCODEPOINT + " but got " + differentiatedServicesCodepoint);
        }

        // Const Field (explicitCongestionNotification)
        byte explicitCongestionNotification = readBuffer.readUnsignedByte("explicitCongestionNotification", 2);
        if(explicitCongestionNotification != Ethernet_FramePayload_IPv4.EXPLICITCONGESTIONNOTIFICATION) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.EXPLICITCONGESTIONNOTIFICATION + " but got " + explicitCongestionNotification);
        }

        // Implicit Field (totalLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int totalLength = readBuffer.readUnsignedInt("totalLength", 16);


        // Simple Field (identification)
int identification = readBuffer.readUnsignedInt("identification", 15) ;
        // Const Field (flags)
        byte flags = readBuffer.readUnsignedByte("flags", 3);
        if(flags != Ethernet_FramePayload_IPv4.FLAGS) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.FLAGS + " but got " + flags);
        }

        // Const Field (fragmentOffset)
        int fragmentOffset = readBuffer.readUnsignedInt("fragmentOffset", 13);
        if(fragmentOffset != Ethernet_FramePayload_IPv4.FRAGMENTOFFSET) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.FRAGMENTOFFSET + " but got " + fragmentOffset);
        }

        // Const Field (timeToLive)
        short timeToLive = readBuffer.readUnsignedShort("timeToLive", 8);
        if(timeToLive != Ethernet_FramePayload_IPv4.TIMETOLIVE) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.TIMETOLIVE + " but got " + timeToLive);
        }

        // Const Field (protocol)
        short protocol = readBuffer.readUnsignedShort("protocol", 8);
        if(protocol != Ethernet_FramePayload_IPv4.PROTOCOL) {
            throw new ParseException("Expected constant value " + Ethernet_FramePayload_IPv4.PROTOCOL + " but got " + protocol);
        }

        readBuffer.pullContext("sourceAddress");

        // Simple Field (sourceAddress)
IpAddress sourceAddress = IpAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("sourceAddress");

        readBuffer.pullContext("destinationAddress");

        // Simple Field (destinationAddress)
IpAddress destinationAddress = IpAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("destinationAddress");

        readBuffer.pullContext("packet");

        // Simple Field (packet)
Udp_Packet packet = Udp_PacketIO.staticParse(readBuffer ) ;        readBuffer.closeContext("packet");

        readBuffer.closeContext("Ethernet_FramePayload_IPv4");
        // Create the instance
        return new Ethernet_FramePayload_IPv4Builder(identification, sourceAddress, destinationAddress, packet);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Ethernet_FramePayload_IPv4 _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Ethernet_FramePayload_IPv4");

        // Const Field (version)
        writeBuffer.writeUnsignedByte("version", 4, ((Number) 0x4).byteValue());

        // Const Field (headerLength)
        writeBuffer.writeUnsignedByte("headerLength", 4, ((Number) 0x5).byteValue());

        // Const Field (differentiatedServicesCodepoint)
        writeBuffer.writeUnsignedShort("differentiatedServicesCodepoint", 6, ((Number) 0x00).shortValue());

        // Const Field (explicitCongestionNotification)
        writeBuffer.writeUnsignedByte("explicitCongestionNotification", 2, ((Number) 0x0).byteValue());

        // Implicit Field (totalLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int totalLength = (int) ((20) + (_value.getPacket().getLengthInBytes()));
        writeBuffer.writeUnsignedInt("totalLength", 16, ((Number) (totalLength)).intValue());

        // Simple Field (identification)
        int identification = (int) _value.getIdentification();
        writeBuffer.writeUnsignedInt("identification", 15, ((Number) (identification)).intValue());

        // Const Field (flags)
        writeBuffer.writeUnsignedByte("flags", 3, ((Number) 0x00).byteValue());

        // Const Field (fragmentOffset)
        writeBuffer.writeUnsignedInt("fragmentOffset", 13, ((Number) 0x00).intValue());

        // Const Field (timeToLive)
        writeBuffer.writeUnsignedShort("timeToLive", 8, ((Number) 0x40).shortValue());

        // Const Field (protocol)
        writeBuffer.writeUnsignedShort("protocol", 8, ((Number) 0x11).shortValue());

        // Simple Field (sourceAddress)
        IpAddress sourceAddress = (IpAddress) _value.getSourceAddress();
        writeBuffer.pushContext("sourceAddress");
        IpAddressIO.staticSerialize(writeBuffer, sourceAddress);
        writeBuffer.popContext("sourceAddress");

        // Simple Field (destinationAddress)
        IpAddress destinationAddress = (IpAddress) _value.getDestinationAddress();
        writeBuffer.pushContext("destinationAddress");
        IpAddressIO.staticSerialize(writeBuffer, destinationAddress);
        writeBuffer.popContext("destinationAddress");

        // Simple Field (packet)
        Udp_Packet packet = (Udp_Packet) _value.getPacket();
        writeBuffer.pushContext("packet");
        Udp_PacketIO.staticSerialize(writeBuffer, packet);
        writeBuffer.popContext("packet");
        writeBuffer.popContext("Ethernet_FramePayload_IPv4");
    }

    public static class Ethernet_FramePayload_IPv4Builder implements Ethernet_FramePayloadIO.Ethernet_FramePayloadBuilder {
        private final int identification;
        private final IpAddress sourceAddress;
        private final IpAddress destinationAddress;
        private final Udp_Packet packet;

        public Ethernet_FramePayload_IPv4Builder(int identification, IpAddress sourceAddress, IpAddress destinationAddress, Udp_Packet packet) {
            this.identification = identification;
            this.sourceAddress = sourceAddress;
            this.destinationAddress = destinationAddress;
            this.packet = packet;
        }

        public Ethernet_FramePayload_IPv4 build() {
            return new Ethernet_FramePayload_IPv4(identification, sourceAddress, destinationAddress, packet);
        }
    }

}
