/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public abstract class DceRpc_Packet implements Message {

    // Abstract accessors for discriminator values.
    public abstract DceRpc_PacketType getPacketType();

    // Constant values.
    public static final short VERSION = 0x04;
    public static final byte CANCELWASPENDING = 0;
    public static final byte INTEGERENCODING = 0x0;
    public static final byte CHARACTERENCODING = 0x0;
    public static final short FLOATINGPOINTREPRESENTATION = 0x00;
    public static final short SERIALHIGH = 0x00;
    public static final short SERIALLOW = 0x00;
    public static final long UUID1 = 0xDEA00000;
    public static final int UUID2 = 0x6C97;
    public static final int UUID3 = 0x11D1;
    public static final int UUID4 = 0x8271;
    public static final long INTERFACE1 = 0xDEA00001;
    public static final int INTERFACE2 = 0x6C97;
    public static final int INTERFACE3 = 0x11D1;
    public static final int INTERFACE4 = 0x8271;
    public static final int INTERFACE5 = 0x00A0;
    public static final long INTERFACE6 = 0x2442DF7D;
    public static final int ACTIVITY2 = 0x0000;
    public static final int ACTIVITY3 = 0x1010;
    public static final int ACTIVITY4 = 0xAA25;
    public static final long ACTIVITY5 = 0x606D3C3D;
    public static final int ACTIVITY6 = 0xA9A3;
    public static final long INTERFACEVER = 0x00000001;
    public static final int INTERFACEHINT = 0xFFFF;
    public static final int ACTIVITYHINT = 0xFFFF;
    public static final int FRAGMENTNUM = 0x0000;
    public static final short AUTHPROTO = 0x00;
    public static final short SERIALLOW2 = 0x00;

    // Properties.
    private final int instanceOrNodeNumber;
    private final int deviceId;
    private final int vendorId;
    private final long activity;
    private final long serverBootTime;
    private final long sequenceNumber;
    private final DceRpc_Operation operation;
    private final PnIoCm_Packet payload;

    public DceRpc_Packet(int instanceOrNodeNumber, int deviceId, int vendorId, long activity, long serverBootTime, long sequenceNumber, DceRpc_Operation operation, PnIoCm_Packet payload) {
        this.instanceOrNodeNumber = instanceOrNodeNumber;
        this.deviceId = deviceId;
        this.vendorId = vendorId;
        this.activity = activity;
        this.serverBootTime = serverBootTime;
        this.sequenceNumber = sequenceNumber;
        this.operation = operation;
        this.payload = payload;
    }

    public int getInstanceOrNodeNumber() {
        return instanceOrNodeNumber;
    }

    public int getDeviceId() {
        return deviceId;
    }

    public int getVendorId() {
        return vendorId;
    }

    public long getActivity() {
        return activity;
    }

    public long getServerBootTime() {
        return serverBootTime;
    }

    public long getSequenceNumber() {
        return sequenceNumber;
    }

    public DceRpc_Operation getOperation() {
        return operation;
    }

    public PnIoCm_Packet getPayload() {
        return payload;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        DceRpc_Packet _value  = this;

        // Const Field (version)
        lengthInBits += 8;

        // Discriminator Field (packetType)
            lengthInBits += 8;

        // Length of sub-type elements will be added by sub-type...

        // Reserved Field (reserved)
        lengthInBits += 6;

        // Const Field (cancelWasPending)
        lengthInBits += 1;

        // Reserved Field (reserved)
        lengthInBits += 1;

        // Const Field (integerEncoding)
        lengthInBits += 4;

        // Const Field (characterEncoding)
        lengthInBits += 4;

        // Const Field (floatingPointRepresentation)
        lengthInBits += 8;

        // Const Field (serialHigh)
        lengthInBits += 8;

        // Const Field (serialLow)
        lengthInBits += 8;

        // Const Field (uuid1)
        lengthInBits += 32;

        // Const Field (uuid2)
        lengthInBits += 16;

        // Const Field (uuid3)
        lengthInBits += 16;

        // Const Field (uuid4)
        lengthInBits += 16;

        // Simple field (instanceOrNodeNumber)
        lengthInBits += 16;

        // Simple field (deviceId)
        lengthInBits += 16;

        // Simple field (vendorId)
        lengthInBits += 16;

        // Const Field (interface1)
        lengthInBits += 32;

        // Const Field (interface2)
        lengthInBits += 16;

        // Const Field (interface3)
        lengthInBits += 16;

        // Const Field (interface4)
        lengthInBits += 16;

        // Const Field (interface5)
        lengthInBits += 16;

        // Const Field (interface6)
        lengthInBits += 32;

        // Simple field (activity)
        lengthInBits += 32;

        // Const Field (activity2)
        lengthInBits += 16;

        // Const Field (activity3)
        lengthInBits += 16;

        // Const Field (activity4)
        lengthInBits += 16;

        // Const Field (activity5)
        lengthInBits += 32;

        // Const Field (activity6)
        lengthInBits += 16;

        // Simple field (serverBootTime)
        lengthInBits += 32;

        // Const Field (interfaceVer)
        lengthInBits += 32;

        // Simple field (sequenceNumber)
        lengthInBits += 32;

        // Simple field (operation)
        lengthInBits += 16;

        // Const Field (interfaceHint)
        lengthInBits += 16;

        // Const Field (activityHint)
        lengthInBits += 16;

        // Implicit Field (fragmentLength)
        lengthInBits += 16;
        //int fragmentLength = (int) (_value.getPayload().getLengthInBytes());

        // Const Field (fragmentNum)
        lengthInBits += 16;

        // Const Field (authProto)
        lengthInBits += 8;

        // Const Field (serialLow2)
        lengthInBits += 8;

        // Simple field (payload)
        lengthInBits += payload.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<DceRpc_Packet, DceRpc_Packet> getMessageIO() {
        return new DceRpc_PacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DceRpc_Packet)) {
            return false;
        }
        DceRpc_Packet that = (DceRpc_Packet) o;
        return
            (getInstanceOrNodeNumber() == that.getInstanceOrNodeNumber()) &&
            (getDeviceId() == that.getDeviceId()) &&
            (getVendorId() == that.getVendorId()) &&
            (getActivity() == that.getActivity()) &&
            (getServerBootTime() == that.getServerBootTime()) &&
            (getSequenceNumber() == that.getSequenceNumber()) &&
            (getOperation() == that.getOperation()) &&
            (getPayload() == that.getPayload()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getInstanceOrNodeNumber(),
            getDeviceId(),
            getVendorId(),
            getActivity(),
            getServerBootTime(),
            getSequenceNumber(),
            getOperation(),
            getPayload()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("instanceOrNodeNumber", getInstanceOrNodeNumber())
            .append("deviceId", getDeviceId())
            .append("vendorId", getVendorId())
            .append("activity", getActivity())
            .append("serverBootTime", getServerBootTime())
            .append("sequenceNumber", getSequenceNumber())
            .append("operation", getOperation())
            .append("payload", getPayload())
            .toString();
    }

}
