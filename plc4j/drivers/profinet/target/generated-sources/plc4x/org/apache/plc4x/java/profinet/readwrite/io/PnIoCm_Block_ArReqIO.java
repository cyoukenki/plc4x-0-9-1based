/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_ArReqIO implements MessageIO<PnIoCm_Block_ArReq, PnIoCm_Block_ArReq> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Block_ArReqIO.class);

    @Override
    public PnIoCm_Block_ArReq parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Block_ArReq) new PnIoCm_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block_ArReq value, Object... args) throws ParseException {
        new PnIoCm_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Block_ArReqBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block_ArReq");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("arType");

        // Simple Field (arType)
        // enum based simple field with type PnIoCm_ArType
        PnIoCm_ArType arType = PnIoCm_ArType.enumForValue(readBuffer.readUnsignedInt("PnIoCm_ArType", 16));
        readBuffer.closeContext("arType");

        readBuffer.pullContext("arUuid");

        // Simple Field (arUuid)
Uuid arUuid = UuidIO.staticParse(readBuffer ) ;        readBuffer.closeContext("arUuid");


        // Simple Field (sessionKey)
int sessionKey = readBuffer.readUnsignedInt("sessionKey", 16) ;
        readBuffer.pullContext("cmInitiatorMacAddr");

        // Simple Field (cmInitiatorMacAddr)
MacAddress cmInitiatorMacAddr = MacAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("cmInitiatorMacAddr");

        readBuffer.pullContext("cmInitiatorObjectUuid");

        // Simple Field (cmInitiatorObjectUuid)
Uuid cmInitiatorObjectUuid = UuidIO.staticParse(readBuffer ) ;        readBuffer.closeContext("cmInitiatorObjectUuid");


        // Simple Field (pullModuleAlarmAllowed)
boolean pullModuleAlarmAllowed = readBuffer.readBit("pullModuleAlarmAllowed") ;

        // Simple Field (nonLegacyStartupMode)
boolean nonLegacyStartupMode = readBuffer.readBit("nonLegacyStartupMode") ;

        // Simple Field (combinedObjectContainerUsed)
boolean combinedObjectContainerUsed = readBuffer.readBit("combinedObjectContainerUsed") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 17);
            if(reserved != (long) 0x00000) {
                LOGGER.info("Expected constant value " + 0x00000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (acknowledgeCompanionAr)
boolean acknowledgeCompanionAr = readBuffer.readBit("acknowledgeCompanionAr") ;
        readBuffer.pullContext("companionArType");

        // Simple Field (companionArType)
        // enum based simple field with type PnIoCm_CompanionArType
        PnIoCm_CompanionArType companionArType = PnIoCm_CompanionArType.enumForValue(readBuffer.readUnsignedByte("PnIoCm_CompanionArType", 2));
        readBuffer.closeContext("companionArType");


        // Simple Field (deviceAccess)
boolean deviceAccess = readBuffer.readBit("deviceAccess") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 3);
            if(reserved != (byte) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (cmInitiator)
boolean cmInitiator = readBuffer.readBit("cmInitiator") ;

        // Simple Field (supervisorTakeoverAllowed)
boolean supervisorTakeoverAllowed = readBuffer.readBit("supervisorTakeoverAllowed") ;
        readBuffer.pullContext("state");

        // Simple Field (state)
        // enum based simple field with type PnIoCm_State
        PnIoCm_State state = PnIoCm_State.enumForValue(readBuffer.readUnsignedByte("PnIoCm_State", 3));
        readBuffer.closeContext("state");


        // Simple Field (cmInitiatorActivityTimeoutFactor)
int cmInitiatorActivityTimeoutFactor = readBuffer.readUnsignedInt("cmInitiatorActivityTimeoutFactor", 16) ;

        // Simple Field (cmInitiatorUdpRtPort)
int cmInitiatorUdpRtPort = readBuffer.readUnsignedInt("cmInitiatorUdpRtPort", 16) ;
        // Implicit Field (stationNameLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int stationNameLength = readBuffer.readUnsignedInt("stationNameLength", 16);


        // Simple Field (cmInitiatorStationName)
String cmInitiatorStationName = readBuffer.readString("cmInitiatorStationName", (stationNameLength) * (8), "UTF-8") ;
        readBuffer.closeContext("PnIoCm_Block_ArReq");
        // Create the instance
        return new PnIoCm_Block_ArReqBuilder(arType, arUuid, sessionKey, cmInitiatorMacAddr, cmInitiatorObjectUuid, pullModuleAlarmAllowed, nonLegacyStartupMode, combinedObjectContainerUsed, acknowledgeCompanionAr, companionArType, deviceAccess, cmInitiator, supervisorTakeoverAllowed, state, cmInitiatorActivityTimeoutFactor, cmInitiatorUdpRtPort, cmInitiatorStationName);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block_ArReq _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block_ArReq");

        // Simple Field (arType)
        PnIoCm_ArType arType = (PnIoCm_ArType) _value.getArType();
        writeBuffer.pushContext("arType");
        // enum field with type PnIoCm_ArType
        writeBuffer.writeUnsignedInt("PnIoCm_ArType", 16, ((Number) (arType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(arType.name()));
        writeBuffer.popContext("arType");

        // Simple Field (arUuid)
        Uuid arUuid = (Uuid) _value.getArUuid();
        writeBuffer.pushContext("arUuid");
        UuidIO.staticSerialize(writeBuffer, arUuid);
        writeBuffer.popContext("arUuid");

        // Simple Field (sessionKey)
        int sessionKey = (int) _value.getSessionKey();
        writeBuffer.writeUnsignedInt("sessionKey", 16, ((Number) (sessionKey)).intValue());

        // Simple Field (cmInitiatorMacAddr)
        MacAddress cmInitiatorMacAddr = (MacAddress) _value.getCmInitiatorMacAddr();
        writeBuffer.pushContext("cmInitiatorMacAddr");
        MacAddressIO.staticSerialize(writeBuffer, cmInitiatorMacAddr);
        writeBuffer.popContext("cmInitiatorMacAddr");

        // Simple Field (cmInitiatorObjectUuid)
        Uuid cmInitiatorObjectUuid = (Uuid) _value.getCmInitiatorObjectUuid();
        writeBuffer.pushContext("cmInitiatorObjectUuid");
        UuidIO.staticSerialize(writeBuffer, cmInitiatorObjectUuid);
        writeBuffer.popContext("cmInitiatorObjectUuid");

        // Simple Field (pullModuleAlarmAllowed)
        boolean pullModuleAlarmAllowed = (boolean) _value.getPullModuleAlarmAllowed();
        writeBuffer.writeBit("pullModuleAlarmAllowed", (boolean) (pullModuleAlarmAllowed));

        // Simple Field (nonLegacyStartupMode)
        boolean nonLegacyStartupMode = (boolean) _value.getNonLegacyStartupMode();
        writeBuffer.writeBit("nonLegacyStartupMode", (boolean) (nonLegacyStartupMode));

        // Simple Field (combinedObjectContainerUsed)
        boolean combinedObjectContainerUsed = (boolean) _value.getCombinedObjectContainerUsed();
        writeBuffer.writeBit("combinedObjectContainerUsed", (boolean) (combinedObjectContainerUsed));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 17, ((Number) (long) 0x00000).longValue());

        // Simple Field (acknowledgeCompanionAr)
        boolean acknowledgeCompanionAr = (boolean) _value.getAcknowledgeCompanionAr();
        writeBuffer.writeBit("acknowledgeCompanionAr", (boolean) (acknowledgeCompanionAr));

        // Simple Field (companionArType)
        PnIoCm_CompanionArType companionArType = (PnIoCm_CompanionArType) _value.getCompanionArType();
        writeBuffer.pushContext("companionArType");
        // enum field with type PnIoCm_CompanionArType
        writeBuffer.writeUnsignedByte("PnIoCm_CompanionArType", 2, ((Number) (companionArType.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(companionArType.name()));
        writeBuffer.popContext("companionArType");

        // Simple Field (deviceAccess)
        boolean deviceAccess = (boolean) _value.getDeviceAccess();
        writeBuffer.writeBit("deviceAccess", (boolean) (deviceAccess));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 3, ((Number) (byte) 0x0).byteValue());

        // Simple Field (cmInitiator)
        boolean cmInitiator = (boolean) _value.getCmInitiator();
        writeBuffer.writeBit("cmInitiator", (boolean) (cmInitiator));

        // Simple Field (supervisorTakeoverAllowed)
        boolean supervisorTakeoverAllowed = (boolean) _value.getSupervisorTakeoverAllowed();
        writeBuffer.writeBit("supervisorTakeoverAllowed", (boolean) (supervisorTakeoverAllowed));

        // Simple Field (state)
        PnIoCm_State state = (PnIoCm_State) _value.getState();
        writeBuffer.pushContext("state");
        // enum field with type PnIoCm_State
        writeBuffer.writeUnsignedByte("PnIoCm_State", 3, ((Number) (state.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(state.name()));
        writeBuffer.popContext("state");

        // Simple Field (cmInitiatorActivityTimeoutFactor)
        int cmInitiatorActivityTimeoutFactor = (int) _value.getCmInitiatorActivityTimeoutFactor();
        writeBuffer.writeUnsignedInt("cmInitiatorActivityTimeoutFactor", 16, ((Number) (cmInitiatorActivityTimeoutFactor)).intValue());

        // Simple Field (cmInitiatorUdpRtPort)
        int cmInitiatorUdpRtPort = (int) _value.getCmInitiatorUdpRtPort();
        writeBuffer.writeUnsignedInt("cmInitiatorUdpRtPort", 16, ((Number) (cmInitiatorUdpRtPort)).intValue());

        // Implicit Field (stationNameLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int stationNameLength = (int) (STR_LEN(_value.getCmInitiatorStationName()));
        writeBuffer.writeUnsignedInt("stationNameLength", 16, ((Number) (stationNameLength)).intValue());

        // Simple Field (cmInitiatorStationName)
        String cmInitiatorStationName = (String) _value.getCmInitiatorStationName();
        writeBuffer.writeString("cmInitiatorStationName", (STR_LEN(_value.getCmInitiatorStationName())) * (8), "UTF-8", (String) (cmInitiatorStationName));
        writeBuffer.popContext("PnIoCm_Block_ArReq");
    }

    public static class PnIoCm_Block_ArReqBuilder implements PnIoCm_BlockIO.PnIoCm_BlockBuilder {
        private final PnIoCm_ArType arType;
        private final Uuid arUuid;
        private final int sessionKey;
        private final MacAddress cmInitiatorMacAddr;
        private final Uuid cmInitiatorObjectUuid;
        private final boolean pullModuleAlarmAllowed;
        private final boolean nonLegacyStartupMode;
        private final boolean combinedObjectContainerUsed;
        private final boolean acknowledgeCompanionAr;
        private final PnIoCm_CompanionArType companionArType;
        private final boolean deviceAccess;
        private final boolean cmInitiator;
        private final boolean supervisorTakeoverAllowed;
        private final PnIoCm_State state;
        private final int cmInitiatorActivityTimeoutFactor;
        private final int cmInitiatorUdpRtPort;
        private final String cmInitiatorStationName;

        public PnIoCm_Block_ArReqBuilder(PnIoCm_ArType arType, Uuid arUuid, int sessionKey, MacAddress cmInitiatorMacAddr, Uuid cmInitiatorObjectUuid, boolean pullModuleAlarmAllowed, boolean nonLegacyStartupMode, boolean combinedObjectContainerUsed, boolean acknowledgeCompanionAr, PnIoCm_CompanionArType companionArType, boolean deviceAccess, boolean cmInitiator, boolean supervisorTakeoverAllowed, PnIoCm_State state, int cmInitiatorActivityTimeoutFactor, int cmInitiatorUdpRtPort, String cmInitiatorStationName) {
            this.arType = arType;
            this.arUuid = arUuid;
            this.sessionKey = sessionKey;
            this.cmInitiatorMacAddr = cmInitiatorMacAddr;
            this.cmInitiatorObjectUuid = cmInitiatorObjectUuid;
            this.pullModuleAlarmAllowed = pullModuleAlarmAllowed;
            this.nonLegacyStartupMode = nonLegacyStartupMode;
            this.combinedObjectContainerUsed = combinedObjectContainerUsed;
            this.acknowledgeCompanionAr = acknowledgeCompanionAr;
            this.companionArType = companionArType;
            this.deviceAccess = deviceAccess;
            this.cmInitiator = cmInitiator;
            this.supervisorTakeoverAllowed = supervisorTakeoverAllowed;
            this.state = state;
            this.cmInitiatorActivityTimeoutFactor = cmInitiatorActivityTimeoutFactor;
            this.cmInitiatorUdpRtPort = cmInitiatorUdpRtPort;
            this.cmInitiatorStationName = cmInitiatorStationName;
        }

        public PnIoCm_Block_ArReq build(short blockVersionHigh, short blockVersionLow) {
            return new PnIoCm_Block_ArReq(blockVersionHigh, blockVersionLow, arType, arUuid, sessionKey, cmInitiatorMacAddr, cmInitiatorObjectUuid, pullModuleAlarmAllowed, nonLegacyStartupMode, combinedObjectContainerUsed, acknowledgeCompanionAr, companionArType, deviceAccess, cmInitiator, supervisorTakeoverAllowed, state, cmInitiatorActivityTimeoutFactor, cmInitiatorUdpRtPort, cmInitiatorStationName);
        }
    }

}
