/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_ArRes extends PnIoCm_Block implements Message {

    // Accessors for discriminator values.
    public PnIoCm_BlockType getBlockType() {
        return PnIoCm_BlockType.AR_BLOCK_RES;
    }

    // Properties.
    private final PnIoCm_ArType arType;
    private final Uuid arUuid;
    private final int sessionKey;
    private final MacAddress cmResponderMacAddr;
    private final Uuid cmResponderObjectUuid;

    public PnIoCm_Block_ArRes(short blockVersionHigh, short blockVersionLow, PnIoCm_ArType arType, Uuid arUuid, int sessionKey, MacAddress cmResponderMacAddr, Uuid cmResponderObjectUuid) {
        super(blockVersionHigh, blockVersionLow);
        this.arType = arType;
        this.arUuid = arUuid;
        this.sessionKey = sessionKey;
        this.cmResponderMacAddr = cmResponderMacAddr;
        this.cmResponderObjectUuid = cmResponderObjectUuid;
    }

    public PnIoCm_ArType getArType() {
        return arType;
    }

    public Uuid getArUuid() {
        return arUuid;
    }

    public int getSessionKey() {
        return sessionKey;
    }

    public MacAddress getCmResponderMacAddr() {
        return cmResponderMacAddr;
    }

    public Uuid getCmResponderObjectUuid() {
        return cmResponderObjectUuid;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PnIoCm_Block_ArRes _value  = this;

        // Simple field (arType)
        lengthInBits += 16;

        // Simple field (arUuid)
        lengthInBits += arUuid.getLengthInBits();

        // Simple field (sessionKey)
        lengthInBits += 16;

        // Simple field (cmResponderMacAddr)
        lengthInBits += cmResponderMacAddr.getLengthInBits();

        // Simple field (cmResponderObjectUuid)
        lengthInBits += cmResponderObjectUuid.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<PnIoCm_Block, PnIoCm_Block> getMessageIO() {
        return new PnIoCm_BlockIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PnIoCm_Block_ArRes)) {
            return false;
        }
        PnIoCm_Block_ArRes that = (PnIoCm_Block_ArRes) o;
        return
            (getArType() == that.getArType()) &&
            (getArUuid() == that.getArUuid()) &&
            (getSessionKey() == that.getSessionKey()) &&
            (getCmResponderMacAddr() == that.getCmResponderMacAddr()) &&
            (getCmResponderObjectUuid() == that.getCmResponderObjectUuid()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getArType(),
            getArUuid(),
            getSessionKey(),
            getCmResponderMacAddr(),
            getCmResponderObjectUuid()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("arType", getArType())
            .append("arUuid", getArUuid())
            .append("sessionKey", getSessionKey())
            .append("cmResponderMacAddr", getCmResponderMacAddr())
            .append("cmResponderObjectUuid", getCmResponderObjectUuid())
            .toString();
    }

}
