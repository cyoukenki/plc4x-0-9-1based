/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_DevicePropertiesDeviceRoleIO implements MessageIO<PnDcp_Block_DevicePropertiesDeviceRole, PnDcp_Block_DevicePropertiesDeviceRole> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Block_DevicePropertiesDeviceRoleIO.class);

    @Override
    public PnDcp_Block_DevicePropertiesDeviceRole parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Block_DevicePropertiesDeviceRole) new PnDcp_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceRole value, Object... args) throws ParseException {
        new PnDcp_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Block_DevicePropertiesDeviceRoleBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_Block_DevicePropertiesDeviceRole");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 20);
            if(reserved != (long) 0x000000) {
                LOGGER.info("Expected constant value " + 0x000000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (pnioSupervisor)
boolean pnioSupervisor = readBuffer.readBit("pnioSupervisor") ;

        // Simple Field (pnioMultidevive)
boolean pnioMultidevive = readBuffer.readBit("pnioMultidevive") ;

        // Simple Field (pnioController)
boolean pnioController = readBuffer.readBit("pnioController") ;

        // Simple Field (pnioDevice)
boolean pnioDevice = readBuffer.readBit("pnioDevice") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.closeContext("PnDcp_Block_DevicePropertiesDeviceRole");
        // Create the instance
        return new PnDcp_Block_DevicePropertiesDeviceRoleBuilder(pnioSupervisor, pnioMultidevive, pnioController, pnioDevice);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceRole _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block_DevicePropertiesDeviceRole");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 20, ((Number) (long) 0x000000).longValue());

        // Simple Field (pnioSupervisor)
        boolean pnioSupervisor = (boolean) _value.getPnioSupervisor();
        writeBuffer.writeBit("pnioSupervisor", (boolean) (pnioSupervisor));

        // Simple Field (pnioMultidevive)
        boolean pnioMultidevive = (boolean) _value.getPnioMultidevive();
        writeBuffer.writeBit("pnioMultidevive", (boolean) (pnioMultidevive));

        // Simple Field (pnioController)
        boolean pnioController = (boolean) _value.getPnioController();
        writeBuffer.writeBit("pnioController", (boolean) (pnioController));

        // Simple Field (pnioDevice)
        boolean pnioDevice = (boolean) _value.getPnioDevice();
        writeBuffer.writeBit("pnioDevice", (boolean) (pnioDevice));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());
        writeBuffer.popContext("PnDcp_Block_DevicePropertiesDeviceRole");
    }

    public static class PnDcp_Block_DevicePropertiesDeviceRoleBuilder implements PnDcp_BlockIO.PnDcp_BlockBuilder {
        private final boolean pnioSupervisor;
        private final boolean pnioMultidevive;
        private final boolean pnioController;
        private final boolean pnioDevice;

        public PnDcp_Block_DevicePropertiesDeviceRoleBuilder(boolean pnioSupervisor, boolean pnioMultidevive, boolean pnioController, boolean pnioDevice) {
            this.pnioSupervisor = pnioSupervisor;
            this.pnioMultidevive = pnioMultidevive;
            this.pnioController = pnioController;
            this.pnioDevice = pnioDevice;
        }

        public PnDcp_Block_DevicePropertiesDeviceRole build() {
            return new PnDcp_Block_DevicePropertiesDeviceRole(pnioSupervisor, pnioMultidevive, pnioController, pnioDevice);
        }
    }

}
