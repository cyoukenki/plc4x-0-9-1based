/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_ModuleDiffBlockApi_Submodule implements Message {


    // Properties.
    private final int subslotNumber;
    private final long submoduleIdentNumber;
    private final boolean codingUsesIdentInfo;
    private final PnIoCm_IdentInfo identInfo;
    private final PnIoCm_ArInfo arInfo;
    private final boolean diagInfoAvailable;
    private final boolean maintenanceDemanded;
    private final boolean maintenanceRequired;
    private final boolean qualifiedInfo;
    private final PnIoCm_AddInfo addInfo;

    public PnIoCm_ModuleDiffBlockApi_Submodule(int subslotNumber, long submoduleIdentNumber, boolean codingUsesIdentInfo, PnIoCm_IdentInfo identInfo, PnIoCm_ArInfo arInfo, boolean diagInfoAvailable, boolean maintenanceDemanded, boolean maintenanceRequired, boolean qualifiedInfo, PnIoCm_AddInfo addInfo) {
        this.subslotNumber = subslotNumber;
        this.submoduleIdentNumber = submoduleIdentNumber;
        this.codingUsesIdentInfo = codingUsesIdentInfo;
        this.identInfo = identInfo;
        this.arInfo = arInfo;
        this.diagInfoAvailable = diagInfoAvailable;
        this.maintenanceDemanded = maintenanceDemanded;
        this.maintenanceRequired = maintenanceRequired;
        this.qualifiedInfo = qualifiedInfo;
        this.addInfo = addInfo;
    }

    public int getSubslotNumber() {
        return subslotNumber;
    }

    public long getSubmoduleIdentNumber() {
        return submoduleIdentNumber;
    }

    public boolean getCodingUsesIdentInfo() {
        return codingUsesIdentInfo;
    }

    public PnIoCm_IdentInfo getIdentInfo() {
        return identInfo;
    }

    public PnIoCm_ArInfo getArInfo() {
        return arInfo;
    }

    public boolean getDiagInfoAvailable() {
        return diagInfoAvailable;
    }

    public boolean getMaintenanceDemanded() {
        return maintenanceDemanded;
    }

    public boolean getMaintenanceRequired() {
        return maintenanceRequired;
    }

    public boolean getQualifiedInfo() {
        return qualifiedInfo;
    }

    public PnIoCm_AddInfo getAddInfo() {
        return addInfo;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        PnIoCm_ModuleDiffBlockApi_Submodule _value  = this;

        // Simple field (subslotNumber)
        lengthInBits += 16;

        // Simple field (submoduleIdentNumber)
        lengthInBits += 32;

        // Simple field (codingUsesIdentInfo)
        lengthInBits += 1;

        // Simple field (identInfo)
        lengthInBits += 4;

        // Simple field (arInfo)
        lengthInBits += 4;

        // Simple field (diagInfoAvailable)
        lengthInBits += 1;

        // Simple field (maintenanceDemanded)
        lengthInBits += 1;

        // Simple field (maintenanceRequired)
        lengthInBits += 1;

        // Simple field (qualifiedInfo)
        lengthInBits += 1;

        // Simple field (addInfo)
        lengthInBits += 3;

        return lengthInBits;
    }

    @Override
    public MessageIO<PnIoCm_ModuleDiffBlockApi_Submodule, PnIoCm_ModuleDiffBlockApi_Submodule> getMessageIO() {
        return new PnIoCm_ModuleDiffBlockApi_SubmoduleIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PnIoCm_ModuleDiffBlockApi_Submodule)) {
            return false;
        }
        PnIoCm_ModuleDiffBlockApi_Submodule that = (PnIoCm_ModuleDiffBlockApi_Submodule) o;
        return
            (getSubslotNumber() == that.getSubslotNumber()) &&
            (getSubmoduleIdentNumber() == that.getSubmoduleIdentNumber()) &&
            (getCodingUsesIdentInfo() == that.getCodingUsesIdentInfo()) &&
            (getIdentInfo() == that.getIdentInfo()) &&
            (getArInfo() == that.getArInfo()) &&
            (getDiagInfoAvailable() == that.getDiagInfoAvailable()) &&
            (getMaintenanceDemanded() == that.getMaintenanceDemanded()) &&
            (getMaintenanceRequired() == that.getMaintenanceRequired()) &&
            (getQualifiedInfo() == that.getQualifiedInfo()) &&
            (getAddInfo() == that.getAddInfo()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getSubslotNumber(),
            getSubmoduleIdentNumber(),
            getCodingUsesIdentInfo(),
            getIdentInfo(),
            getArInfo(),
            getDiagInfoAvailable(),
            getMaintenanceDemanded(),
            getMaintenanceRequired(),
            getQualifiedInfo(),
            getAddInfo()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("subslotNumber", getSubslotNumber())
            .append("submoduleIdentNumber", getSubmoduleIdentNumber())
            .append("codingUsesIdentInfo", getCodingUsesIdentInfo())
            .append("identInfo", getIdentInfo())
            .append("arInfo", getArInfo())
            .append("diagInfoAvailable", getDiagInfoAvailable())
            .append("maintenanceDemanded", getMaintenanceDemanded())
            .append("maintenanceRequired", getMaintenanceRequired())
            .append("qualifiedInfo", getQualifiedInfo())
            .append("addInfo", getAddInfo())
            .toString();
    }

}
