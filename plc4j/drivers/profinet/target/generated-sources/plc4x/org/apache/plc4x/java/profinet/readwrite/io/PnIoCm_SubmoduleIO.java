/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_SubmoduleIO implements MessageIO<PnIoCm_Submodule, PnIoCm_Submodule> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_SubmoduleIO.class);

    @Override
    public PnIoCm_Submodule parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnIoCm_SubmoduleIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Submodule value, Object... args) throws ParseException {
        PnIoCm_SubmoduleIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_Submodule staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Submodule");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (slotNumber)
int slotNumber = readBuffer.readUnsignedInt("slotNumber", 16) ;

        // Simple Field (submoduleIdentNumber)
long submoduleIdentNumber = readBuffer.readUnsignedLong("submoduleIdentNumber", 32) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 10);
            if(reserved != (int) 0x000) {
                LOGGER.info("Expected constant value " + 0x000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (discardIoxs)
boolean discardIoxs = readBuffer.readBit("discardIoxs") ;

        // Simple Field (reduceOutputModuleDataLength)
boolean reduceOutputModuleDataLength = readBuffer.readBit("reduceOutputModuleDataLength") ;

        // Simple Field (reduceInputModuleDataLength)
boolean reduceInputModuleDataLength = readBuffer.readBit("reduceInputModuleDataLength") ;

        // Simple Field (sharedInput)
boolean sharedInput = readBuffer.readBit("sharedInput") ;
        // Discriminator Field (submoduleType) (Used as input to a switch field)
        PnIoCm_SubmoduleType submoduleType = PnIoCm_SubmoduleType.enumForValue(readBuffer.readUnsignedByte("submoduleType", 2));


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        PnIoCm_SubmoduleBuilder builder = null;
                if(EvaluationHelper.equals(submoduleType, PnIoCm_SubmoduleType.NO_INPUT_NO_OUTPUT_DATA)) {
            builder = PnIoCm_Submodule_NoInputNoOutputDataIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(submoduleType, PnIoCm_SubmoduleType.INPUT_AND_OUTPUT_DATA)) {
            builder = PnIoCm_Submodule_InputAndOutputDataIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("PnIoCm_Submodule");
        // Create the instance
        return builder.build(slotNumber, submoduleIdentNumber, discardIoxs, reduceOutputModuleDataLength, reduceInputModuleDataLength, sharedInput);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Submodule _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Submodule");

        // Simple Field (slotNumber)
        int slotNumber = (int) _value.getSlotNumber();
        writeBuffer.writeUnsignedInt("slotNumber", 16, ((Number) (slotNumber)).intValue());

        // Simple Field (submoduleIdentNumber)
        long submoduleIdentNumber = (long) _value.getSubmoduleIdentNumber();
        writeBuffer.writeUnsignedLong("submoduleIdentNumber", 32, ((Number) (submoduleIdentNumber)).longValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 10, ((Number) (int) 0x000).intValue());

        // Simple Field (discardIoxs)
        boolean discardIoxs = (boolean) _value.getDiscardIoxs();
        writeBuffer.writeBit("discardIoxs", (boolean) (discardIoxs));

        // Simple Field (reduceOutputModuleDataLength)
        boolean reduceOutputModuleDataLength = (boolean) _value.getReduceOutputModuleDataLength();
        writeBuffer.writeBit("reduceOutputModuleDataLength", (boolean) (reduceOutputModuleDataLength));

        // Simple Field (reduceInputModuleDataLength)
        boolean reduceInputModuleDataLength = (boolean) _value.getReduceInputModuleDataLength();
        writeBuffer.writeBit("reduceInputModuleDataLength", (boolean) (reduceInputModuleDataLength));

        // Simple Field (sharedInput)
        boolean sharedInput = (boolean) _value.getSharedInput();
        writeBuffer.writeBit("sharedInput", (boolean) (sharedInput));

        // Discriminator Field (submoduleType) (Used as input to a switch field)
        PnIoCm_SubmoduleType submoduleType = (PnIoCm_SubmoduleType) _value.getSubmoduleType();
                writeBuffer.writeUnsignedByte("submoduleType", 2, ((Number) (submoduleType.getValue())).byteValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof PnIoCm_Submodule_NoInputNoOutputData) {
            PnIoCm_Submodule_NoInputNoOutputDataIO.staticSerialize(writeBuffer, (PnIoCm_Submodule_NoInputNoOutputData) _value);
        } else 
        if(_value instanceof PnIoCm_Submodule_InputAndOutputData) {
            PnIoCm_Submodule_InputAndOutputDataIO.staticSerialize(writeBuffer, (PnIoCm_Submodule_InputAndOutputData) _value);
        }
        writeBuffer.popContext("PnIoCm_Submodule");
    }

    public static interface PnIoCm_SubmoduleBuilder {
        PnIoCm_Submodule build(int slotNumber, long submoduleIdentNumber, boolean discardIoxs, boolean reduceOutputModuleDataLength, boolean reduceInputModuleDataLength, boolean sharedInput);
    }

}
