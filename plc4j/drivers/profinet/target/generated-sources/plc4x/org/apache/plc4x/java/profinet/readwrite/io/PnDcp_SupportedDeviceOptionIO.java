/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_SupportedDeviceOptionIO implements MessageIO<PnDcp_SupportedDeviceOption, PnDcp_SupportedDeviceOption> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_SupportedDeviceOptionIO.class);

    @Override
    public PnDcp_SupportedDeviceOption parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnDcp_SupportedDeviceOptionIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_SupportedDeviceOption value, Object... args) throws ParseException {
        PnDcp_SupportedDeviceOptionIO.staticSerialize(writeBuffer, value);
    }

    public static PnDcp_SupportedDeviceOption staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_SupportedDeviceOption");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("option");

        // Simple Field (option)
        // enum based simple field with type PnDcp_BlockOptions
        PnDcp_BlockOptions option = PnDcp_BlockOptions.enumForValue(readBuffer.readUnsignedShort("PnDcp_BlockOptions", 8));
        readBuffer.closeContext("option");


        // Simple Field (suboption)
short suboption = readBuffer.readUnsignedShort("suboption", 8) ;
        readBuffer.closeContext("PnDcp_SupportedDeviceOption");
        // Create the instance
        return new PnDcp_SupportedDeviceOption(option, suboption);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_SupportedDeviceOption _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_SupportedDeviceOption");

        // Simple Field (option)
        PnDcp_BlockOptions option = (PnDcp_BlockOptions) _value.getOption();
        writeBuffer.pushContext("option");
        // enum field with type PnDcp_BlockOptions
        writeBuffer.writeUnsignedShort("PnDcp_BlockOptions", 8, ((Number) (option.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(option.name()));
        writeBuffer.popContext("option");

        // Simple Field (suboption)
        short suboption = (short) _value.getSuboption();
        writeBuffer.writeUnsignedShort("suboption", 8, ((Number) (suboption)).shortValue());
        writeBuffer.popContext("PnDcp_SupportedDeviceOption");
    }

}
