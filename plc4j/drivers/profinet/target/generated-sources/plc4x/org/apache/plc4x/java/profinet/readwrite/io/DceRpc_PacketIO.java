/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DceRpc_PacketIO implements MessageIO<DceRpc_Packet, DceRpc_Packet> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DceRpc_PacketIO.class);

    @Override
    public DceRpc_Packet parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return DceRpc_PacketIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DceRpc_Packet value, Object... args) throws ParseException {
        DceRpc_PacketIO.staticSerialize(writeBuffer, value);
    }

    public static DceRpc_Packet staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("DceRpc_Packet");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (version)
        short version = readBuffer.readUnsignedShort("version", 8);
        if(version != DceRpc_Packet.VERSION) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.VERSION + " but got " + version);
        }

        // Discriminator Field (packetType) (Used as input to a switch field)
        DceRpc_PacketType packetType = DceRpc_PacketType.enumForValue(readBuffer.readUnsignedShort("packetType", 8));


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        DceRpc_PacketBuilder builder = null;
                if(EvaluationHelper.equals(packetType, DceRpc_PacketType.REQUEST)) {
            builder = DceRpc_Packet_ReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(packetType, DceRpc_PacketType.RESPONSE)) {
            builder = DceRpc_Packet_ResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(packetType, DceRpc_PacketType.REJECT)) {
            builder = DceRpc_Packet_RejIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 6);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        // Const Field (cancelWasPending)
        byte cancelWasPending = readBuffer.readUnsignedByte("cancelWasPending", 1);
        if(cancelWasPending != DceRpc_Packet.CANCELWASPENDING) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.CANCELWASPENDING + " but got " + cancelWasPending);
        }

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x0) {
                LOGGER.info("Expected constant value " + 0x0 + " but got " + reserved + " for reserved field.");
            }
        }

        // Const Field (integerEncoding)
        byte integerEncoding = readBuffer.readUnsignedByte("integerEncoding", 4);
        if(integerEncoding != DceRpc_Packet.INTEGERENCODING) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTEGERENCODING + " but got " + integerEncoding);
        }

        // Const Field (characterEncoding)
        byte characterEncoding = readBuffer.readUnsignedByte("characterEncoding", 4);
        if(characterEncoding != DceRpc_Packet.CHARACTERENCODING) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.CHARACTERENCODING + " but got " + characterEncoding);
        }

        // Const Field (floatingPointRepresentation)
        short floatingPointRepresentation = readBuffer.readUnsignedShort("floatingPointRepresentation", 8);
        if(floatingPointRepresentation != DceRpc_Packet.FLOATINGPOINTREPRESENTATION) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.FLOATINGPOINTREPRESENTATION + " but got " + floatingPointRepresentation);
        }

        // Const Field (serialHigh)
        short serialHigh = readBuffer.readUnsignedShort("serialHigh", 8);
        if(serialHigh != DceRpc_Packet.SERIALHIGH) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.SERIALHIGH + " but got " + serialHigh);
        }

        // Const Field (serialLow)
        short serialLow = readBuffer.readUnsignedShort("serialLow", 8);
        if(serialLow != DceRpc_Packet.SERIALLOW) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.SERIALLOW + " but got " + serialLow);
        }

        // Const Field (uuid1)
        long uuid1 = readBuffer.readUnsignedLong("uuid1", 32);
        if(uuid1 != DceRpc_Packet.UUID1) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.UUID1 + " but got " + uuid1);
        }

        // Const Field (uuid2)
        int uuid2 = readBuffer.readUnsignedInt("uuid2", 16);
        if(uuid2 != DceRpc_Packet.UUID2) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.UUID2 + " but got " + uuid2);
        }

        // Const Field (uuid3)
        int uuid3 = readBuffer.readUnsignedInt("uuid3", 16);
        if(uuid3 != DceRpc_Packet.UUID3) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.UUID3 + " but got " + uuid3);
        }

        // Const Field (uuid4)
        int uuid4 = readBuffer.readUnsignedInt("uuid4", 16);
        if(uuid4 != DceRpc_Packet.UUID4) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.UUID4 + " but got " + uuid4);
        }


        // Simple Field (instanceOrNodeNumber)
int instanceOrNodeNumber = readBuffer.readUnsignedInt("instanceOrNodeNumber", 16) ;

        // Simple Field (deviceId)
int deviceId = readBuffer.readUnsignedInt("deviceId", 16) ;

        // Simple Field (vendorId)
int vendorId = readBuffer.readUnsignedInt("vendorId", 16) ;
        // Const Field (interface1)
        long interface1 = readBuffer.readUnsignedLong("interface1", 32);
        if(interface1 != DceRpc_Packet.INTERFACE1) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE1 + " but got " + interface1);
        }

        // Const Field (interface2)
        int interface2 = readBuffer.readUnsignedInt("interface2", 16);
        if(interface2 != DceRpc_Packet.INTERFACE2) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE2 + " but got " + interface2);
        }

        // Const Field (interface3)
        int interface3 = readBuffer.readUnsignedInt("interface3", 16);
        if(interface3 != DceRpc_Packet.INTERFACE3) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE3 + " but got " + interface3);
        }

        // Const Field (interface4)
        int interface4 = readBuffer.readUnsignedInt("interface4", 16);
        if(interface4 != DceRpc_Packet.INTERFACE4) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE4 + " but got " + interface4);
        }

        // Const Field (interface5)
        int interface5 = readBuffer.readUnsignedInt("interface5", 16);
        if(interface5 != DceRpc_Packet.INTERFACE5) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE5 + " but got " + interface5);
        }

        // Const Field (interface6)
        long interface6 = readBuffer.readUnsignedLong("interface6", 32);
        if(interface6 != DceRpc_Packet.INTERFACE6) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACE6 + " but got " + interface6);
        }


        // Simple Field (activity)
long activity = readBuffer.readUnsignedLong("activity", 32) ;
        // Const Field (activity2)
        int activity2 = readBuffer.readUnsignedInt("activity2", 16);
        if(activity2 != DceRpc_Packet.ACTIVITY2) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITY2 + " but got " + activity2);
        }

        // Const Field (activity3)
        int activity3 = readBuffer.readUnsignedInt("activity3", 16);
        if(activity3 != DceRpc_Packet.ACTIVITY3) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITY3 + " but got " + activity3);
        }

        // Const Field (activity4)
        int activity4 = readBuffer.readUnsignedInt("activity4", 16);
        if(activity4 != DceRpc_Packet.ACTIVITY4) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITY4 + " but got " + activity4);
        }

        // Const Field (activity5)
        long activity5 = readBuffer.readUnsignedLong("activity5", 32);
        if(activity5 != DceRpc_Packet.ACTIVITY5) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITY5 + " but got " + activity5);
        }

        // Const Field (activity6)
        int activity6 = readBuffer.readUnsignedInt("activity6", 16);
        if(activity6 != DceRpc_Packet.ACTIVITY6) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITY6 + " but got " + activity6);
        }


        // Simple Field (serverBootTime)
long serverBootTime = readBuffer.readUnsignedLong("serverBootTime", 32) ;
        // Const Field (interfaceVer)
        long interfaceVer = readBuffer.readUnsignedLong("interfaceVer", 32);
        if(interfaceVer != DceRpc_Packet.INTERFACEVER) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACEVER + " but got " + interfaceVer);
        }


        // Simple Field (sequenceNumber)
long sequenceNumber = readBuffer.readUnsignedLong("sequenceNumber", 32) ;
        readBuffer.pullContext("operation");

        // Simple Field (operation)
        // enum based simple field with type DceRpc_Operation
        DceRpc_Operation operation = DceRpc_Operation.enumForValue(readBuffer.readUnsignedInt("DceRpc_Operation", 16));
        readBuffer.closeContext("operation");

        // Const Field (interfaceHint)
        int interfaceHint = readBuffer.readUnsignedInt("interfaceHint", 16);
        if(interfaceHint != DceRpc_Packet.INTERFACEHINT) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.INTERFACEHINT + " but got " + interfaceHint);
        }

        // Const Field (activityHint)
        int activityHint = readBuffer.readUnsignedInt("activityHint", 16);
        if(activityHint != DceRpc_Packet.ACTIVITYHINT) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.ACTIVITYHINT + " but got " + activityHint);
        }

        // Implicit Field (fragmentLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int fragmentLength = readBuffer.readUnsignedInt("fragmentLength", 16);

        // Const Field (fragmentNum)
        int fragmentNum = readBuffer.readUnsignedInt("fragmentNum", 16);
        if(fragmentNum != DceRpc_Packet.FRAGMENTNUM) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.FRAGMENTNUM + " but got " + fragmentNum);
        }

        // Const Field (authProto)
        short authProto = readBuffer.readUnsignedShort("authProto", 8);
        if(authProto != DceRpc_Packet.AUTHPROTO) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.AUTHPROTO + " but got " + authProto);
        }

        // Const Field (serialLow2)
        short serialLow2 = readBuffer.readUnsignedShort("serialLow2", 8);
        if(serialLow2 != DceRpc_Packet.SERIALLOW2) {
            throw new ParseException("Expected constant value " + DceRpc_Packet.SERIALLOW2 + " but got " + serialLow2);
        }

        readBuffer.pullContext("payload");

        // Simple Field (payload)
PnIoCm_Packet payload = PnIoCm_PacketIO.staticParse(readBuffer , (DceRpc_PacketType) (packetType) ) ;        readBuffer.closeContext("payload");

        readBuffer.closeContext("DceRpc_Packet");
        // Create the instance
        return builder.build(instanceOrNodeNumber, deviceId, vendorId, activity, serverBootTime, sequenceNumber, operation, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DceRpc_Packet _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DceRpc_Packet");

        // Const Field (version)
        writeBuffer.writeUnsignedShort("version", 8, ((Number) 0x04).shortValue());

        // Discriminator Field (packetType) (Used as input to a switch field)
        DceRpc_PacketType packetType = (DceRpc_PacketType) _value.getPacketType();
                writeBuffer.writeUnsignedShort("packetType", 8, ((Number) (packetType.getValue())).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof DceRpc_Packet_Req) {
            DceRpc_Packet_ReqIO.staticSerialize(writeBuffer, (DceRpc_Packet_Req) _value);
        } else 
        if(_value instanceof DceRpc_Packet_Res) {
            DceRpc_Packet_ResIO.staticSerialize(writeBuffer, (DceRpc_Packet_Res) _value);
        } else 
        if(_value instanceof DceRpc_Packet_Rej) {
            DceRpc_Packet_RejIO.staticSerialize(writeBuffer, (DceRpc_Packet_Rej) _value);
        }

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 6, ((Number) (short) 0x00).shortValue());

        // Const Field (cancelWasPending)
        writeBuffer.writeUnsignedByte("cancelWasPending", 1, ((Number) 0).byteValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x0).byteValue());

        // Const Field (integerEncoding)
        writeBuffer.writeUnsignedByte("integerEncoding", 4, ((Number) 0x0).byteValue());

        // Const Field (characterEncoding)
        writeBuffer.writeUnsignedByte("characterEncoding", 4, ((Number) 0x0).byteValue());

        // Const Field (floatingPointRepresentation)
        writeBuffer.writeUnsignedShort("floatingPointRepresentation", 8, ((Number) 0x00).shortValue());

        // Const Field (serialHigh)
        writeBuffer.writeUnsignedShort("serialHigh", 8, ((Number) 0x00).shortValue());

        // Const Field (serialLow)
        writeBuffer.writeUnsignedShort("serialLow", 8, ((Number) 0x00).shortValue());

        // Const Field (uuid1)
        writeBuffer.writeUnsignedLong("uuid1", 32, ((Number) 0xDEA00000).longValue());

        // Const Field (uuid2)
        writeBuffer.writeUnsignedInt("uuid2", 16, ((Number) 0x6C97).intValue());

        // Const Field (uuid3)
        writeBuffer.writeUnsignedInt("uuid3", 16, ((Number) 0x11D1).intValue());

        // Const Field (uuid4)
        writeBuffer.writeUnsignedInt("uuid4", 16, ((Number) 0x8271).intValue());

        // Simple Field (instanceOrNodeNumber)
        int instanceOrNodeNumber = (int) _value.getInstanceOrNodeNumber();
        writeBuffer.writeUnsignedInt("instanceOrNodeNumber", 16, ((Number) (instanceOrNodeNumber)).intValue());

        // Simple Field (deviceId)
        int deviceId = (int) _value.getDeviceId();
        writeBuffer.writeUnsignedInt("deviceId", 16, ((Number) (deviceId)).intValue());

        // Simple Field (vendorId)
        int vendorId = (int) _value.getVendorId();
        writeBuffer.writeUnsignedInt("vendorId", 16, ((Number) (vendorId)).intValue());

        // Const Field (interface1)
        writeBuffer.writeUnsignedLong("interface1", 32, ((Number) 0xDEA00001).longValue());

        // Const Field (interface2)
        writeBuffer.writeUnsignedInt("interface2", 16, ((Number) 0x6C97).intValue());

        // Const Field (interface3)
        writeBuffer.writeUnsignedInt("interface3", 16, ((Number) 0x11D1).intValue());

        // Const Field (interface4)
        writeBuffer.writeUnsignedInt("interface4", 16, ((Number) 0x8271).intValue());

        // Const Field (interface5)
        writeBuffer.writeUnsignedInt("interface5", 16, ((Number) 0x00A0).intValue());

        // Const Field (interface6)
        writeBuffer.writeUnsignedLong("interface6", 32, ((Number) 0x2442DF7D).longValue());

        // Simple Field (activity)
        long activity = (long) _value.getActivity();
        writeBuffer.writeUnsignedLong("activity", 32, ((Number) (activity)).longValue());

        // Const Field (activity2)
        writeBuffer.writeUnsignedInt("activity2", 16, ((Number) 0x0000).intValue());

        // Const Field (activity3)
        writeBuffer.writeUnsignedInt("activity3", 16, ((Number) 0x1010).intValue());

        // Const Field (activity4)
        writeBuffer.writeUnsignedInt("activity4", 16, ((Number) 0xAA25).intValue());

        // Const Field (activity5)
        writeBuffer.writeUnsignedLong("activity5", 32, ((Number) 0x606D3C3D).longValue());

        // Const Field (activity6)
        writeBuffer.writeUnsignedInt("activity6", 16, ((Number) 0xA9A3).intValue());

        // Simple Field (serverBootTime)
        long serverBootTime = (long) _value.getServerBootTime();
        writeBuffer.writeUnsignedLong("serverBootTime", 32, ((Number) (serverBootTime)).longValue());

        // Const Field (interfaceVer)
        writeBuffer.writeUnsignedLong("interfaceVer", 32, ((Number) 0x00000001).longValue());

        // Simple Field (sequenceNumber)
        long sequenceNumber = (long) _value.getSequenceNumber();
        writeBuffer.writeUnsignedLong("sequenceNumber", 32, ((Number) (sequenceNumber)).longValue());

        // Simple Field (operation)
        DceRpc_Operation operation = (DceRpc_Operation) _value.getOperation();
        writeBuffer.pushContext("operation");
        // enum field with type DceRpc_Operation
        writeBuffer.writeUnsignedInt("DceRpc_Operation", 16, ((Number) (operation.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(operation.name()));
        writeBuffer.popContext("operation");

        // Const Field (interfaceHint)
        writeBuffer.writeUnsignedInt("interfaceHint", 16, ((Number) 0xFFFF).intValue());

        // Const Field (activityHint)
        writeBuffer.writeUnsignedInt("activityHint", 16, ((Number) 0xFFFF).intValue());

        // Implicit Field (fragmentLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int fragmentLength = (int) (_value.getPayload().getLengthInBytes());
        writeBuffer.writeUnsignedInt("fragmentLength", 16, ((Number) (fragmentLength)).intValue());

        // Const Field (fragmentNum)
        writeBuffer.writeUnsignedInt("fragmentNum", 16, ((Number) 0x0000).intValue());

        // Const Field (authProto)
        writeBuffer.writeUnsignedShort("authProto", 8, ((Number) 0x00).shortValue());

        // Const Field (serialLow2)
        writeBuffer.writeUnsignedShort("serialLow2", 8, ((Number) 0x00).shortValue());

        // Simple Field (payload)
        PnIoCm_Packet payload = (PnIoCm_Packet) _value.getPayload();
        writeBuffer.pushContext("payload");
        PnIoCm_PacketIO.staticSerialize(writeBuffer, payload);
        writeBuffer.popContext("payload");
        writeBuffer.popContext("DceRpc_Packet");
    }

    public static interface DceRpc_PacketBuilder {
        DceRpc_Packet build(int instanceOrNodeNumber, int deviceId, int vendorId, long activity, long serverBootTime, long sequenceNumber, DceRpc_Operation operation, PnIoCm_Packet payload);
    }

}
