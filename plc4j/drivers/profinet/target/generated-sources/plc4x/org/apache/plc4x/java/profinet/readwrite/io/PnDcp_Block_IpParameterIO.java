/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_IpParameterIO implements MessageIO<PnDcp_Block_IpParameter, PnDcp_Block_IpParameter> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Block_IpParameterIO.class);

    @Override
    public PnDcp_Block_IpParameter parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Block_IpParameter) new PnDcp_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block_IpParameter value, Object... args) throws ParseException {
        new PnDcp_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Block_IpParameterBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_Block_IpParameter");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (ipConflictDetected)
boolean ipConflictDetected = readBuffer.readBit("ipConflictDetected") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 5);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (setViaDhcp)
boolean setViaDhcp = readBuffer.readBit("setViaDhcp") ;

        // Simple Field (setManually)
boolean setManually = readBuffer.readBit("setManually") ;        // Array field (ipAddress)
        readBuffer.pullContext("ipAddress", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(4 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (4) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        short[] ipAddress;
        {
            int itemCount = Math.max(0, (int) 4);
            ipAddress = new short[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
ipAddress[curItem] = readBuffer.readUnsignedShort("", 8) ;            }
        }
            readBuffer.closeContext("ipAddress", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (subnetMask)
        readBuffer.pullContext("subnetMask", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(4 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (4) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        short[] subnetMask;
        {
            int itemCount = Math.max(0, (int) 4);
            subnetMask = new short[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
subnetMask[curItem] = readBuffer.readUnsignedShort("", 8) ;            }
        }
            readBuffer.closeContext("subnetMask", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (standardGateway)
        readBuffer.pullContext("standardGateway", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(4 > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (4) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        short[] standardGateway;
        {
            int itemCount = Math.max(0, (int) 4);
            standardGateway = new short[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
standardGateway[curItem] = readBuffer.readUnsignedShort("", 8) ;            }
        }
            readBuffer.closeContext("standardGateway", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnDcp_Block_IpParameter");
        // Create the instance
        return new PnDcp_Block_IpParameterBuilder(ipConflictDetected, setViaDhcp, setManually, ipAddress, subnetMask, standardGateway);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block_IpParameter _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block_IpParameter");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Simple Field (ipConflictDetected)
        boolean ipConflictDetected = (boolean) _value.getIpConflictDetected();
        writeBuffer.writeBit("ipConflictDetected", (boolean) (ipConflictDetected));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 5, ((Number) (short) 0x00).shortValue());

        // Simple Field (setViaDhcp)
        boolean setViaDhcp = (boolean) _value.getSetViaDhcp();
        writeBuffer.writeBit("setViaDhcp", (boolean) (setViaDhcp));

        // Simple Field (setManually)
        boolean setManually = (boolean) _value.getSetManually();
        writeBuffer.writeBit("setManually", (boolean) (setManually));

        // Array Field (ipAddress)
        if(_value.getIpAddress() != null) {
            writeBuffer.pushContext("ipAddress", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getIpAddress().length;
            int curItem = 0;
            for(short element : _value.getIpAddress()) {
                writeBuffer.writeUnsignedShort("", 8, ((Number) element).shortValue());
                curItem++;
            }
            writeBuffer.popContext("ipAddress", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (subnetMask)
        if(_value.getSubnetMask() != null) {
            writeBuffer.pushContext("subnetMask", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getSubnetMask().length;
            int curItem = 0;
            for(short element : _value.getSubnetMask()) {
                writeBuffer.writeUnsignedShort("", 8, ((Number) element).shortValue());
                curItem++;
            }
            writeBuffer.popContext("subnetMask", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (standardGateway)
        if(_value.getStandardGateway() != null) {
            writeBuffer.pushContext("standardGateway", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getStandardGateway().length;
            int curItem = 0;
            for(short element : _value.getStandardGateway()) {
                writeBuffer.writeUnsignedShort("", 8, ((Number) element).shortValue());
                curItem++;
            }
            writeBuffer.popContext("standardGateway", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnDcp_Block_IpParameter");
    }

    public static class PnDcp_Block_IpParameterBuilder implements PnDcp_BlockIO.PnDcp_BlockBuilder {
        private final boolean ipConflictDetected;
        private final boolean setViaDhcp;
        private final boolean setManually;
        private final short[] ipAddress;
        private final short[] subnetMask;
        private final short[] standardGateway;

        public PnDcp_Block_IpParameterBuilder(boolean ipConflictDetected, boolean setViaDhcp, boolean setManually, short[] ipAddress, short[] subnetMask, short[] standardGateway) {
            this.ipConflictDetected = ipConflictDetected;
            this.setViaDhcp = setViaDhcp;
            this.setManually = setManually;
            this.ipAddress = ipAddress;
            this.subnetMask = subnetMask;
            this.standardGateway = standardGateway;
        }

        public PnDcp_Block_IpParameter build() {
            return new PnDcp_Block_IpParameter(ipConflictDetected, setViaDhcp, setManually, ipAddress, subnetMask, standardGateway);
        }
    }

}
