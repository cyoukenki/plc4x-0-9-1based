/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_IoCrBlockReqApiIO implements MessageIO<PnIoCm_IoCrBlockReqApi, PnIoCm_IoCrBlockReqApi> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_IoCrBlockReqApiIO.class);

    @Override
    public PnIoCm_IoCrBlockReqApi parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnIoCm_IoCrBlockReqApiIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_IoCrBlockReqApi value, Object... args) throws ParseException {
        PnIoCm_IoCrBlockReqApiIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_IoCrBlockReqApi staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_IoCrBlockReqApi");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (api)
        long api = readBuffer.readUnsignedLong("api", 32);
        if(api != PnIoCm_IoCrBlockReqApi.API) {
            throw new ParseException("Expected constant value " + PnIoCm_IoCrBlockReqApi.API + " but got " + api);
        }

        // Implicit Field (numIoDataObjects) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numIoDataObjects = readBuffer.readUnsignedInt("numIoDataObjects", 16);
        // Array field (ioDataObjects)
        readBuffer.pullContext("ioDataObjects", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numIoDataObjects > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numIoDataObjects) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PnIoCm_IoDataObject[] ioDataObjects;
        {
            int itemCount = Math.max(0, (int) numIoDataObjects);
            ioDataObjects = new PnIoCm_IoDataObject[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
ioDataObjects[curItem] = PnIoCm_IoDataObjectIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("ioDataObjects", WithReaderWriterArgs.WithRenderAsList(true));

        // Implicit Field (numIoCss) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numIoCss = readBuffer.readUnsignedInt("numIoCss", 16);
        // Array field (ioCss)
        readBuffer.pullContext("ioCss", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numIoCss > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numIoCss) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PnIoCm_IoCs[] ioCss;
        {
            int itemCount = Math.max(0, (int) numIoCss);
            ioCss = new PnIoCm_IoCs[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
ioCss[curItem] = PnIoCm_IoCsIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("ioCss", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnIoCm_IoCrBlockReqApi");
        // Create the instance
        return new PnIoCm_IoCrBlockReqApi(ioDataObjects, ioCss);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_IoCrBlockReqApi _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_IoCrBlockReqApi");

        // Const Field (api)
        writeBuffer.writeUnsignedLong("api", 32, ((Number) 0x00000000).longValue());

        // Implicit Field (numIoDataObjects) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numIoDataObjects = (int) (COUNT(_value.getIoDataObjects()));
        writeBuffer.writeUnsignedInt("numIoDataObjects", 16, ((Number) (numIoDataObjects)).intValue());

        // Array Field (ioDataObjects)
        if(_value.getIoDataObjects() != null) {
            writeBuffer.pushContext("ioDataObjects", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getIoDataObjects().length;
            int curItem = 0;
            for(PnIoCm_IoDataObject element : _value.getIoDataObjects()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnIoCm_IoDataObjectIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("ioDataObjects", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Implicit Field (numIoCss) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numIoCss = (int) (COUNT(_value.getIoCss()));
        writeBuffer.writeUnsignedInt("numIoCss", 16, ((Number) (numIoCss)).intValue());

        // Array Field (ioCss)
        if(_value.getIoCss() != null) {
            writeBuffer.pushContext("ioCss", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getIoCss().length;
            int curItem = 0;
            for(PnIoCm_IoCs element : _value.getIoCss()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnIoCm_IoCsIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("ioCss", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnIoCm_IoCrBlockReqApi");
    }

}
