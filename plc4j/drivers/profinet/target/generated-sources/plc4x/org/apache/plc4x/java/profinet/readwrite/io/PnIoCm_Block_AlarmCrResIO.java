/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_AlarmCrResIO implements MessageIO<PnIoCm_Block_AlarmCrRes, PnIoCm_Block_AlarmCrRes> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Block_AlarmCrResIO.class);

    @Override
    public PnIoCm_Block_AlarmCrRes parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Block_AlarmCrRes) new PnIoCm_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block_AlarmCrRes value, Object... args) throws ParseException {
        new PnIoCm_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Block_AlarmCrResBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block_AlarmCrRes");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("alarmType");

        // Simple Field (alarmType)
        // enum based simple field with type PnIoCm_AlarmCrType
        PnIoCm_AlarmCrType alarmType = PnIoCm_AlarmCrType.enumForValue(readBuffer.readUnsignedInt("PnIoCm_AlarmCrType", 16));
        readBuffer.closeContext("alarmType");


        // Simple Field (localAlarmReference)
int localAlarmReference = readBuffer.readUnsignedInt("localAlarmReference", 16) ;

        // Simple Field (maxAlarmDataLength)
int maxAlarmDataLength = readBuffer.readUnsignedInt("maxAlarmDataLength", 16) ;
        readBuffer.closeContext("PnIoCm_Block_AlarmCrRes");
        // Create the instance
        return new PnIoCm_Block_AlarmCrResBuilder(alarmType, localAlarmReference, maxAlarmDataLength);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block_AlarmCrRes _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block_AlarmCrRes");

        // Simple Field (alarmType)
        PnIoCm_AlarmCrType alarmType = (PnIoCm_AlarmCrType) _value.getAlarmType();
        writeBuffer.pushContext("alarmType");
        // enum field with type PnIoCm_AlarmCrType
        writeBuffer.writeUnsignedInt("PnIoCm_AlarmCrType", 16, ((Number) (alarmType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(alarmType.name()));
        writeBuffer.popContext("alarmType");

        // Simple Field (localAlarmReference)
        int localAlarmReference = (int) _value.getLocalAlarmReference();
        writeBuffer.writeUnsignedInt("localAlarmReference", 16, ((Number) (localAlarmReference)).intValue());

        // Simple Field (maxAlarmDataLength)
        int maxAlarmDataLength = (int) _value.getMaxAlarmDataLength();
        writeBuffer.writeUnsignedInt("maxAlarmDataLength", 16, ((Number) (maxAlarmDataLength)).intValue());
        writeBuffer.popContext("PnIoCm_Block_AlarmCrRes");
    }

    public static class PnIoCm_Block_AlarmCrResBuilder implements PnIoCm_BlockIO.PnIoCm_BlockBuilder {
        private final PnIoCm_AlarmCrType alarmType;
        private final int localAlarmReference;
        private final int maxAlarmDataLength;

        public PnIoCm_Block_AlarmCrResBuilder(PnIoCm_AlarmCrType alarmType, int localAlarmReference, int maxAlarmDataLength) {
            this.alarmType = alarmType;
            this.localAlarmReference = localAlarmReference;
            this.maxAlarmDataLength = maxAlarmDataLength;
        }

        public PnIoCm_Block_AlarmCrRes build(short blockVersionHigh, short blockVersionLow) {
            return new PnIoCm_Block_AlarmCrRes(blockVersionHigh, blockVersionLow, alarmType, localAlarmReference, maxAlarmDataLength);
        }
    }

}
