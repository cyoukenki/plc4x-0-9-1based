/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_IpParameter extends PnDcp_Block implements Message {

    // Accessors for discriminator values.
    public PnDcp_BlockOptions getOption() {
        return PnDcp_BlockOptions.IP_OPTION;
    }
    public Short getSuboption() {
        return 2;
    }

    // Properties.
    private final boolean ipConflictDetected;
    private final boolean setViaDhcp;
    private final boolean setManually;
    private final short[] ipAddress;
    private final short[] subnetMask;
    private final short[] standardGateway;

    public PnDcp_Block_IpParameter(boolean ipConflictDetected, boolean setViaDhcp, boolean setManually, short[] ipAddress, short[] subnetMask, short[] standardGateway) {
        this.ipConflictDetected = ipConflictDetected;
        this.setViaDhcp = setViaDhcp;
        this.setManually = setManually;
        this.ipAddress = ipAddress;
        this.subnetMask = subnetMask;
        this.standardGateway = standardGateway;
    }

    public boolean getIpConflictDetected() {
        return ipConflictDetected;
    }

    public boolean getSetViaDhcp() {
        return setViaDhcp;
    }

    public boolean getSetManually() {
        return setManually;
    }

    public short[] getIpAddress() {
        return ipAddress;
    }

    public short[] getSubnetMask() {
        return subnetMask;
    }

    public short[] getStandardGateway() {
        return standardGateway;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        PnDcp_Block_IpParameter _value  = this;

        // Reserved Field (reserved)
        lengthInBits += 8;

        // Simple field (ipConflictDetected)
        lengthInBits += 1;

        // Reserved Field (reserved)
        lengthInBits += 5;

        // Simple field (setViaDhcp)
        lengthInBits += 1;

        // Simple field (setManually)
        lengthInBits += 1;

        // Array field
        if(ipAddress != null) {
            lengthInBits += 8 * ipAddress.length;
        }

        // Array field
        if(subnetMask != null) {
            lengthInBits += 8 * subnetMask.length;
        }

        // Array field
        if(standardGateway != null) {
            lengthInBits += 8 * standardGateway.length;
        }

        return lengthInBits;
    }

    @Override
    public MessageIO<PnDcp_Block, PnDcp_Block> getMessageIO() {
        return new PnDcp_BlockIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof PnDcp_Block_IpParameter)) {
            return false;
        }
        PnDcp_Block_IpParameter that = (PnDcp_Block_IpParameter) o;
        return
            (getIpConflictDetected() == that.getIpConflictDetected()) &&
            (getSetViaDhcp() == that.getSetViaDhcp()) &&
            (getSetManually() == that.getSetManually()) &&
            (getIpAddress() == that.getIpAddress()) &&
            (getSubnetMask() == that.getSubnetMask()) &&
            (getStandardGateway() == that.getStandardGateway()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getIpConflictDetected(),
            getSetViaDhcp(),
            getSetManually(),
            getIpAddress(),
            getSubnetMask(),
            getStandardGateway()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("ipConflictDetected", getIpConflictDetected())
            .append("setViaDhcp", getSetViaDhcp())
            .append("setManually", getSetManually())
            .append("ipAddress", getIpAddress())
            .append("subnetMask", getSubnetMask())
            .append("standardGateway", getStandardGateway())
            .toString();
    }

}
