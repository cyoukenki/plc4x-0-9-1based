/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_DevicePropertiesDeviceIdIO implements MessageIO<PnDcp_Block_DevicePropertiesDeviceId, PnDcp_Block_DevicePropertiesDeviceId> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Block_DevicePropertiesDeviceIdIO.class);

    @Override
    public PnDcp_Block_DevicePropertiesDeviceId parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Block_DevicePropertiesDeviceId) new PnDcp_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceId value, Object... args) throws ParseException {
        new PnDcp_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Block_DevicePropertiesDeviceIdBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_Block_DevicePropertiesDeviceId");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (vendorId)
int vendorId = readBuffer.readUnsignedInt("vendorId", 16) ;

        // Simple Field (deviceId)
int deviceId = readBuffer.readUnsignedInt("deviceId", 16) ;
        readBuffer.closeContext("PnDcp_Block_DevicePropertiesDeviceId");
        // Create the instance
        return new PnDcp_Block_DevicePropertiesDeviceIdBuilder(vendorId, deviceId);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesDeviceId _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block_DevicePropertiesDeviceId");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Simple Field (vendorId)
        int vendorId = (int) _value.getVendorId();
        writeBuffer.writeUnsignedInt("vendorId", 16, ((Number) (vendorId)).intValue());

        // Simple Field (deviceId)
        int deviceId = (int) _value.getDeviceId();
        writeBuffer.writeUnsignedInt("deviceId", 16, ((Number) (deviceId)).intValue());
        writeBuffer.popContext("PnDcp_Block_DevicePropertiesDeviceId");
    }

    public static class PnDcp_Block_DevicePropertiesDeviceIdBuilder implements PnDcp_BlockIO.PnDcp_BlockBuilder {
        private final int vendorId;
        private final int deviceId;

        public PnDcp_Block_DevicePropertiesDeviceIdBuilder(int vendorId, int deviceId) {
            this.vendorId = vendorId;
            this.deviceId = deviceId;
        }

        public PnDcp_Block_DevicePropertiesDeviceId build() {
            return new PnDcp_Block_DevicePropertiesDeviceId(vendorId, deviceId);
        }
    }

}
