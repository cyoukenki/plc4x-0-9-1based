/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_ArResIO implements MessageIO<PnIoCm_Block_ArRes, PnIoCm_Block_ArRes> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Block_ArResIO.class);

    @Override
    public PnIoCm_Block_ArRes parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Block_ArRes) new PnIoCm_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block_ArRes value, Object... args) throws ParseException {
        new PnIoCm_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Block_ArResBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block_ArRes");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("arType");

        // Simple Field (arType)
        // enum based simple field with type PnIoCm_ArType
        PnIoCm_ArType arType = PnIoCm_ArType.enumForValue(readBuffer.readUnsignedInt("PnIoCm_ArType", 16));
        readBuffer.closeContext("arType");

        readBuffer.pullContext("arUuid");

        // Simple Field (arUuid)
Uuid arUuid = UuidIO.staticParse(readBuffer ) ;        readBuffer.closeContext("arUuid");


        // Simple Field (sessionKey)
int sessionKey = readBuffer.readUnsignedInt("sessionKey", 16) ;
        readBuffer.pullContext("cmResponderMacAddr");

        // Simple Field (cmResponderMacAddr)
MacAddress cmResponderMacAddr = MacAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("cmResponderMacAddr");

        readBuffer.pullContext("cmResponderObjectUuid");

        // Simple Field (cmResponderObjectUuid)
Uuid cmResponderObjectUuid = UuidIO.staticParse(readBuffer ) ;        readBuffer.closeContext("cmResponderObjectUuid");

        readBuffer.closeContext("PnIoCm_Block_ArRes");
        // Create the instance
        return new PnIoCm_Block_ArResBuilder(arType, arUuid, sessionKey, cmResponderMacAddr, cmResponderObjectUuid);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block_ArRes _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block_ArRes");

        // Simple Field (arType)
        PnIoCm_ArType arType = (PnIoCm_ArType) _value.getArType();
        writeBuffer.pushContext("arType");
        // enum field with type PnIoCm_ArType
        writeBuffer.writeUnsignedInt("PnIoCm_ArType", 16, ((Number) (arType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(arType.name()));
        writeBuffer.popContext("arType");

        // Simple Field (arUuid)
        Uuid arUuid = (Uuid) _value.getArUuid();
        writeBuffer.pushContext("arUuid");
        UuidIO.staticSerialize(writeBuffer, arUuid);
        writeBuffer.popContext("arUuid");

        // Simple Field (sessionKey)
        int sessionKey = (int) _value.getSessionKey();
        writeBuffer.writeUnsignedInt("sessionKey", 16, ((Number) (sessionKey)).intValue());

        // Simple Field (cmResponderMacAddr)
        MacAddress cmResponderMacAddr = (MacAddress) _value.getCmResponderMacAddr();
        writeBuffer.pushContext("cmResponderMacAddr");
        MacAddressIO.staticSerialize(writeBuffer, cmResponderMacAddr);
        writeBuffer.popContext("cmResponderMacAddr");

        // Simple Field (cmResponderObjectUuid)
        Uuid cmResponderObjectUuid = (Uuid) _value.getCmResponderObjectUuid();
        writeBuffer.pushContext("cmResponderObjectUuid");
        UuidIO.staticSerialize(writeBuffer, cmResponderObjectUuid);
        writeBuffer.popContext("cmResponderObjectUuid");
        writeBuffer.popContext("PnIoCm_Block_ArRes");
    }

    public static class PnIoCm_Block_ArResBuilder implements PnIoCm_BlockIO.PnIoCm_BlockBuilder {
        private final PnIoCm_ArType arType;
        private final Uuid arUuid;
        private final int sessionKey;
        private final MacAddress cmResponderMacAddr;
        private final Uuid cmResponderObjectUuid;

        public PnIoCm_Block_ArResBuilder(PnIoCm_ArType arType, Uuid arUuid, int sessionKey, MacAddress cmResponderMacAddr, Uuid cmResponderObjectUuid) {
            this.arType = arType;
            this.arUuid = arUuid;
            this.sessionKey = sessionKey;
            this.cmResponderMacAddr = cmResponderMacAddr;
            this.cmResponderObjectUuid = cmResponderObjectUuid;
        }

        public PnIoCm_Block_ArRes build(short blockVersionHigh, short blockVersionLow) {
            return new PnIoCm_Block_ArRes(blockVersionHigh, blockVersionLow, arType, arUuid, sessionKey, cmResponderMacAddr, cmResponderObjectUuid);
        }
    }

}
