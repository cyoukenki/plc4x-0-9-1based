/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_IoCrReqIO implements MessageIO<PnIoCm_Block_IoCrReq, PnIoCm_Block_IoCrReq> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Block_IoCrReqIO.class);

    @Override
    public PnIoCm_Block_IoCrReq parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Block_IoCrReq) new PnIoCm_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Block_IoCrReq value, Object... args) throws ParseException {
        new PnIoCm_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Block_IoCrReqBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Block_IoCrReq");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("ioCrType");

        // Simple Field (ioCrType)
        // enum based simple field with type PnIoCm_IoCrType
        PnIoCm_IoCrType ioCrType = PnIoCm_IoCrType.enumForValue(readBuffer.readUnsignedInt("PnIoCm_IoCrType", 16));
        readBuffer.closeContext("ioCrType");


        // Simple Field (ioCrReference)
int ioCrReference = readBuffer.readUnsignedInt("ioCrReference", 16) ;

        // Simple Field (lt)
int lt = readBuffer.readUnsignedInt("lt", 16) ;

        // Simple Field (fullSubFrameStructure)
boolean fullSubFrameStructure = readBuffer.readBit("fullSubFrameStructure") ;

        // Simple Field (distributedSubFrameWatchDog)
boolean distributedSubFrameWatchDog = readBuffer.readBit("distributedSubFrameWatchDog") ;

        // Simple Field (fastForwardingMacAdr)
boolean fastForwardingMacAdr = readBuffer.readBit("fastForwardingMacAdr") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            long reserved = readBuffer.readUnsignedLong("reserved", 17);
            if(reserved != (long) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (mediaRedundancy)
boolean mediaRedundancy = readBuffer.readBit("mediaRedundancy") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 7);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        readBuffer.pullContext("rtClass");

        // Simple Field (rtClass)
        // enum based simple field with type PnIoCm_RtClass
        PnIoCm_RtClass rtClass = PnIoCm_RtClass.enumForValue(readBuffer.readUnsignedByte("PnIoCm_RtClass", 4));
        readBuffer.closeContext("rtClass");


        // Simple Field (dataLength)
int dataLength = readBuffer.readUnsignedInt("dataLength", 16) ;

        // Simple Field (frameId)
int frameId = readBuffer.readUnsignedInt("frameId", 16) ;

        // Simple Field (sendClockFactor)
int sendClockFactor = readBuffer.readUnsignedInt("sendClockFactor", 16) ;

        // Simple Field (reductionRatio)
int reductionRatio = readBuffer.readUnsignedInt("reductionRatio", 16) ;

        // Simple Field (phase)
int phase = readBuffer.readUnsignedInt("phase", 16) ;

        // Simple Field (sequence)
int sequence = readBuffer.readUnsignedInt("sequence", 16) ;

        // Simple Field (frameSendOffset)
long frameSendOffset = readBuffer.readUnsignedLong("frameSendOffset", 32) ;

        // Simple Field (watchDogFactor)
int watchDogFactor = readBuffer.readUnsignedInt("watchDogFactor", 16) ;

        // Simple Field (dataHoldFactor)
int dataHoldFactor = readBuffer.readUnsignedInt("dataHoldFactor", 16) ;

        // Simple Field (ioCrTagHeader)
int ioCrTagHeader = readBuffer.readUnsignedInt("ioCrTagHeader", 16) ;
        readBuffer.pullContext("ioCrMulticastMacAdr");

        // Simple Field (ioCrMulticastMacAdr)
MacAddress ioCrMulticastMacAdr = MacAddressIO.staticParse(readBuffer ) ;        readBuffer.closeContext("ioCrMulticastMacAdr");

        // Implicit Field (numberOfApis) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numberOfApis = readBuffer.readUnsignedInt("numberOfApis", 16);
        // Array field (apis)
        readBuffer.pullContext("apis", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numberOfApis > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numberOfApis) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        PnIoCm_IoCrBlockReqApi[] apis;
        {
            int itemCount = Math.max(0, (int) numberOfApis);
            apis = new PnIoCm_IoCrBlockReqApi[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
apis[curItem] = PnIoCm_IoCrBlockReqApiIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("apis", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnIoCm_Block_IoCrReq");
        // Create the instance
        return new PnIoCm_Block_IoCrReqBuilder(ioCrType, ioCrReference, lt, fullSubFrameStructure, distributedSubFrameWatchDog, fastForwardingMacAdr, mediaRedundancy, rtClass, dataLength, frameId, sendClockFactor, reductionRatio, phase, sequence, frameSendOffset, watchDogFactor, dataHoldFactor, ioCrTagHeader, ioCrMulticastMacAdr, apis);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Block_IoCrReq _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Block_IoCrReq");

        // Simple Field (ioCrType)
        PnIoCm_IoCrType ioCrType = (PnIoCm_IoCrType) _value.getIoCrType();
        writeBuffer.pushContext("ioCrType");
        // enum field with type PnIoCm_IoCrType
        writeBuffer.writeUnsignedInt("PnIoCm_IoCrType", 16, ((Number) (ioCrType.getValue())).intValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(ioCrType.name()));
        writeBuffer.popContext("ioCrType");

        // Simple Field (ioCrReference)
        int ioCrReference = (int) _value.getIoCrReference();
        writeBuffer.writeUnsignedInt("ioCrReference", 16, ((Number) (ioCrReference)).intValue());

        // Simple Field (lt)
        int lt = (int) _value.getLt();
        writeBuffer.writeUnsignedInt("lt", 16, ((Number) (lt)).intValue());

        // Simple Field (fullSubFrameStructure)
        boolean fullSubFrameStructure = (boolean) _value.getFullSubFrameStructure();
        writeBuffer.writeBit("fullSubFrameStructure", (boolean) (fullSubFrameStructure));

        // Simple Field (distributedSubFrameWatchDog)
        boolean distributedSubFrameWatchDog = (boolean) _value.getDistributedSubFrameWatchDog();
        writeBuffer.writeBit("distributedSubFrameWatchDog", (boolean) (distributedSubFrameWatchDog));

        // Simple Field (fastForwardingMacAdr)
        boolean fastForwardingMacAdr = (boolean) _value.getFastForwardingMacAdr();
        writeBuffer.writeBit("fastForwardingMacAdr", (boolean) (fastForwardingMacAdr));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedLong("reserved", 17, ((Number) (long) 0x0000).longValue());

        // Simple Field (mediaRedundancy)
        boolean mediaRedundancy = (boolean) _value.getMediaRedundancy();
        writeBuffer.writeBit("mediaRedundancy", (boolean) (mediaRedundancy));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 7, ((Number) (short) 0x00).shortValue());

        // Simple Field (rtClass)
        PnIoCm_RtClass rtClass = (PnIoCm_RtClass) _value.getRtClass();
        writeBuffer.pushContext("rtClass");
        // enum field with type PnIoCm_RtClass
        writeBuffer.writeUnsignedByte("PnIoCm_RtClass", 4, ((Number) (rtClass.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(rtClass.name()));
        writeBuffer.popContext("rtClass");

        // Simple Field (dataLength)
        int dataLength = (int) _value.getDataLength();
        writeBuffer.writeUnsignedInt("dataLength", 16, ((Number) (dataLength)).intValue());

        // Simple Field (frameId)
        int frameId = (int) _value.getFrameId();
        writeBuffer.writeUnsignedInt("frameId", 16, ((Number) (frameId)).intValue());

        // Simple Field (sendClockFactor)
        int sendClockFactor = (int) _value.getSendClockFactor();
        writeBuffer.writeUnsignedInt("sendClockFactor", 16, ((Number) (sendClockFactor)).intValue());

        // Simple Field (reductionRatio)
        int reductionRatio = (int) _value.getReductionRatio();
        writeBuffer.writeUnsignedInt("reductionRatio", 16, ((Number) (reductionRatio)).intValue());

        // Simple Field (phase)
        int phase = (int) _value.getPhase();
        writeBuffer.writeUnsignedInt("phase", 16, ((Number) (phase)).intValue());

        // Simple Field (sequence)
        int sequence = (int) _value.getSequence();
        writeBuffer.writeUnsignedInt("sequence", 16, ((Number) (sequence)).intValue());

        // Simple Field (frameSendOffset)
        long frameSendOffset = (long) _value.getFrameSendOffset();
        writeBuffer.writeUnsignedLong("frameSendOffset", 32, ((Number) (frameSendOffset)).longValue());

        // Simple Field (watchDogFactor)
        int watchDogFactor = (int) _value.getWatchDogFactor();
        writeBuffer.writeUnsignedInt("watchDogFactor", 16, ((Number) (watchDogFactor)).intValue());

        // Simple Field (dataHoldFactor)
        int dataHoldFactor = (int) _value.getDataHoldFactor();
        writeBuffer.writeUnsignedInt("dataHoldFactor", 16, ((Number) (dataHoldFactor)).intValue());

        // Simple Field (ioCrTagHeader)
        int ioCrTagHeader = (int) _value.getIoCrTagHeader();
        writeBuffer.writeUnsignedInt("ioCrTagHeader", 16, ((Number) (ioCrTagHeader)).intValue());

        // Simple Field (ioCrMulticastMacAdr)
        MacAddress ioCrMulticastMacAdr = (MacAddress) _value.getIoCrMulticastMacAdr();
        writeBuffer.pushContext("ioCrMulticastMacAdr");
        MacAddressIO.staticSerialize(writeBuffer, ioCrMulticastMacAdr);
        writeBuffer.popContext("ioCrMulticastMacAdr");

        // Implicit Field (numberOfApis) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int numberOfApis = (int) (COUNT(_value.getApis()));
        writeBuffer.writeUnsignedInt("numberOfApis", 16, ((Number) (numberOfApis)).intValue());

        // Array Field (apis)
        if(_value.getApis() != null) {
            writeBuffer.pushContext("apis", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getApis().length;
            int curItem = 0;
            for(PnIoCm_IoCrBlockReqApi element : _value.getApis()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnIoCm_IoCrBlockReqApiIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("apis", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnIoCm_Block_IoCrReq");
    }

    public static class PnIoCm_Block_IoCrReqBuilder implements PnIoCm_BlockIO.PnIoCm_BlockBuilder {
        private final PnIoCm_IoCrType ioCrType;
        private final int ioCrReference;
        private final int lt;
        private final boolean fullSubFrameStructure;
        private final boolean distributedSubFrameWatchDog;
        private final boolean fastForwardingMacAdr;
        private final boolean mediaRedundancy;
        private final PnIoCm_RtClass rtClass;
        private final int dataLength;
        private final int frameId;
        private final int sendClockFactor;
        private final int reductionRatio;
        private final int phase;
        private final int sequence;
        private final long frameSendOffset;
        private final int watchDogFactor;
        private final int dataHoldFactor;
        private final int ioCrTagHeader;
        private final MacAddress ioCrMulticastMacAdr;
        private final PnIoCm_IoCrBlockReqApi[] apis;

        public PnIoCm_Block_IoCrReqBuilder(PnIoCm_IoCrType ioCrType, int ioCrReference, int lt, boolean fullSubFrameStructure, boolean distributedSubFrameWatchDog, boolean fastForwardingMacAdr, boolean mediaRedundancy, PnIoCm_RtClass rtClass, int dataLength, int frameId, int sendClockFactor, int reductionRatio, int phase, int sequence, long frameSendOffset, int watchDogFactor, int dataHoldFactor, int ioCrTagHeader, MacAddress ioCrMulticastMacAdr, PnIoCm_IoCrBlockReqApi[] apis) {
            this.ioCrType = ioCrType;
            this.ioCrReference = ioCrReference;
            this.lt = lt;
            this.fullSubFrameStructure = fullSubFrameStructure;
            this.distributedSubFrameWatchDog = distributedSubFrameWatchDog;
            this.fastForwardingMacAdr = fastForwardingMacAdr;
            this.mediaRedundancy = mediaRedundancy;
            this.rtClass = rtClass;
            this.dataLength = dataLength;
            this.frameId = frameId;
            this.sendClockFactor = sendClockFactor;
            this.reductionRatio = reductionRatio;
            this.phase = phase;
            this.sequence = sequence;
            this.frameSendOffset = frameSendOffset;
            this.watchDogFactor = watchDogFactor;
            this.dataHoldFactor = dataHoldFactor;
            this.ioCrTagHeader = ioCrTagHeader;
            this.ioCrMulticastMacAdr = ioCrMulticastMacAdr;
            this.apis = apis;
        }

        public PnIoCm_Block_IoCrReq build(short blockVersionHigh, short blockVersionLow) {
            return new PnIoCm_Block_IoCrReq(blockVersionHigh, blockVersionLow, ioCrType, ioCrReference, lt, fullSubFrameStructure, distributedSubFrameWatchDog, fastForwardingMacAdr, mediaRedundancy, rtClass, dataLength, frameId, sendClockFactor, reductionRatio, phase, sequence, frameSendOffset, watchDogFactor, dataHoldFactor, ioCrTagHeader, ioCrMulticastMacAdr, apis);
        }
    }

}
