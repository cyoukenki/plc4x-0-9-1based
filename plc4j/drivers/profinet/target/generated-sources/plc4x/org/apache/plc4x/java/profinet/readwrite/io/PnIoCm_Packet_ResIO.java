/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Packet_ResIO implements MessageIO<PnIoCm_Packet_Res, PnIoCm_Packet_Res> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Packet_ResIO.class);

    @Override
    public PnIoCm_Packet_Res parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Packet_Res) new PnIoCm_PacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Packet_Res value, Object... args) throws ParseException {
        new PnIoCm_PacketIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Packet_ResBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Packet_Res");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (errorCode2)
short errorCode2 = readBuffer.readUnsignedShort("errorCode2", 8) ;

        // Simple Field (errorCode1)
short errorCode1 = readBuffer.readUnsignedShort("errorCode1", 8) ;

        // Simple Field (errorDecode)
short errorDecode = readBuffer.readUnsignedShort("errorDecode", 8) ;

        // Simple Field (errorCode)
short errorCode = readBuffer.readUnsignedShort("errorCode", 8) ;
        readBuffer.closeContext("PnIoCm_Packet_Res");
        // Create the instance
        return new PnIoCm_Packet_ResBuilder(errorCode2, errorCode1, errorDecode, errorCode);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Packet_Res _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Packet_Res");

        // Simple Field (errorCode2)
        short errorCode2 = (short) _value.getErrorCode2();
        writeBuffer.writeUnsignedShort("errorCode2", 8, ((Number) (errorCode2)).shortValue());

        // Simple Field (errorCode1)
        short errorCode1 = (short) _value.getErrorCode1();
        writeBuffer.writeUnsignedShort("errorCode1", 8, ((Number) (errorCode1)).shortValue());

        // Simple Field (errorDecode)
        short errorDecode = (short) _value.getErrorDecode();
        writeBuffer.writeUnsignedShort("errorDecode", 8, ((Number) (errorDecode)).shortValue());

        // Simple Field (errorCode)
        short errorCode = (short) _value.getErrorCode();
        writeBuffer.writeUnsignedShort("errorCode", 8, ((Number) (errorCode)).shortValue());
        writeBuffer.popContext("PnIoCm_Packet_Res");
    }

    public static class PnIoCm_Packet_ResBuilder implements PnIoCm_PacketIO.PnIoCm_PacketBuilder {
        private final short errorCode2;
        private final short errorCode1;
        private final short errorDecode;
        private final short errorCode;

        public PnIoCm_Packet_ResBuilder(short errorCode2, short errorCode1, short errorDecode, short errorCode) {
            this.errorCode2 = errorCode2;
            this.errorCode1 = errorCode1;
            this.errorDecode = errorDecode;
            this.errorCode = errorCode;
        }

        public PnIoCm_Packet_Res build(long argsLength, long arrayMaximumCount, long arrayOffset, long arrayActualCount, PnIoCm_Block[] blocks) {
            return new PnIoCm_Packet_Res(argsLength, arrayMaximumCount, arrayOffset, arrayActualCount, blocks, errorCode2, errorCode1, errorDecode, errorCode);
        }
    }

}
