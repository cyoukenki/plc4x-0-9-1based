/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_PacketIO implements MessageIO<PnIoCm_Packet, PnIoCm_Packet> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_PacketIO.class);

    @Override
    public PnIoCm_Packet parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        DceRpc_PacketType packetType;
        if(args[0] instanceof DceRpc_PacketType) {
            packetType = (DceRpc_PacketType) args[0];
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type DceRpc_PacketType or a string which is parseable but was " + args[0].getClass().getName());
        }
        return PnIoCm_PacketIO.staticParse(readBuffer, packetType);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Packet value, Object... args) throws ParseException {
        PnIoCm_PacketIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_Packet staticParse(ReadBuffer readBuffer, DceRpc_PacketType packetType) throws ParseException {
        readBuffer.pullContext("PnIoCm_Packet");
        int startPos = readBuffer.getPos();
        int curPos;

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        PnIoCm_PacketBuilder builder = null;
                if(EvaluationHelper.equals(packetType, DceRpc_PacketType.REQUEST)) {
            builder = PnIoCm_Packet_ReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(packetType, DceRpc_PacketType.RESPONSE)) {
            builder = PnIoCm_Packet_ResIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }


        // Simple Field (argsLength)
long argsLength = readBuffer.readUnsignedLong("argsLength", 32) ;

        // Simple Field (arrayMaximumCount)
long arrayMaximumCount = readBuffer.readUnsignedLong("arrayMaximumCount", 32) ;

        // Simple Field (arrayOffset)
long arrayOffset = readBuffer.readUnsignedLong("arrayOffset", 32) ;

        // Simple Field (arrayActualCount)
long arrayActualCount = readBuffer.readUnsignedLong("arrayActualCount", 32) ;        // Array field (blocks)
        readBuffer.pullContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _blocksLength = argsLength;
        List<PnIoCm_Block> _blocksList = new LinkedList<>();
        long blocksEndPos = readBuffer.getPos() + _blocksLength;
        while(readBuffer.getPos() < blocksEndPos) {
            _blocksList.add(PnIoCm_BlockIO.staticParse(readBuffer));
        }
        PnIoCm_Block[] blocks = _blocksList.toArray(new PnIoCm_Block[0]);
            readBuffer.closeContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("PnIoCm_Packet");
        // Create the instance
        return builder.build(argsLength, arrayMaximumCount, arrayOffset, arrayActualCount, blocks);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Packet _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Packet");

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof PnIoCm_Packet_Req) {
            PnIoCm_Packet_ReqIO.staticSerialize(writeBuffer, (PnIoCm_Packet_Req) _value);
        } else 
        if(_value instanceof PnIoCm_Packet_Res) {
            PnIoCm_Packet_ResIO.staticSerialize(writeBuffer, (PnIoCm_Packet_Res) _value);
        }

        // Simple Field (argsLength)
        long argsLength = (long) _value.getArgsLength();
        writeBuffer.writeUnsignedLong("argsLength", 32, ((Number) (argsLength)).longValue());

        // Simple Field (arrayMaximumCount)
        long arrayMaximumCount = (long) _value.getArrayMaximumCount();
        writeBuffer.writeUnsignedLong("arrayMaximumCount", 32, ((Number) (arrayMaximumCount)).longValue());

        // Simple Field (arrayOffset)
        long arrayOffset = (long) _value.getArrayOffset();
        writeBuffer.writeUnsignedLong("arrayOffset", 32, ((Number) (arrayOffset)).longValue());

        // Simple Field (arrayActualCount)
        long arrayActualCount = (long) _value.getArrayActualCount();
        writeBuffer.writeUnsignedLong("arrayActualCount", 32, ((Number) (arrayActualCount)).longValue());

        // Array Field (blocks)
        if(_value.getBlocks() != null) {
            writeBuffer.pushContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getBlocks().length;
            int curItem = 0;
            for(PnIoCm_Block element : _value.getBlocks()) {
                boolean lastItem = curItem == (itemCount - 1);
                PnIoCm_BlockIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("blocks", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnIoCm_Packet");
    }

    public static interface PnIoCm_PacketBuilder {
        PnIoCm_Packet build(long argsLength, long arrayMaximumCount, long arrayOffset, long arrayActualCount, PnIoCm_Block[] blocks);
    }

}
