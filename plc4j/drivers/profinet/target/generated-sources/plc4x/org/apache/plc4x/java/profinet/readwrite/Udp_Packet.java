/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class Udp_Packet implements Message {


    // Properties.
    private final int sourcePort;
    private final int destinationPort;
    private final DceRpc_Packet payload;

    public Udp_Packet(int sourcePort, int destinationPort, DceRpc_Packet payload) {
        this.sourcePort = sourcePort;
        this.destinationPort = destinationPort;
        this.payload = payload;
    }

    public int getSourcePort() {
        return sourcePort;
    }

    public int getDestinationPort() {
        return destinationPort;
    }

    public DceRpc_Packet getPayload() {
        return payload;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        Udp_Packet _value  = this;

        // Simple field (sourcePort)
        lengthInBits += 16;

        // Simple field (destinationPort)
        lengthInBits += 16;

        // Implicit Field (packetLength)
        lengthInBits += 16;
        //int packetLength = (int) (_value.getLengthInBytes());

        // Simple field (payload)
        lengthInBits += payload.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<Udp_Packet, Udp_Packet> getMessageIO() {
        return new Udp_PacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Udp_Packet)) {
            return false;
        }
        Udp_Packet that = (Udp_Packet) o;
        return
            (getSourcePort() == that.getSourcePort()) &&
            (getDestinationPort() == that.getDestinationPort()) &&
            (getPayload() == that.getPayload()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getSourcePort(),
            getDestinationPort(),
            getPayload()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("sourcePort", getSourcePort())
            .append("destinationPort", getDestinationPort())
            .append("payload", getPayload())
            .toString();
    }

}
