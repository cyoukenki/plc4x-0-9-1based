/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_ModuleDiffBlockApi_SubmoduleIO implements MessageIO<PnIoCm_ModuleDiffBlockApi_Submodule, PnIoCm_ModuleDiffBlockApi_Submodule> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_ModuleDiffBlockApi_SubmoduleIO.class);

    @Override
    public PnIoCm_ModuleDiffBlockApi_Submodule parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnIoCm_ModuleDiffBlockApi_SubmoduleIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_ModuleDiffBlockApi_Submodule value, Object... args) throws ParseException {
        PnIoCm_ModuleDiffBlockApi_SubmoduleIO.staticSerialize(writeBuffer, value);
    }

    public static PnIoCm_ModuleDiffBlockApi_Submodule staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_ModuleDiffBlockApi_Submodule");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (subslotNumber)
int subslotNumber = readBuffer.readUnsignedInt("subslotNumber", 16) ;

        // Simple Field (submoduleIdentNumber)
long submoduleIdentNumber = readBuffer.readUnsignedLong("submoduleIdentNumber", 32) ;

        // Simple Field (codingUsesIdentInfo)
boolean codingUsesIdentInfo = readBuffer.readBit("codingUsesIdentInfo") ;
        readBuffer.pullContext("identInfo");

        // Simple Field (identInfo)
        // enum based simple field with type PnIoCm_IdentInfo
        PnIoCm_IdentInfo identInfo = PnIoCm_IdentInfo.enumForValue(readBuffer.readUnsignedByte("PnIoCm_IdentInfo", 4));
        readBuffer.closeContext("identInfo");

        readBuffer.pullContext("arInfo");

        // Simple Field (arInfo)
        // enum based simple field with type PnIoCm_ArInfo
        PnIoCm_ArInfo arInfo = PnIoCm_ArInfo.enumForValue(readBuffer.readUnsignedByte("PnIoCm_ArInfo", 4));
        readBuffer.closeContext("arInfo");


        // Simple Field (diagInfoAvailable)
boolean diagInfoAvailable = readBuffer.readBit("diagInfoAvailable") ;

        // Simple Field (maintenanceDemanded)
boolean maintenanceDemanded = readBuffer.readBit("maintenanceDemanded") ;

        // Simple Field (maintenanceRequired)
boolean maintenanceRequired = readBuffer.readBit("maintenanceRequired") ;

        // Simple Field (qualifiedInfo)
boolean qualifiedInfo = readBuffer.readBit("qualifiedInfo") ;
        readBuffer.pullContext("addInfo");

        // Simple Field (addInfo)
        // enum based simple field with type PnIoCm_AddInfo
        PnIoCm_AddInfo addInfo = PnIoCm_AddInfo.enumForValue(readBuffer.readUnsignedByte("PnIoCm_AddInfo", 3));
        readBuffer.closeContext("addInfo");

        readBuffer.closeContext("PnIoCm_ModuleDiffBlockApi_Submodule");
        // Create the instance
        return new PnIoCm_ModuleDiffBlockApi_Submodule(subslotNumber, submoduleIdentNumber, codingUsesIdentInfo, identInfo, arInfo, diagInfoAvailable, maintenanceDemanded, maintenanceRequired, qualifiedInfo, addInfo);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_ModuleDiffBlockApi_Submodule _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_ModuleDiffBlockApi_Submodule");

        // Simple Field (subslotNumber)
        int subslotNumber = (int) _value.getSubslotNumber();
        writeBuffer.writeUnsignedInt("subslotNumber", 16, ((Number) (subslotNumber)).intValue());

        // Simple Field (submoduleIdentNumber)
        long submoduleIdentNumber = (long) _value.getSubmoduleIdentNumber();
        writeBuffer.writeUnsignedLong("submoduleIdentNumber", 32, ((Number) (submoduleIdentNumber)).longValue());

        // Simple Field (codingUsesIdentInfo)
        boolean codingUsesIdentInfo = (boolean) _value.getCodingUsesIdentInfo();
        writeBuffer.writeBit("codingUsesIdentInfo", (boolean) (codingUsesIdentInfo));

        // Simple Field (identInfo)
        PnIoCm_IdentInfo identInfo = (PnIoCm_IdentInfo) _value.getIdentInfo();
        writeBuffer.pushContext("identInfo");
        // enum field with type PnIoCm_IdentInfo
        writeBuffer.writeUnsignedByte("PnIoCm_IdentInfo", 4, ((Number) (identInfo.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(identInfo.name()));
        writeBuffer.popContext("identInfo");

        // Simple Field (arInfo)
        PnIoCm_ArInfo arInfo = (PnIoCm_ArInfo) _value.getArInfo();
        writeBuffer.pushContext("arInfo");
        // enum field with type PnIoCm_ArInfo
        writeBuffer.writeUnsignedByte("PnIoCm_ArInfo", 4, ((Number) (arInfo.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(arInfo.name()));
        writeBuffer.popContext("arInfo");

        // Simple Field (diagInfoAvailable)
        boolean diagInfoAvailable = (boolean) _value.getDiagInfoAvailable();
        writeBuffer.writeBit("diagInfoAvailable", (boolean) (diagInfoAvailable));

        // Simple Field (maintenanceDemanded)
        boolean maintenanceDemanded = (boolean) _value.getMaintenanceDemanded();
        writeBuffer.writeBit("maintenanceDemanded", (boolean) (maintenanceDemanded));

        // Simple Field (maintenanceRequired)
        boolean maintenanceRequired = (boolean) _value.getMaintenanceRequired();
        writeBuffer.writeBit("maintenanceRequired", (boolean) (maintenanceRequired));

        // Simple Field (qualifiedInfo)
        boolean qualifiedInfo = (boolean) _value.getQualifiedInfo();
        writeBuffer.writeBit("qualifiedInfo", (boolean) (qualifiedInfo));

        // Simple Field (addInfo)
        PnIoCm_AddInfo addInfo = (PnIoCm_AddInfo) _value.getAddInfo();
        writeBuffer.pushContext("addInfo");
        // enum field with type PnIoCm_AddInfo
        writeBuffer.writeUnsignedByte("PnIoCm_AddInfo", 3, ((Number) (addInfo.getValue())).byteValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(addInfo.name()));
        writeBuffer.popContext("addInfo");
        writeBuffer.popContext("PnIoCm_ModuleDiffBlockApi_Submodule");
    }

}
