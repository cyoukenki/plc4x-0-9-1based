/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Submodule_NoInputNoOutputDataIO implements MessageIO<PnIoCm_Submodule_NoInputNoOutputData, PnIoCm_Submodule_NoInputNoOutputData> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnIoCm_Submodule_NoInputNoOutputDataIO.class);

    @Override
    public PnIoCm_Submodule_NoInputNoOutputData parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnIoCm_Submodule_NoInputNoOutputData) new PnIoCm_SubmoduleIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnIoCm_Submodule_NoInputNoOutputData value, Object... args) throws ParseException {
        new PnIoCm_SubmoduleIO().serialize(writeBuffer, value, args);
    }

    public static PnIoCm_Submodule_NoInputNoOutputDataBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnIoCm_Submodule_NoInputNoOutputData");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (dataDescription)
        int dataDescription = readBuffer.readUnsignedInt("dataDescription", 16);
        if(dataDescription != PnIoCm_Submodule_NoInputNoOutputData.DATADESCRIPTION) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_NoInputNoOutputData.DATADESCRIPTION + " but got " + dataDescription);
        }

        // Const Field (submoduleDataLength)
        int submoduleDataLength = readBuffer.readUnsignedInt("submoduleDataLength", 16);
        if(submoduleDataLength != PnIoCm_Submodule_NoInputNoOutputData.SUBMODULEDATALENGTH) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_NoInputNoOutputData.SUBMODULEDATALENGTH + " but got " + submoduleDataLength);
        }

        // Const Field (lengthIoCs)
        short lengthIoCs = readBuffer.readUnsignedShort("lengthIoCs", 8);
        if(lengthIoCs != PnIoCm_Submodule_NoInputNoOutputData.LENGTHIOCS) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_NoInputNoOutputData.LENGTHIOCS + " but got " + lengthIoCs);
        }

        // Const Field (lengthIoPs)
        short lengthIoPs = readBuffer.readUnsignedShort("lengthIoPs", 8);
        if(lengthIoPs != PnIoCm_Submodule_NoInputNoOutputData.LENGTHIOPS) {
            throw new ParseException("Expected constant value " + PnIoCm_Submodule_NoInputNoOutputData.LENGTHIOPS + " but got " + lengthIoPs);
        }

        readBuffer.closeContext("PnIoCm_Submodule_NoInputNoOutputData");
        // Create the instance
        return new PnIoCm_Submodule_NoInputNoOutputDataBuilder();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnIoCm_Submodule_NoInputNoOutputData _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnIoCm_Submodule_NoInputNoOutputData");

        // Const Field (dataDescription)
        writeBuffer.writeUnsignedInt("dataDescription", 16, ((Number) 0x0001).intValue());

        // Const Field (submoduleDataLength)
        writeBuffer.writeUnsignedInt("submoduleDataLength", 16, ((Number) 0x0000).intValue());

        // Const Field (lengthIoCs)
        writeBuffer.writeUnsignedShort("lengthIoCs", 8, ((Number) 0x01).shortValue());

        // Const Field (lengthIoPs)
        writeBuffer.writeUnsignedShort("lengthIoPs", 8, ((Number) 0x01).shortValue());
        writeBuffer.popContext("PnIoCm_Submodule_NoInputNoOutputData");
    }

    public static class PnIoCm_Submodule_NoInputNoOutputDataBuilder implements PnIoCm_SubmoduleIO.PnIoCm_SubmoduleBuilder {

        public PnIoCm_Submodule_NoInputNoOutputDataBuilder() {
        }

        public PnIoCm_Submodule_NoInputNoOutputData build(int slotNumber, long submoduleIdentNumber, boolean discardIoxs, boolean reduceOutputModuleDataLength, boolean reduceInputModuleDataLength, boolean sharedInput) {
            return new PnIoCm_Submodule_NoInputNoOutputData(slotNumber, submoduleIdentNumber, discardIoxs, reduceOutputModuleDataLength, reduceInputModuleDataLength, sharedInput);
        }
    }

}
