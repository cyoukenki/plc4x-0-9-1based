/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_Block_DevicePropertiesNameOfStationIO implements MessageIO<PnDcp_Block_DevicePropertiesNameOfStation, PnDcp_Block_DevicePropertiesNameOfStation> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_Block_DevicePropertiesNameOfStationIO.class);

    @Override
    public PnDcp_Block_DevicePropertiesNameOfStation parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (PnDcp_Block_DevicePropertiesNameOfStation) new PnDcp_BlockIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesNameOfStation value, Object... args) throws ParseException {
        new PnDcp_BlockIO().serialize(writeBuffer, value, args);
    }

    public static PnDcp_Block_DevicePropertiesNameOfStationBuilder staticParse(ReadBuffer readBuffer, Integer blockLength) throws ParseException {
        readBuffer.pullContext("PnDcp_Block_DevicePropertiesNameOfStation");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            int reserved = readBuffer.readUnsignedInt("reserved", 16);
            if(reserved != (int) 0x0000) {
                LOGGER.info("Expected constant value " + 0x0000 + " but got " + reserved + " for reserved field.");
            }
        }
        // Byte Array field (nameOfStation)
        int numberOfBytes = (blockLength) - (2);
        byte[] nameOfStation = readBuffer.readByteArray("nameOfStation", numberOfBytes);

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((org.apache.plc4x.java.profinet.utils.StaticHelper.arrayLength(nameOfStation)) % (2));
            while ((readBuffer.hasMore(8)) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                readBuffer.readUnsignedShort("", 8);
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }

        readBuffer.closeContext("PnDcp_Block_DevicePropertiesNameOfStation");
        // Create the instance
        return new PnDcp_Block_DevicePropertiesNameOfStationBuilder(nameOfStation);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_Block_DevicePropertiesNameOfStation _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_Block_DevicePropertiesNameOfStation");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedInt("reserved", 16, ((Number) (int) 0x0000).intValue());

        // Array Field (nameOfStation)
        if(_value.getNameOfStation() != null) {
            // Byte Array field (nameOfStation)
            writeBuffer.writeByteArray("nameOfStation", _value.getNameOfStation());
        }

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) ((org.apache.plc4x.java.profinet.utils.StaticHelper.arrayLength(_value.getNameOfStation())) % (2));
            while (_timesPadding-- > 0) {
                short _paddingValue = (short) (0);
                writeBuffer.writeUnsignedShort("", 8, ((Number) (_paddingValue)).shortValue());
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("PnDcp_Block_DevicePropertiesNameOfStation");
    }

    public static class PnDcp_Block_DevicePropertiesNameOfStationBuilder implements PnDcp_BlockIO.PnDcp_BlockBuilder {
        private final byte[] nameOfStation;

        public PnDcp_Block_DevicePropertiesNameOfStationBuilder(byte[] nameOfStation) {
            this.nameOfStation = nameOfStation;
        }

        public PnDcp_Block_DevicePropertiesNameOfStation build() {
            return new PnDcp_Block_DevicePropertiesNameOfStation(nameOfStation);
        }
    }

}
