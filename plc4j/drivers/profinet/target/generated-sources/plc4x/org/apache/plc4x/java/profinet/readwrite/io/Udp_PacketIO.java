/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;
import org.apache.plc4x.java.profinet.readwrite.io.*;
import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class Udp_PacketIO implements MessageIO<Udp_Packet, Udp_Packet> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Udp_PacketIO.class);

    @Override
    public Udp_Packet parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return Udp_PacketIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Udp_Packet value, Object... args) throws ParseException {
        Udp_PacketIO.staticSerialize(writeBuffer, value);
    }

    public static Udp_Packet staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Udp_Packet");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (sourcePort)
int sourcePort = readBuffer.readUnsignedInt("sourcePort", 16) ;

        // Simple Field (destinationPort)
int destinationPort = readBuffer.readUnsignedInt("destinationPort", 16) ;
        // Implicit Field (packetLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int packetLength = readBuffer.readUnsignedInt("packetLength", 16);

        readBuffer.pullContext("payload");

        // Simple Field (payload)
DceRpc_Packet payload = DceRpc_PacketIO.staticParse(readBuffer ) ;        readBuffer.closeContext("payload");

        readBuffer.closeContext("Udp_Packet");
        // Create the instance
        return new Udp_Packet(sourcePort, destinationPort, payload);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Udp_Packet _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Udp_Packet");

        // Simple Field (sourcePort)
        int sourcePort = (int) _value.getSourcePort();
        writeBuffer.writeUnsignedInt("sourcePort", 16, ((Number) (sourcePort)).intValue());

        // Simple Field (destinationPort)
        int destinationPort = (int) _value.getDestinationPort();
        writeBuffer.writeUnsignedInt("destinationPort", 16, ((Number) (destinationPort)).intValue());

        // Implicit Field (packetLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int packetLength = (int) (_value.getLengthInBytes());
        writeBuffer.writeUnsignedInt("packetLength", 16, ((Number) (packetLength)).intValue());

        // Simple Field (payload)
        DceRpc_Packet payload = (DceRpc_Packet) _value.getPayload();
        writeBuffer.pushContext("payload");
        DceRpc_PacketIO.staticSerialize(writeBuffer, payload);
        writeBuffer.popContext("payload");
        writeBuffer.popContext("Udp_Packet");
    }

}
