/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.profinet.readwrite.*;

import org.apache.plc4x.java.profinet.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class PnDcp_ServiceTypeIO implements MessageIO<PnDcp_ServiceType, PnDcp_ServiceType> {

    private static final Logger LOGGER = LoggerFactory.getLogger(PnDcp_ServiceTypeIO.class);

    @Override
    public PnDcp_ServiceType parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return PnDcp_ServiceTypeIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, PnDcp_ServiceType value, Object... args) throws ParseException {
        PnDcp_ServiceTypeIO.staticSerialize(writeBuffer, value);
    }

    public static PnDcp_ServiceType staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("PnDcp_ServiceType");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 5);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (notSupported)
boolean notSupported = readBuffer.readBit("notSupported") ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            byte reserved = readBuffer.readUnsignedByte("reserved", 1);
            if(reserved != (byte) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (response)
boolean response = readBuffer.readBit("response") ;
        readBuffer.closeContext("PnDcp_ServiceType");
        // Create the instance
        return new PnDcp_ServiceType(notSupported, response);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PnDcp_ServiceType _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("PnDcp_ServiceType");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 5, ((Number) (short) 0x00).shortValue());

        // Simple Field (notSupported)
        boolean notSupported = (boolean) _value.getNotSupported();
        writeBuffer.writeBit("notSupported", (boolean) (notSupported));

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedByte("reserved", 1, ((Number) (byte) 0x00).byteValue());

        // Simple Field (response)
        boolean response = (boolean) _value.getResponse();
        writeBuffer.writeBit("response", (boolean) (response));
        writeBuffer.popContext("PnDcp_ServiceType");
    }

}
