/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class McResponseIO implements MessageIO<McResponse, McResponse> {

    private static final Logger LOGGER = LoggerFactory.getLogger(McResponseIO.class);

    @Override
    public McResponse parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (McResponse) new McPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, McResponse value, Object... args) throws ParseException {
        new McPacketIO().serialize(writeBuffer, value, args);
    }

    public static McResponseBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("McResponse");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (responsedatalength)
long responsedatalength = readBuffer.readUnsignedLong("responsedatalength", 32) ;
        readBuffer.pullContext("endcode");

        // Simple Field (endcode)
EndcodeType endcode = EndcodeTypeIO.staticParse(readBuffer , (int) (responsedatalength) ) ;        readBuffer.closeContext("endcode");

        readBuffer.closeContext("McResponse");
        // Create the instance
        return new McResponseBuilder(responsedatalength, endcode);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, McResponse _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("McResponse");

        // Simple Field (responsedatalength)
        long responsedatalength = (long) _value.getResponsedatalength();
        writeBuffer.writeUnsignedLong("responsedatalength", 32, ((Number) (responsedatalength)).longValue());

        // Simple Field (endcode)
        EndcodeType endcode = (EndcodeType) _value.getEndcode();
        writeBuffer.pushContext("endcode");
        EndcodeTypeIO.staticSerialize(writeBuffer, endcode);
        writeBuffer.popContext("endcode");
        writeBuffer.popContext("McResponse");
    }

    public static class McResponseBuilder implements McPacketIO.McPacketBuilder {
        private final long responsedatalength;
        private final EndcodeType endcode;

        public McResponseBuilder(long responsedatalength, EndcodeType endcode) {
            this.responsedatalength = responsedatalength;
            this.endcode = endcode;
        }

        public McResponse build() {
            return new McResponse(responsedatalength, endcode);
        }
    }

}
