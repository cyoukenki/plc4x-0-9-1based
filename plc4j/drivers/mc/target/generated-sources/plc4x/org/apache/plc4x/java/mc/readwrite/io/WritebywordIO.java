/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class WritebywordIO implements MessageIO<Writebyword, Writebyword> {

    private static final Logger LOGGER = LoggerFactory.getLogger(WritebywordIO.class);

    @Override
    public Writebyword parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Writebyword) new WriteSubcommandTypeIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Writebyword value, Object... args) throws ParseException {
        new WriteSubcommandTypeIO().serialize(writeBuffer, value, args);
    }

    public static WritebywordBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Writebyword");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("devicecode");
        // Enum field (devicecode)
        Devicecode devicecode = Devicecode.enumForValue(readBuffer.readShort("Devicecode", 16));
        readBuffer.closeContext("devicecode");


        // Simple Field (headdeviceno)
BigInteger headdeviceno = readBuffer.readUnsignedBigInteger("headdeviceno", 48) ;

        // Simple Field (devicepointno)
long devicepointno = readBuffer.readUnsignedLong("devicepointno", 32) ;        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if((org.apache.plc4x.java.mc.readwrite.util.ConvertUtils.calculateWriteDateLength(devicepointno)) * (4) > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + ((org.apache.plc4x.java.mc.readwrite.util.ConvertUtils.calculateWriteDateLength(devicepointno)) * (4)) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] data;
        {
            int itemCount = Math.max(0, (int) (org.apache.plc4x.java.mc.readwrite.util.ConvertUtils.calculateWriteDateLength(devicepointno)) * (4));
            data = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Writebyword");
        // Create the instance
        return new WritebywordBuilder(devicecode, headdeviceno, devicepointno, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Writebyword _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Writebyword");

        writeBuffer.pushContext("devicecode");
        // Enum field (devicecode)
        Devicecode devicecode = (Devicecode) _value.getDevicecode();
        writeBuffer.writeShort("Devicecode", 16, ((Number) (devicecode.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(devicecode.name()));
        writeBuffer.popContext("devicecode");

        // Simple Field (headdeviceno)
        BigInteger headdeviceno = (BigInteger) _value.getHeaddeviceno();
        writeBuffer.writeUnsignedBigInteger("headdeviceno", 48, (BigInteger) (headdeviceno));

        // Simple Field (devicepointno)
        long devicepointno = (long) _value.getDevicepointno();
        writeBuffer.writeUnsignedLong("devicepointno", 32, ((Number) (devicepointno)).longValue());

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(byte element : _value.getData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Writebyword");
    }

    public static class WritebywordBuilder implements WriteSubcommandTypeIO.WriteSubcommandTypeBuilder {
        private final Devicecode devicecode;
        private final BigInteger headdeviceno;
        private final long devicepointno;
        private final byte[] data;

        public WritebywordBuilder(Devicecode devicecode, BigInteger headdeviceno, long devicepointno, byte[] data) {
            this.devicecode = devicecode;
            this.headdeviceno = headdeviceno;
            this.devicepointno = devicepointno;
            this.data = data;
        }

        public Writebyword build() {
            return new Writebyword(devicecode, headdeviceno, devicepointno, data);
        }
    }

}
