/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class SelftestIO implements MessageIO<Selftest, Selftest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SelftestIO.class);

    @Override
    public Selftest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Selftest) new CommandTypeIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Selftest value, Object... args) throws ParseException {
        new CommandTypeIO().serialize(writeBuffer, value, args);
    }

    public static SelftestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Selftest");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (subcommand)
        long subcommand = readBuffer.readUnsignedLong("subcommand", 32);
        if(subcommand != Selftest.SUBCOMMAND) {
            throw new ParseException("Expected constant value " + Selftest.SUBCOMMAND + " but got " + subcommand);
        }


        // Simple Field (numberoflookbackdata)
long numberoflookbackdata = readBuffer.readUnsignedLong("numberoflookbackdata", 32) ;        // Array field (data)
        readBuffer.pullContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(numberoflookbackdata > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (numberoflookbackdata) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        short[] data;
        {
            int itemCount = Math.max(0, (int) numberoflookbackdata);
            data = new short[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
data[curItem] = readBuffer.readUnsignedShort("", 8) ;            }
        }
            readBuffer.closeContext("data", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Selftest");
        // Create the instance
        return new SelftestBuilder(numberoflookbackdata, data);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Selftest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Selftest");

        // Const Field (subcommand)
        writeBuffer.writeUnsignedLong("subcommand", 32, ((Number) 0x30303030).longValue());

        // Simple Field (numberoflookbackdata)
        long numberoflookbackdata = (long) _value.getNumberoflookbackdata();
        writeBuffer.writeUnsignedLong("numberoflookbackdata", 32, ((Number) (numberoflookbackdata)).longValue());

        // Array Field (data)
        if(_value.getData() != null) {
            writeBuffer.pushContext("data", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getData().length;
            int curItem = 0;
            for(short element : _value.getData()) {
                writeBuffer.writeUnsignedShort("", 8, ((Number) element).shortValue());
                curItem++;
            }
            writeBuffer.popContext("data", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Selftest");
    }

    public static class SelftestBuilder implements CommandTypeIO.CommandTypeBuilder {
        private final long numberoflookbackdata;
        private final short[] data;

        public SelftestBuilder(long numberoflookbackdata, short[] data) {
            this.numberoflookbackdata = numberoflookbackdata;
            this.data = data;
        }

        public Selftest build() {
            return new Selftest(numberoflookbackdata, data);
        }
    }

}
