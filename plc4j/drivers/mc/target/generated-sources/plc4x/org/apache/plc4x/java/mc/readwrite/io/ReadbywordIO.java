/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ReadbywordIO implements MessageIO<Readbyword, Readbyword> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReadbywordIO.class);

    @Override
    public Readbyword parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Readbyword) new ReadSubcommandTypeIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Readbyword value, Object... args) throws ParseException {
        new ReadSubcommandTypeIO().serialize(writeBuffer, value, args);
    }

    public static ReadbywordBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Readbyword");
        int startPos = readBuffer.getPos();
        int curPos;

        readBuffer.pullContext("devicecode");
        // Enum field (devicecode)
        Devicecode devicecode = Devicecode.enumForValue(readBuffer.readShort("Devicecode", 16));
        readBuffer.closeContext("devicecode");


        // Simple Field (headdeviceno)
BigInteger headdeviceno = readBuffer.readUnsignedBigInteger("headdeviceno", 48) ;

        // Simple Field (devicepointno)
long devicepointno = readBuffer.readUnsignedLong("devicepointno", 32) ;
        readBuffer.closeContext("Readbyword");
        // Create the instance
        return new ReadbywordBuilder(devicecode, headdeviceno, devicepointno);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Readbyword _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Readbyword");

        writeBuffer.pushContext("devicecode");
        // Enum field (devicecode)
        Devicecode devicecode = (Devicecode) _value.getDevicecode();
        writeBuffer.writeShort("Devicecode", 16, ((Number) (devicecode.getValue())).shortValue(), WithReaderWriterArgs.WithAdditionalStringRepresentation(devicecode.name()));
        writeBuffer.popContext("devicecode");

        // Simple Field (headdeviceno)
        BigInteger headdeviceno = (BigInteger) _value.getHeaddeviceno();
        writeBuffer.writeUnsignedBigInteger("headdeviceno", 48, (BigInteger) (headdeviceno));

        // Simple Field (devicepointno)
        long devicepointno = (long) _value.getDevicepointno();
        writeBuffer.writeUnsignedLong("devicepointno", 32, ((Number) (devicepointno)).longValue());
        writeBuffer.popContext("Readbyword");
    }

    public static class ReadbywordBuilder implements ReadSubcommandTypeIO.ReadSubcommandTypeBuilder {
        private final Devicecode devicecode;
        private final BigInteger headdeviceno;
        private final long devicepointno;

        public ReadbywordBuilder(Devicecode devicecode, BigInteger headdeviceno, long devicepointno) {
            this.devicecode = devicecode;
            this.headdeviceno = headdeviceno;
            this.devicepointno = devicepointno;
        }

        public Readbyword build() {
            return new Readbyword(devicecode, headdeviceno, devicepointno);
        }
    }

}
