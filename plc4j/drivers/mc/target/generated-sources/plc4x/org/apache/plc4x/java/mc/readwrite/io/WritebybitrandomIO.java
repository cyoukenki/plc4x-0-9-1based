/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class WritebybitrandomIO implements MessageIO<Writebybitrandom, Writebybitrandom> {

    private static final Logger LOGGER = LoggerFactory.getLogger(WritebybitrandomIO.class);

    @Override
    public Writebybitrandom parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Writebybitrandom) new WriterandomSubcommandTypeIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Writebybitrandom value, Object... args) throws ParseException {
        new WriterandomSubcommandTypeIO().serialize(writeBuffer, value, args);
    }

    public static WritebybitrandomBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Writebybitrandom");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (Wordaccesspoints)
int Wordaccesspoints = readBuffer.readUnsignedInt("Wordaccesspoints", 16) ;

        // Simple Field (Doublewordaccesspoints)
int Doublewordaccesspoints = readBuffer.readUnsignedInt("Doublewordaccesspoints", 16) ;        // Array field (dataStruct14020000word)
        readBuffer.pullContext("dataStruct14020000word", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(Wordaccesspoints > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (Wordaccesspoints) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct14020000word[] dataStruct14020000word;
        {
            int itemCount = Math.max(0, (int) Wordaccesspoints);
            dataStruct14020000word = new DataStruct14020000word[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataStruct14020000word[curItem] = DataStruct14020000wordIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("dataStruct14020000word", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (dataStruct14020000doubleword)
        readBuffer.pullContext("dataStruct14020000doubleword", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(Doublewordaccesspoints > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (Doublewordaccesspoints) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct14020000doubleword[] dataStruct14020000doubleword;
        {
            int itemCount = Math.max(0, (int) Doublewordaccesspoints);
            dataStruct14020000doubleword = new DataStruct14020000doubleword[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
dataStruct14020000doubleword[curItem] = DataStruct14020000doublewordIO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("dataStruct14020000doubleword", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Writebybitrandom");
        // Create the instance
        return new WritebybitrandomBuilder(Wordaccesspoints, Doublewordaccesspoints, dataStruct14020000word, dataStruct14020000doubleword);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Writebybitrandom _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Writebybitrandom");

        // Simple Field (Wordaccesspoints)
        int Wordaccesspoints = (int) _value.getWordaccesspoints();
        writeBuffer.writeUnsignedInt("Wordaccesspoints", 16, ((Number) (Wordaccesspoints)).intValue());

        // Simple Field (Doublewordaccesspoints)
        int Doublewordaccesspoints = (int) _value.getDoublewordaccesspoints();
        writeBuffer.writeUnsignedInt("Doublewordaccesspoints", 16, ((Number) (Doublewordaccesspoints)).intValue());

        // Array Field (dataStruct14020000word)
        if(_value.getDataStruct14020000word() != null) {
            writeBuffer.pushContext("dataStruct14020000word", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataStruct14020000word().length;
            int curItem = 0;
            for(DataStruct14020000word element : _value.getDataStruct14020000word()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStruct14020000wordIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataStruct14020000word", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (dataStruct14020000doubleword)
        if(_value.getDataStruct14020000doubleword() != null) {
            writeBuffer.pushContext("dataStruct14020000doubleword", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDataStruct14020000doubleword().length;
            int curItem = 0;
            for(DataStruct14020000doubleword element : _value.getDataStruct14020000doubleword()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStruct14020000doublewordIO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("dataStruct14020000doubleword", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Writebybitrandom");
    }

    public static class WritebybitrandomBuilder implements WriterandomSubcommandTypeIO.WriterandomSubcommandTypeBuilder {
        private final int Wordaccesspoints;
        private final int Doublewordaccesspoints;
        private final DataStruct14020000word[] dataStruct14020000word;
        private final DataStruct14020000doubleword[] dataStruct14020000doubleword;

        public WritebybitrandomBuilder(int Wordaccesspoints, int Doublewordaccesspoints, DataStruct14020000word[] dataStruct14020000word, DataStruct14020000doubleword[] dataStruct14020000doubleword) {
            this.Wordaccesspoints = Wordaccesspoints;
            this.Doublewordaccesspoints = Doublewordaccesspoints;
            this.dataStruct14020000word = dataStruct14020000word;
            this.dataStruct14020000doubleword = dataStruct14020000doubleword;
        }

        public Writebybitrandom build() {
            return new Writebybitrandom(Wordaccesspoints, Doublewordaccesspoints, dataStruct14020000word, dataStruct14020000doubleword);
        }
    }

}
