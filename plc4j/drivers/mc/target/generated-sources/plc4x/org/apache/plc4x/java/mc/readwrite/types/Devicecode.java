/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum Devicecode {

    SM((short) 0X534D),
    SD((short) 0X5344),
    X((short) 0X582A),
    Y((short) 0X592A),
    M((short) 0X4D2A),
    L((short) 0X4C2A),
    F((short) 0X462A),
    V((short) 0X562A),
    B((short) 0X422A),
    D((short) 0X442A),
    W((short) 0X572A),
    TS((short) 0X5453),
    TC((short) 0X5443),
    TN((short) 0X544E),
    STS((short) 0X5353),
    STC((short) 0X5343),
    STN((short) 0X5344),
    CS((short) 0X4353),
    CC((short) 0X4343),
    CN((short) 0X434E),
    SB((short) 0X5342),
    SW((short) 0X5357),
    DX((short) 0X4458),
    DY((short) 0X4459),
    Z((short) 0X5A2A),
    R((short) 0X522A),
    ZR((short) 0X5A52);

    private static final Logger logger = LoggerFactory.getLogger(Devicecode.class);

    private static final Map<Short, Devicecode> map;
    static {
        map = new HashMap<>();
        for (Devicecode value : Devicecode.values()) {
            map.put((short) value.getValue(), value);
        }
    }

    private short value;

    Devicecode(short value) {
        this.value = value;
    }

    public short getValue() {
        return value;
    }

    public static Devicecode enumForValue(short value) {
        if (!map.containsKey(value)) {
            logger.error("No Devicecode for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(short value) {
        return map.containsKey(value);
    }

}
