/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class McPacketIO implements MessageIO<McPacket, McPacket> {

    private static final Logger LOGGER = LoggerFactory.getLogger(McPacketIO.class);

    @Override
    public McPacket parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return McPacketIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, McPacket value, Object... args) throws ParseException {
        McPacketIO.staticSerialize(writeBuffer, value);
    }

    public static McPacket staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("McPacket");
        int startPos = readBuffer.getPos();
        int curPos;

        // Discriminator Field (subheader) (Used as input to a switch field)
        long subheader = readBuffer.readUnsignedLong("subheader", 32);


        // Const Field (RequestdestinationnetworkNo)
        int RequestdestinationnetworkNo = readBuffer.readUnsignedInt("RequestdestinationnetworkNo", 16);
        if(RequestdestinationnetworkNo != McPacket.REQUESTDESTINATIONNETWORKNO) {
            throw new ParseException("Expected constant value " + McPacket.REQUESTDESTINATIONNETWORKNO + " but got " + RequestdestinationnetworkNo);
        }

        // Const Field (RequestdestinationstationNo)
        int RequestdestinationstationNo = readBuffer.readUnsignedInt("RequestdestinationstationNo", 16);
        if(RequestdestinationstationNo != McPacket.REQUESTDESTINATIONSTATIONNO) {
            throw new ParseException("Expected constant value " + McPacket.REQUESTDESTINATIONSTATIONNO + " but got " + RequestdestinationstationNo);
        }

        // Const Field (RequestdestinationmoduleIONo)
        long RequestdestinationmoduleIONo = readBuffer.readUnsignedLong("RequestdestinationmoduleIONo", 32);
        if(RequestdestinationmoduleIONo != McPacket.REQUESTDESTINATIONMODULEIONO) {
            throw new ParseException("Expected constant value " + McPacket.REQUESTDESTINATIONMODULEIONO + " but got " + RequestdestinationmoduleIONo);
        }

        // Const Field (RequestdestinationmultidropstationNo)
        int RequestdestinationmultidropstationNo = readBuffer.readUnsignedInt("RequestdestinationmultidropstationNo", 16);
        if(RequestdestinationmultidropstationNo != McPacket.REQUESTDESTINATIONMULTIDROPSTATIONNO) {
            throw new ParseException("Expected constant value " + McPacket.REQUESTDESTINATIONMULTIDROPSTATIONNO + " but got " + RequestdestinationmultidropstationNo);
        }

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        McPacketBuilder builder = null;
                if(EvaluationHelper.equals(subheader, 0x35303030)) {
            builder = McRequestIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(subheader, 0x44303030)) {
            builder = McResponseIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("McPacket");
        // Create the instance
        return builder.build();
    }

    public static void staticSerialize(WriteBuffer writeBuffer, McPacket _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("McPacket");

        // Discriminator Field (subheader) (Used as input to a switch field)
        long subheader = (long) _value.getSubheader();
            writeBuffer.writeUnsignedLong("subheader", 32, ((Number) (subheader)).longValue());

        // Const Field (RequestdestinationnetworkNo)
        writeBuffer.writeUnsignedInt("RequestdestinationnetworkNo", 16, ((Number) 0x3030).intValue());

        // Const Field (RequestdestinationstationNo)
        writeBuffer.writeUnsignedInt("RequestdestinationstationNo", 16, ((Number) 0x4646).intValue());

        // Const Field (RequestdestinationmoduleIONo)
        writeBuffer.writeUnsignedLong("RequestdestinationmoduleIONo", 32, ((Number) 0x30334646).longValue());

        // Const Field (RequestdestinationmultidropstationNo)
        writeBuffer.writeUnsignedInt("RequestdestinationmultidropstationNo", 16, ((Number) 0x3030).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof McRequest) {
            McRequestIO.staticSerialize(writeBuffer, (McRequest) _value);
        } else 
        if(_value instanceof McResponse) {
            McResponseIO.staticSerialize(writeBuffer, (McResponse) _value);
        }
        writeBuffer.popContext("McPacket");
    }

    public static interface McPacketBuilder {
        McPacket build();
    }

}
