/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.mc.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.mc.readwrite.*;
import org.apache.plc4x.java.mc.readwrite.io.*;
import org.apache.plc4x.java.mc.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ReadrandomIO implements MessageIO<Readrandom, Readrandom> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReadrandomIO.class);

    @Override
    public Readrandom parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (Readrandom) new CommandTypeIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, Readrandom value, Object... args) throws ParseException {
        new CommandTypeIO().serialize(writeBuffer, value, args);
    }

    public static ReadrandomBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("Readrandom");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (subcommand)
        long subcommand = readBuffer.readUnsignedLong("subcommand", 32);
        if(subcommand != Readrandom.SUBCOMMAND) {
            throw new ParseException("Expected constant value " + Readrandom.SUBCOMMAND + " but got " + subcommand);
        }


        // Simple Field (wordaccesspoints)
int wordaccesspoints = readBuffer.readUnsignedInt("wordaccesspoints", 16) ;

        // Simple Field (doublewordaccesspoints)
int doublewordaccesspoints = readBuffer.readUnsignedInt("doublewordaccesspoints", 16) ;        // Array field (wordaccesspointsAddr)
        readBuffer.pullContext("wordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(wordaccesspoints > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (wordaccesspoints) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct04030000[] wordaccesspointsAddr;
        {
            int itemCount = Math.max(0, (int) wordaccesspoints);
            wordaccesspointsAddr = new DataStruct04030000[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
wordaccesspointsAddr[curItem] = DataStruct04030000IO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("wordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
        // Array field (doublewordaccesspointsAddr)
        readBuffer.pullContext("doublewordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(doublewordaccesspoints > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (doublewordaccesspoints) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        DataStruct04030000[] doublewordaccesspointsAddr;
        {
            int itemCount = Math.max(0, (int) doublewordaccesspoints);
            doublewordaccesspointsAddr = new DataStruct04030000[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                boolean lastItem = curItem == (itemCount - 1);
doublewordaccesspointsAddr[curItem] = DataStruct04030000IO.staticParse(readBuffer ) ;            }
        }
            readBuffer.closeContext("doublewordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("Readrandom");
        // Create the instance
        return new ReadrandomBuilder(wordaccesspoints, doublewordaccesspoints, wordaccesspointsAddr, doublewordaccesspointsAddr);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, Readrandom _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("Readrandom");

        // Const Field (subcommand)
        writeBuffer.writeUnsignedLong("subcommand", 32, ((Number) 0x30303030).longValue());

        // Simple Field (wordaccesspoints)
        int wordaccesspoints = (int) _value.getWordaccesspoints();
        writeBuffer.writeUnsignedInt("wordaccesspoints", 16, ((Number) (wordaccesspoints)).intValue());

        // Simple Field (doublewordaccesspoints)
        int doublewordaccesspoints = (int) _value.getDoublewordaccesspoints();
        writeBuffer.writeUnsignedInt("doublewordaccesspoints", 16, ((Number) (doublewordaccesspoints)).intValue());

        // Array Field (wordaccesspointsAddr)
        if(_value.getWordaccesspointsAddr() != null) {
            writeBuffer.pushContext("wordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getWordaccesspointsAddr().length;
            int curItem = 0;
            for(DataStruct04030000 element : _value.getWordaccesspointsAddr()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStruct04030000IO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("wordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
        }

        // Array Field (doublewordaccesspointsAddr)
        if(_value.getDoublewordaccesspointsAddr() != null) {
            writeBuffer.pushContext("doublewordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getDoublewordaccesspointsAddr().length;
            int curItem = 0;
            for(DataStruct04030000 element : _value.getDoublewordaccesspointsAddr()) {
                boolean lastItem = curItem == (itemCount - 1);
                DataStruct04030000IO.staticSerialize(writeBuffer, element);
                curItem++;
            }
            writeBuffer.popContext("doublewordaccesspointsAddr", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("Readrandom");
    }

    public static class ReadrandomBuilder implements CommandTypeIO.CommandTypeBuilder {
        private final int wordaccesspoints;
        private final int doublewordaccesspoints;
        private final DataStruct04030000[] wordaccesspointsAddr;
        private final DataStruct04030000[] doublewordaccesspointsAddr;

        public ReadrandomBuilder(int wordaccesspoints, int doublewordaccesspoints, DataStruct04030000[] wordaccesspointsAddr, DataStruct04030000[] doublewordaccesspointsAddr) {
            this.wordaccesspoints = wordaccesspoints;
            this.doublewordaccesspoints = doublewordaccesspoints;
            this.wordaccesspointsAddr = wordaccesspointsAddr;
            this.doublewordaccesspointsAddr = doublewordaccesspointsAddr;
        }

        public Readrandom build() {
            return new Readrandom(wordaccesspoints, doublewordaccesspoints, wordaccesspointsAddr, doublewordaccesspointsAddr);
        }
    }

}
