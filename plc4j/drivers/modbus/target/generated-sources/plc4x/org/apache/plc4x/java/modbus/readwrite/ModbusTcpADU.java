/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.modbus.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.modbus.readwrite.io.*;
import org.apache.plc4x.java.modbus.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ModbusTcpADU implements Message {


    // Constant values.
    public static final int PROTOCOLIDENTIFIER = 0x0000;

    // Properties.
    private final int transactionIdentifier;
    private final short unitIdentifier;
    private final ModbusPDU pdu;

    public ModbusTcpADU(int transactionIdentifier, short unitIdentifier, ModbusPDU pdu) {
        this.transactionIdentifier = transactionIdentifier;
        this.unitIdentifier = unitIdentifier;
        this.pdu = pdu;
    }

    public int getTransactionIdentifier() {
        return transactionIdentifier;
    }

    public short getUnitIdentifier() {
        return unitIdentifier;
    }

    public ModbusPDU getPdu() {
        return pdu;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        ModbusTcpADU _value  = this;

        // Simple field (transactionIdentifier)
        lengthInBits += 16;

        // Const Field (protocolIdentifier)
        lengthInBits += 16;

        // Implicit Field (length)
        lengthInBits += 16;
        //int length = (int) ((_value.getPdu().getLengthInBytes()) + (1));

        // Simple field (unitIdentifier)
        lengthInBits += 8;

        // Simple field (pdu)
        lengthInBits += pdu.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ModbusTcpADU, ModbusTcpADU> getMessageIO() {
        return new ModbusTcpADUIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ModbusTcpADU)) {
            return false;
        }
        ModbusTcpADU that = (ModbusTcpADU) o;
        return
            (getTransactionIdentifier() == that.getTransactionIdentifier()) &&
            (getUnitIdentifier() == that.getUnitIdentifier()) &&
            (getPdu() == that.getPdu()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTransactionIdentifier(),
            getUnitIdentifier(),
            getPdu()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("transactionIdentifier", getTransactionIdentifier())
            .append("unitIdentifier", getUnitIdentifier())
            .append("pdu", getPdu())
            .toString();
    }

}
