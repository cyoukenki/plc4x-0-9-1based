/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.modbus.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.modbus.readwrite.*;
import org.apache.plc4x.java.modbus.readwrite.io.*;
import org.apache.plc4x.java.modbus.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ModbusPDUWriteMultipleHoldingRegistersRequestIO implements MessageIO<ModbusPDUWriteMultipleHoldingRegistersRequest, ModbusPDUWriteMultipleHoldingRegistersRequest> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModbusPDUWriteMultipleHoldingRegistersRequestIO.class);

    @Override
    public ModbusPDUWriteMultipleHoldingRegistersRequest parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (ModbusPDUWriteMultipleHoldingRegistersRequest) new ModbusPDUIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ModbusPDUWriteMultipleHoldingRegistersRequest value, Object... args) throws ParseException {
        new ModbusPDUIO().serialize(writeBuffer, value, args);
    }

    public static ModbusPDUWriteMultipleHoldingRegistersRequestBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ModbusPDUWriteMultipleHoldingRegistersRequest");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (startingAddress)
int startingAddress = readBuffer.readUnsignedInt("startingAddress", 16) ;

        // Simple Field (quantity)
int quantity = readBuffer.readUnsignedInt("quantity", 16) ;
        // Implicit Field (byteCount) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short byteCount = readBuffer.readUnsignedShort("byteCount", 8);
        // Array field (value)
        readBuffer.pullContext("value", WithReaderWriterArgs.WithRenderAsList(true));
        // Count array
        if(byteCount > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (byteCount) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        byte[] value;
        {
            int itemCount = Math.max(0, (int) byteCount);
            value = new byte[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                
value[curItem] = readBuffer.readSignedByte("", 8) ;            }
        }
            readBuffer.closeContext("value", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ModbusPDUWriteMultipleHoldingRegistersRequest");
        // Create the instance
        return new ModbusPDUWriteMultipleHoldingRegistersRequestBuilder(startingAddress, quantity, value);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ModbusPDUWriteMultipleHoldingRegistersRequest _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ModbusPDUWriteMultipleHoldingRegistersRequest");

        // Simple Field (startingAddress)
        int startingAddress = (int) _value.getStartingAddress();
        writeBuffer.writeUnsignedInt("startingAddress", 16, ((Number) (startingAddress)).intValue());

        // Simple Field (quantity)
        int quantity = (int) _value.getQuantity();
        writeBuffer.writeUnsignedInt("quantity", 16, ((Number) (quantity)).intValue());

        // Implicit Field (byteCount) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        short byteCount = (short) (COUNT(_value.getValue()));
        writeBuffer.writeUnsignedShort("byteCount", 8, ((Number) (byteCount)).shortValue());

        // Array Field (value)
        if(_value.getValue() != null) {
            writeBuffer.pushContext("value", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getValue().length;
            int curItem = 0;
            for(byte element : _value.getValue()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("value", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ModbusPDUWriteMultipleHoldingRegistersRequest");
    }

    public static class ModbusPDUWriteMultipleHoldingRegistersRequestBuilder implements ModbusPDUIO.ModbusPDUBuilder {
        private final int startingAddress;
        private final int quantity;
        private final byte[] value;

        public ModbusPDUWriteMultipleHoldingRegistersRequestBuilder(int startingAddress, int quantity, byte[] value) {
            this.startingAddress = startingAddress;
            this.quantity = quantity;
            this.value = value;
        }

        public ModbusPDUWriteMultipleHoldingRegistersRequest build() {
            return new ModbusPDUWriteMultipleHoldingRegistersRequest(startingAddress, quantity, value);
        }
    }

}
