/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.modbus.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.modbus.readwrite.*;

import org.apache.plc4x.java.modbus.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ModbusPDUWriteFileRecordResponseItemIO implements MessageIO<ModbusPDUWriteFileRecordResponseItem, ModbusPDUWriteFileRecordResponseItem> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModbusPDUWriteFileRecordResponseItemIO.class);

    @Override
    public ModbusPDUWriteFileRecordResponseItem parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return ModbusPDUWriteFileRecordResponseItemIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ModbusPDUWriteFileRecordResponseItem value, Object... args) throws ParseException {
        ModbusPDUWriteFileRecordResponseItemIO.staticSerialize(writeBuffer, value);
    }

    public static ModbusPDUWriteFileRecordResponseItem staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("ModbusPDUWriteFileRecordResponseItem");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (referenceType)
short referenceType = readBuffer.readUnsignedShort("referenceType", 8) ;

        // Simple Field (fileNumber)
int fileNumber = readBuffer.readUnsignedInt("fileNumber", 16) ;

        // Simple Field (recordNumber)
int recordNumber = readBuffer.readUnsignedInt("recordNumber", 16) ;
        // Implicit Field (recordLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int recordLength = readBuffer.readUnsignedInt("recordLength", 16);
        // Array field (recordData)
        readBuffer.pullContext("recordData", WithReaderWriterArgs.WithRenderAsList(true));
        // Length array
        long _recordDataLength = recordLength;
        List<Byte> _recordDataList = new LinkedList<>();
        long recordDataEndPos = readBuffer.getPos() + _recordDataLength;
        while(readBuffer.getPos() < recordDataEndPos) {
            _recordDataList.add(readBuffer.readSignedByte("", 8));
        }
        byte[] recordData = new byte[_recordDataList.size()];
        for(int i = 0; i < _recordDataList.size(); i++) {
            recordData[i] = (byte) _recordDataList.get(i);
        }
            readBuffer.closeContext("recordData", WithReaderWriterArgs.WithRenderAsList(true));

        readBuffer.closeContext("ModbusPDUWriteFileRecordResponseItem");
        // Create the instance
        return new ModbusPDUWriteFileRecordResponseItem(referenceType, fileNumber, recordNumber, recordData);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ModbusPDUWriteFileRecordResponseItem _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ModbusPDUWriteFileRecordResponseItem");

        // Simple Field (referenceType)
        short referenceType = (short) _value.getReferenceType();
        writeBuffer.writeUnsignedShort("referenceType", 8, ((Number) (referenceType)).shortValue());

        // Simple Field (fileNumber)
        int fileNumber = (int) _value.getFileNumber();
        writeBuffer.writeUnsignedInt("fileNumber", 16, ((Number) (fileNumber)).intValue());

        // Simple Field (recordNumber)
        int recordNumber = (int) _value.getRecordNumber();
        writeBuffer.writeUnsignedInt("recordNumber", 16, ((Number) (recordNumber)).intValue());

        // Implicit Field (recordLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int recordLength = (int) ((COUNT(_value.getRecordData())) / (2));
        writeBuffer.writeUnsignedInt("recordLength", 16, ((Number) (recordLength)).intValue());

        // Array Field (recordData)
        if(_value.getRecordData() != null) {
            writeBuffer.pushContext("recordData", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.getRecordData().length;
            int curItem = 0;
            for(byte element : _value.getRecordData()) {
                writeBuffer.writeSignedByte("", 8, ((Number) element).byteValue());
                curItem++;
            }
            writeBuffer.popContext("recordData", WithReaderWriterArgs.WithRenderAsList(true));
        }
        writeBuffer.popContext("ModbusPDUWriteFileRecordResponseItem");
    }

}
