/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.modbus.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.modbus.readwrite.io.*;
import org.apache.plc4x.java.modbus.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class ModbusSerialADU implements Message {


    // Properties.
    private final int transactionId;
    private final int length;
    private final short address;
    private final ModbusPDU pdu;

    public ModbusSerialADU(int transactionId, int length, short address, ModbusPDU pdu) {
        this.transactionId = transactionId;
        this.length = length;
        this.address = address;
        this.pdu = pdu;
    }

    public int getTransactionId() {
        return transactionId;
    }

    public int getLength() {
        return length;
    }

    public short getAddress() {
        return address;
    }

    public ModbusPDU getPdu() {
        return pdu;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        ModbusSerialADU _value  = this;

        // Simple field (transactionId)
        lengthInBits += 16;

        // Reserved Field (reserved)
        lengthInBits += 16;

        // Simple field (length)
        lengthInBits += 16;

        // Simple field (address)
        lengthInBits += 8;

        // Simple field (pdu)
        lengthInBits += pdu.getLengthInBits();

        return lengthInBits;
    }

    @Override
    public MessageIO<ModbusSerialADU, ModbusSerialADU> getMessageIO() {
        return new ModbusSerialADUIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ModbusSerialADU)) {
            return false;
        }
        ModbusSerialADU that = (ModbusSerialADU) o;
        return
            (getTransactionId() == that.getTransactionId()) &&
            (getLength() == that.getLength()) &&
            (getAddress() == that.getAddress()) &&
            (getPdu() == that.getPdu()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getTransactionId(),
            getLength(),
            getAddress(),
            getPdu()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("transactionId", getTransactionId())
            .append("length", getLength())
            .append("address", getAddress())
            .append("pdu", getPdu())
            .toString();
    }

}
