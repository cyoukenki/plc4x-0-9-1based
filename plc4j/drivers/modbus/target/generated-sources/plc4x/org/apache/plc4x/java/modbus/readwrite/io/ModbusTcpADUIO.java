/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.modbus.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.modbus.readwrite.*;
import org.apache.plc4x.java.modbus.readwrite.io.*;
import org.apache.plc4x.java.modbus.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class ModbusTcpADUIO implements MessageIO<ModbusTcpADU, ModbusTcpADU> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModbusTcpADUIO.class);

    @Override
    public ModbusTcpADU parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Boolean response;
        if(args[0] instanceof Boolean) {
            response = (Boolean) args[0];
        } else if (args[0] instanceof String) {
            response = Boolean.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Boolean or a string which is parseable but was " + args[0].getClass().getName());
        }
        return ModbusTcpADUIO.staticParse(readBuffer, response);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, ModbusTcpADU value, Object... args) throws ParseException {
        ModbusTcpADUIO.staticSerialize(writeBuffer, value);
    }

    public static ModbusTcpADU staticParse(ReadBuffer readBuffer, Boolean response) throws ParseException {
        readBuffer.pullContext("ModbusTcpADU");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (transactionIdentifier)
int transactionIdentifier = readBuffer.readUnsignedInt("transactionIdentifier", 16) ;
        // Const Field (protocolIdentifier)
        int protocolIdentifier = readBuffer.readUnsignedInt("protocolIdentifier", 16);
        if(protocolIdentifier != ModbusTcpADU.PROTOCOLIDENTIFIER) {
            throw new ParseException("Expected constant value " + ModbusTcpADU.PROTOCOLIDENTIFIER + " but got " + protocolIdentifier);
        }

        // Implicit Field (length) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int length = readBuffer.readUnsignedInt("length", 16);


        // Simple Field (unitIdentifier)
short unitIdentifier = readBuffer.readUnsignedShort("unitIdentifier", 8) ;
        readBuffer.pullContext("pdu");

        // Simple Field (pdu)
ModbusPDU pdu = ModbusPDUIO.staticParse(readBuffer , (boolean) (response) ) ;        readBuffer.closeContext("pdu");

        readBuffer.closeContext("ModbusTcpADU");
        // Create the instance
        return new ModbusTcpADU(transactionIdentifier, unitIdentifier, pdu);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, ModbusTcpADU _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("ModbusTcpADU");

        // Simple Field (transactionIdentifier)
        int transactionIdentifier = (int) _value.getTransactionIdentifier();
        writeBuffer.writeUnsignedInt("transactionIdentifier", 16, ((Number) (transactionIdentifier)).intValue());

        // Const Field (protocolIdentifier)
        writeBuffer.writeUnsignedInt("protocolIdentifier", 16, ((Number) 0x0000).intValue());

        // Implicit Field (length) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        int length = (int) ((_value.getPdu().getLengthInBytes()) + (1));
        writeBuffer.writeUnsignedInt("length", 16, ((Number) (length)).intValue());

        // Simple Field (unitIdentifier)
        short unitIdentifier = (short) _value.getUnitIdentifier();
        writeBuffer.writeUnsignedShort("unitIdentifier", 8, ((Number) (unitIdentifier)).shortValue());

        // Simple Field (pdu)
        ModbusPDU pdu = (ModbusPDU) _value.getPdu();
        writeBuffer.pushContext("pdu");
        ModbusPDUIO.staticSerialize(writeBuffer, pdu);
        writeBuffer.popContext("pdu");
        writeBuffer.popContext("ModbusTcpADU");
    }

}
