/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.fins.readwrite.io.*;
import org.apache.plc4x.java.fins.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public abstract class FinsUdpPacket implements Message {

    // Abstract accessors for discriminator values.
    public abstract Integer getFinsCommand();

    // Constant values.
    public static final short RSV = 0x00;
    public static final short GCT = 0x02;
    public static final short DNA = 0x00;
    public static final short DA2 = 0x00;
    public static final short SNA = 0x00;
    public static final short SA2 = 0x00;

    // Properties.
    private final short ICF;
    private final short DA1;
    private final short SA1;
    private final short SID;

    public FinsUdpPacket(short ICF, short DA1, short SA1, short SID) {
        this.ICF = ICF;
        this.DA1 = DA1;
        this.SA1 = SA1;
        this.SID = SID;
    }

    public short getICF() {
        return ICF;
    }

    public short getDA1() {
        return DA1;
    }

    public short getSA1() {
        return SA1;
    }

    public short getSID() {
        return SID;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = 0;
        FinsUdpPacket _value  = this;

        // Simple field (ICF)
        lengthInBits += 8;

        // Const Field (RSV)
        lengthInBits += 8;

        // Const Field (GCT)
        lengthInBits += 8;

        // Const Field (DNA)
        lengthInBits += 8;

        // Simple field (DA1)
        lengthInBits += 8;

        // Const Field (DA2)
        lengthInBits += 8;

        // Const Field (SNA)
        lengthInBits += 8;

        // Simple field (SA1)
        lengthInBits += 8;

        // Const Field (SA2)
        lengthInBits += 8;

        // Simple field (SID)
        lengthInBits += 8;

        // Discriminator Field (finsCommand)
        lengthInBits += 16;

        // Length of sub-type elements will be added by sub-type...

        return lengthInBits;
    }

    @Override
    public MessageIO<FinsUdpPacket, FinsUdpPacket> getMessageIO() {
        return new FinsUdpPacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof FinsUdpPacket)) {
            return false;
        }
        FinsUdpPacket that = (FinsUdpPacket) o;
        return
            (getICF() == that.getICF()) &&
            (getDA1() == that.getDA1()) &&
            (getSA1() == that.getSA1()) &&
            (getSID() == that.getSID()) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            getICF(),
            getDA1(),
            getSA1(),
            getSID()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .append("ICF", getICF())
            .append("DA1", getDA1())
            .append("SA1", getSA1())
            .append("SID", getSID())
            .toString();
    }

}
