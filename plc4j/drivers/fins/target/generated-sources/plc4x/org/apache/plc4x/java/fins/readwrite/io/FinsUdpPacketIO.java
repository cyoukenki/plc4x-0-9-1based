/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.fins.readwrite.*;
import org.apache.plc4x.java.fins.readwrite.io.*;
import org.apache.plc4x.java.fins.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class FinsUdpPacketIO implements MessageIO<FinsUdpPacket, FinsUdpPacket> {

    private static final Logger LOGGER = LoggerFactory.getLogger(FinsUdpPacketIO.class);

    @Override
    public FinsUdpPacket parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return FinsUdpPacketIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, FinsUdpPacket value, Object... args) throws ParseException {
        FinsUdpPacketIO.staticSerialize(writeBuffer, value);
    }

    public static FinsUdpPacket staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("FinsUdpPacket");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (ICF)
short ICF = readBuffer.readUnsignedShort("ICF", 8) ;
        // Const Field (RSV)
        short RSV = readBuffer.readUnsignedShort("RSV", 8);
        if(RSV != FinsUdpPacket.RSV) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.RSV + " but got " + RSV);
        }

        // Const Field (GCT)
        short GCT = readBuffer.readUnsignedShort("GCT", 8);
        if(GCT != FinsUdpPacket.GCT) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.GCT + " but got " + GCT);
        }

        // Const Field (DNA)
        short DNA = readBuffer.readUnsignedShort("DNA", 8);
        if(DNA != FinsUdpPacket.DNA) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.DNA + " but got " + DNA);
        }


        // Simple Field (DA1)
short DA1 = readBuffer.readUnsignedShort("DA1", 8) ;
        // Const Field (DA2)
        short DA2 = readBuffer.readUnsignedShort("DA2", 8);
        if(DA2 != FinsUdpPacket.DA2) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.DA2 + " but got " + DA2);
        }

        // Const Field (SNA)
        short SNA = readBuffer.readUnsignedShort("SNA", 8);
        if(SNA != FinsUdpPacket.SNA) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.SNA + " but got " + SNA);
        }


        // Simple Field (SA1)
short SA1 = readBuffer.readUnsignedShort("SA1", 8) ;
        // Const Field (SA2)
        short SA2 = readBuffer.readUnsignedShort("SA2", 8);
        if(SA2 != FinsUdpPacket.SA2) {
            throw new ParseException("Expected constant value " + FinsUdpPacket.SA2 + " but got " + SA2);
        }


        // Simple Field (SID)
short SID = readBuffer.readUnsignedShort("SID", 8) ;
        // Discriminator Field (finsCommand) (Used as input to a switch field)
        int finsCommand = readBuffer.readUnsignedInt("finsCommand", 16);


        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        FinsUdpPacketBuilder builder = null;
                if(EvaluationHelper.equals(finsCommand, 0x0101)) {
            builder = UdpReadBitsResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(finsCommand, 0x0101)) {
            builder = UdpReadBitsReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(finsCommand, 0x0102)) {
            builder = UdpWriteBitsResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(finsCommand, 0x0102)) {
            builder = UdpWriteBitsReqIO.staticParse(readBuffer);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("FinsUdpPacket");
        // Create the instance
        return builder.build(ICF, DA1, SA1, SID);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, FinsUdpPacket _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("FinsUdpPacket");

        // Simple Field (ICF)
        short ICF = (short) _value.getICF();
        writeBuffer.writeUnsignedShort("ICF", 8, ((Number) (ICF)).shortValue());

        // Const Field (RSV)
        writeBuffer.writeUnsignedShort("RSV", 8, ((Number) 0x00).shortValue());

        // Const Field (GCT)
        writeBuffer.writeUnsignedShort("GCT", 8, ((Number) 0x02).shortValue());

        // Const Field (DNA)
        writeBuffer.writeUnsignedShort("DNA", 8, ((Number) 0x00).shortValue());

        // Simple Field (DA1)
        short DA1 = (short) _value.getDA1();
        writeBuffer.writeUnsignedShort("DA1", 8, ((Number) (DA1)).shortValue());

        // Const Field (DA2)
        writeBuffer.writeUnsignedShort("DA2", 8, ((Number) 0x00).shortValue());

        // Const Field (SNA)
        writeBuffer.writeUnsignedShort("SNA", 8, ((Number) 0x00).shortValue());

        // Simple Field (SA1)
        short SA1 = (short) _value.getSA1();
        writeBuffer.writeUnsignedShort("SA1", 8, ((Number) (SA1)).shortValue());

        // Const Field (SA2)
        writeBuffer.writeUnsignedShort("SA2", 8, ((Number) 0x00).shortValue());

        // Simple Field (SID)
        short SID = (short) _value.getSID();
        writeBuffer.writeUnsignedShort("SID", 8, ((Number) (SID)).shortValue());

        // Discriminator Field (finsCommand) (Used as input to a switch field)
        int finsCommand = (int) _value.getFinsCommand();
            writeBuffer.writeUnsignedInt("finsCommand", 16, ((Number) (finsCommand)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof UdpReadBitsRes) {
            UdpReadBitsResIO.staticSerialize(writeBuffer, (UdpReadBitsRes) _value);
        } else 
        if(_value instanceof UdpReadBitsReq) {
            UdpReadBitsReqIO.staticSerialize(writeBuffer, (UdpReadBitsReq) _value);
        } else 
        if(_value instanceof UdpWriteBitsRes) {
            UdpWriteBitsResIO.staticSerialize(writeBuffer, (UdpWriteBitsRes) _value);
        } else 
        if(_value instanceof UdpWriteBitsReq) {
            UdpWriteBitsReqIO.staticSerialize(writeBuffer, (UdpWriteBitsReq) _value);
        }
        writeBuffer.popContext("FinsUdpPacket");
    }

    public static interface FinsUdpPacketBuilder {
        FinsUdpPacket build(short ICF, short DA1, short SA1, short SID);
    }

}
