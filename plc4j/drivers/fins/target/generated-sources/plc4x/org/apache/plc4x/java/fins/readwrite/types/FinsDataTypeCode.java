/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite.types;

import org.apache.plc4x.java.spi.generation.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum FinsDataTypeCode {

    DB((short) 0X02, (short) 1),
    CB((short) 0X30, (short) 1),
    WB((short) 0X31, (short) 1),
    HB((short) 0X32, (short) 1),
    AB((short) 0X33, (short) 1),
    C((short) 0XB0, (short) 1),
    W((short) 0XB1, (short) 1),
    H((short) 0XB2, (short) 1),
    A((short) 0XB3, (short) 1),
    D((short) 0X82, (short) 1),
    E0B((short) 0X20, (short) 1),
    E1B((short) 0X21, (short) 1),
    E2B((short) 0X22, (short) 1),
    E3B((short) 0X23, (short) 1),
    E4B((short) 0X24, (short) 1),
    E5B((short) 0X25, (short) 1),
    E6B((short) 0X26, (short) 1),
    E7B((short) 0X27, (short) 1),
    E8B((short) 0X28, (short) 1),
    E9B((short) 0X29, (short) 1),
    E0AB((short) 0X2A, (short) 1),
    E0BB((short) 0X2B, (short) 1),
    E0CB((short) 0X2C, (short) 1),
    E0DB((short) 0X2D, (short) 1),
    E0EB((short) 0X2E, (short) 1),
    E0FB((short) 0X2F, (short) 1),
    E10B((short) 0XE0, (short) 1),
    E11B((short) 0XE1, (short) 1),
    E12B((short) 0XE2, (short) 1),
    E13B((short) 0XE3, (short) 1),
    E14B((short) 0XE4, (short) 1),
    E15B((short) 0XE5, (short) 1),
    E16B((short) 0XE6, (short) 1),
    E17B((short) 0XE7, (short) 1),
    E18B((short) 0XE8, (short) 1),
    E0((short) 0XA0, (short) 1),
    E1((short) 0XA1, (short) 1),
    E2((short) 0XA2, (short) 1),
    E3((short) 0XA3, (short) 1),
    E4((short) 0XA4, (short) 1),
    E5((short) 0XA5, (short) 1),
    E6((short) 0XA6, (short) 1),
    E7((short) 0XA7, (short) 1),
    E8((short) 0XA8, (short) 1),
    E9((short) 0XA9, (short) 1),
    E0A((short) 0XAA, (short) 1),
    E0C((short) 0XAC, (short) 1),
    E0D((short) 0XAD, (short) 1),
    E0E((short) 0XAE, (short) 1),
    E0F((short) 0XAF, (short) 1),
    E10((short) 0X60, (short) 1),
    E11((short) 0X61, (short) 1),
    E12((short) 0X62, (short) 1),
    E13((short) 0X63, (short) 1),
    E14((short) 0X64, (short) 1),
    E15((short) 0X65, (short) 1),
    E16((short) 0X66, (short) 1),
    E17((short) 0X67, (short) 1),
    E18((short) 0X68, (short) 1);

    private static final Logger logger = LoggerFactory.getLogger(FinsDataTypeCode.class);

    private static final Map<Short, FinsDataTypeCode> map;
    static {
        map = new HashMap<>();
        for (FinsDataTypeCode value : FinsDataTypeCode.values()) {
            map.put((short) value.getValue(), value);
        }
    }

    private short value;
        private short size;

    FinsDataTypeCode(short value, short size) {
        this.value = value;
        this.size = size;
    }

    public short getValue() {
        return value;
    }

    public short getSize() {
        return size;
    }

    public static FinsDataTypeCode firstEnumForFieldSize(short fieldValue) {
        for (FinsDataTypeCode _val : FinsDataTypeCode.values()) {
            if(_val.getSize() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<FinsDataTypeCode> enumsForFieldSize(short fieldValue) {
        List<FinsDataTypeCode> _values = new ArrayList();
        for (FinsDataTypeCode _val : FinsDataTypeCode.values()) {
            if(_val.getSize() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }

    public static FinsDataTypeCode enumForValue(short value) {
        if (!map.containsKey(value)) {
            logger.error("No FinsDataTypeCode for value {}", value);
        }
        return map.get(value);
    }

    public static Boolean isDefined(short value) {
        return map.containsKey(value);
    }

}
