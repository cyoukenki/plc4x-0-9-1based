/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.fins.readwrite.io.*;
import org.apache.plc4x.java.fins.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class HandshakeRes extends FinsPacket implements Message {

    // Accessors for discriminator values.
    public Long getCommand() {
        return 0x00000001L;
    }

    // Properties.
    private final short DA1;
    private final short DA2;
    private final short SNA;
    private final short SA1;

    public HandshakeRes(long errorCode, short ICF, short RSV, short GCT, short DNA, short DA1, short DA2, short SNA, short SA1) {
        super(errorCode, ICF, RSV, GCT, DNA);
        this.DA1 = DA1;
        this.DA2 = DA2;
        this.SNA = SNA;
        this.SA1 = SA1;
    }

    public short getDA1() {
        return DA1;
    }

    public short getDA2() {
        return DA2;
    }

    public short getSNA() {
        return SNA;
    }

    public short getSA1() {
        return SA1;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        HandshakeRes _value  = this;

        // Simple field (DA1)
        lengthInBits += 8;

        // Simple field (DA2)
        lengthInBits += 8;

        // Simple field (SNA)
        lengthInBits += 8;

        // Simple field (SA1)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<FinsPacket, FinsPacket> getMessageIO() {
        return new FinsPacketIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof HandshakeRes)) {
            return false;
        }
        HandshakeRes that = (HandshakeRes) o;
        return
            (getDA1() == that.getDA1()) &&
            (getDA2() == that.getDA2()) &&
            (getSNA() == that.getSNA()) &&
            (getSA1() == that.getSA1()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getDA1(),
            getDA2(),
            getSNA(),
            getSA1()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("DA1", getDA1())
            .append("DA2", getDA2())
            .append("SNA", getSNA())
            .append("SA1", getSA1())
            .toString();
    }

}
