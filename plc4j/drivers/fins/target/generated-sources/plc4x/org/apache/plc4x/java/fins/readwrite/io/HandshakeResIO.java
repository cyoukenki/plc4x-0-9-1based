/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.fins.readwrite.*;
import org.apache.plc4x.java.fins.readwrite.io.*;
import org.apache.plc4x.java.fins.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class HandshakeResIO implements MessageIO<HandshakeRes, HandshakeRes> {

    private static final Logger LOGGER = LoggerFactory.getLogger(HandshakeResIO.class);

    @Override
    public HandshakeRes parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (HandshakeRes) new FinsPacketIO().parse(readBuffer, args);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, HandshakeRes value, Object... args) throws ParseException {
        new FinsPacketIO().serialize(writeBuffer, value, args);
    }

    public static HandshakeResBuilder staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("HandshakeRes");
        int startPos = readBuffer.getPos();
        int curPos;


        // Simple Field (DA1)
short DA1 = readBuffer.readUnsignedShort("DA1", 8) ;

        // Simple Field (DA2)
short DA2 = readBuffer.readUnsignedShort("DA2", 8) ;

        // Simple Field (SNA)
short SNA = readBuffer.readUnsignedShort("SNA", 8) ;

        // Simple Field (SA1)
short SA1 = readBuffer.readUnsignedShort("SA1", 8) ;
        readBuffer.closeContext("HandshakeRes");
        // Create the instance
        return new HandshakeResBuilder(DA1, DA2, SNA, SA1);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, HandshakeRes _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("HandshakeRes");

        // Simple Field (DA1)
        short DA1 = (short) _value.getDA1();
        writeBuffer.writeUnsignedShort("DA1", 8, ((Number) (DA1)).shortValue());

        // Simple Field (DA2)
        short DA2 = (short) _value.getDA2();
        writeBuffer.writeUnsignedShort("DA2", 8, ((Number) (DA2)).shortValue());

        // Simple Field (SNA)
        short SNA = (short) _value.getSNA();
        writeBuffer.writeUnsignedShort("SNA", 8, ((Number) (SNA)).shortValue());

        // Simple Field (SA1)
        short SA1 = (short) _value.getSA1();
        writeBuffer.writeUnsignedShort("SA1", 8, ((Number) (SA1)).shortValue());
        writeBuffer.popContext("HandshakeRes");
    }

    public static class HandshakeResBuilder implements FinsPacketIO.FinsPacketBuilder {
        private final short DA1;
        private final short DA2;
        private final short SNA;
        private final short SA1;

        public HandshakeResBuilder(short DA1, short DA2, short SNA, short SA1) {
            this.DA1 = DA1;
            this.DA2 = DA2;
            this.SNA = SNA;
            this.SA1 = SA1;
        }

        public HandshakeRes build(long errorCode, short ICF, short RSV, short GCT, short DNA) {
            return new HandshakeRes(errorCode, ICF, RSV, GCT, DNA, DA1, DA2, SNA, SA1);
        }
    }

}
