/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.fins.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.fins.readwrite.*;
import org.apache.plc4x.java.fins.readwrite.io.*;
import org.apache.plc4x.java.fins.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class FinsPacketIO implements MessageIO<FinsPacket, FinsPacket> {

    private static final Logger LOGGER = LoggerFactory.getLogger(FinsPacketIO.class);

    @Override
    public FinsPacket parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return FinsPacketIO.staticParse(readBuffer);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, FinsPacket value, Object... args) throws ParseException {
        FinsPacketIO.staticSerialize(writeBuffer, value);
    }

    public static FinsPacket staticParse(ReadBuffer readBuffer) throws ParseException {
        readBuffer.pullContext("FinsPacket");
        int startPos = readBuffer.getPos();
        int curPos;

        // Const Field (finsHeader)
        long finsHeader = readBuffer.readUnsignedLong("finsHeader", 32);
        if(finsHeader != FinsPacket.FINSHEADER) {
            throw new ParseException("Expected constant value " + FinsPacket.FINSHEADER + " but got " + finsHeader);
        }

        // Implicit Field (len) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        long len = readBuffer.readUnsignedLong("len", 32);

        // Discriminator Field (command) (Used as input to a switch field)
        long command = readBuffer.readUnsignedLong("command", 32);



        // Simple Field (errorCode)
long errorCode = readBuffer.readUnsignedLong("errorCode", 32) ;

        // Simple Field (ICF)
short ICF = readBuffer.readUnsignedShort("ICF", 8) ;

        // Simple Field (RSV)
short RSV = readBuffer.readUnsignedShort("RSV", 8) ;

        // Simple Field (GCT)
short GCT = readBuffer.readUnsignedShort("GCT", 8) ;

        // Simple Field (DNA)
short DNA = readBuffer.readUnsignedShort("DNA", 8) ;
        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        FinsPacketBuilder builder = null;
                if(EvaluationHelper.equals(command, 0x00000000)) {
            builder = HandshakeReqIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, 0x00000001)) {
            builder = HandshakeResIO.staticParse(readBuffer);
        } else 
                if(EvaluationHelper.equals(command, 0x00000002)) {
            builder = CommunicationMessageIO.staticParse(readBuffer, len);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("FinsPacket");
        // Create the instance
        return builder.build(errorCode, ICF, RSV, GCT, DNA);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, FinsPacket _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("FinsPacket");

        // Const Field (finsHeader)
        writeBuffer.writeUnsignedLong("finsHeader", 32, ((Number) 0x46494E53).longValue());

        // Implicit Field (len) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        long len = (long) ((_value.getLengthInBytes()) - (8));
        writeBuffer.writeUnsignedLong("len", 32, ((Number) (len)).longValue());

        // Discriminator Field (command) (Used as input to a switch field)
        long command = (long) _value.getCommand();
            writeBuffer.writeUnsignedLong("command", 32, ((Number) (command)).longValue());

        // Simple Field (errorCode)
        long errorCode = (long) _value.getErrorCode();
        writeBuffer.writeUnsignedLong("errorCode", 32, ((Number) (errorCode)).longValue());

        // Simple Field (ICF)
        short ICF = (short) _value.getICF();
        writeBuffer.writeUnsignedShort("ICF", 8, ((Number) (ICF)).shortValue());

        // Simple Field (RSV)
        short RSV = (short) _value.getRSV();
        writeBuffer.writeUnsignedShort("RSV", 8, ((Number) (RSV)).shortValue());

        // Simple Field (GCT)
        short GCT = (short) _value.getGCT();
        writeBuffer.writeUnsignedShort("GCT", 8, ((Number) (GCT)).shortValue());

        // Simple Field (DNA)
        short DNA = (short) _value.getDNA();
        writeBuffer.writeUnsignedShort("DNA", 8, ((Number) (DNA)).shortValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof HandshakeReq) {
            HandshakeReqIO.staticSerialize(writeBuffer, (HandshakeReq) _value);
        } else 
        if(_value instanceof HandshakeRes) {
            HandshakeResIO.staticSerialize(writeBuffer, (HandshakeRes) _value);
        } else 
        if(_value instanceof CommunicationMessage) {
            CommunicationMessageIO.staticSerialize(writeBuffer, (CommunicationMessage) _value);
        }
        writeBuffer.popContext("FinsPacket");
    }

    public static interface FinsPacketBuilder {
        FinsPacket build(long errorCode, short ICF, short RSV, short GCT, short DNA);
    }

}
