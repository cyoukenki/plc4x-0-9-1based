/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.abeth.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.abeth.readwrite.io.*;
import org.apache.plc4x.java.abeth.readwrite.types.*;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.Message;
import org.apache.plc4x.java.spi.generation.MessageIO;

import java.time.*;
import java.util.*;
import java.math.BigInteger;

// Code generated by code-generation. DO NOT EDIT.

public class DF1RequestProtectedTypedLogicalRead extends DF1RequestCommand implements Message {

    // Accessors for discriminator values.
    public Short getFunctionCode() {
        return 0xA2;
    }

    // Properties.
    private final short byteSize;
    private final short fileNumber;
    private final short fileType;
    private final short elementNumber;
    private final short subElementNumber;

    public DF1RequestProtectedTypedLogicalRead(short byteSize, short fileNumber, short fileType, short elementNumber, short subElementNumber) {
        this.byteSize = byteSize;
        this.fileNumber = fileNumber;
        this.fileType = fileType;
        this.elementNumber = elementNumber;
        this.subElementNumber = subElementNumber;
    }

    public short getByteSize() {
        return byteSize;
    }

    public short getFileNumber() {
        return fileNumber;
    }

    public short getFileType() {
        return fileType;
    }

    public short getElementNumber() {
        return elementNumber;
    }

    public short getSubElementNumber() {
        return subElementNumber;
    }

    @Override
    public int getLengthInBytes() {
        return getLengthInBits() / 8;
    }

    @Override
    public int getLengthInBits() {
        return getLengthInBitsConditional(false);
    }

    public int getLengthInBitsConditional(boolean lastItem) {
        int lengthInBits = super.getLengthInBitsConditional(lastItem);
        DF1RequestProtectedTypedLogicalRead _value  = this;

        // Simple field (byteSize)
        lengthInBits += 8;

        // Simple field (fileNumber)
        lengthInBits += 8;

        // Simple field (fileType)
        lengthInBits += 8;

        // Simple field (elementNumber)
        lengthInBits += 8;

        // Simple field (subElementNumber)
        lengthInBits += 8;

        return lengthInBits;
    }

    @Override
    public MessageIO<DF1RequestCommand, DF1RequestCommand> getMessageIO() {
        return new DF1RequestCommandIO();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DF1RequestProtectedTypedLogicalRead)) {
            return false;
        }
        DF1RequestProtectedTypedLogicalRead that = (DF1RequestProtectedTypedLogicalRead) o;
        return
            (getByteSize() == that.getByteSize()) &&
            (getFileNumber() == that.getFileNumber()) &&
            (getFileType() == that.getFileType()) &&
            (getElementNumber() == that.getElementNumber()) &&
            (getSubElementNumber() == that.getSubElementNumber()) &&
            super.equals(that) &&
            true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            super.hashCode(),
            getByteSize(),
            getFileNumber(),
            getFileType(),
            getElementNumber(),
            getSubElementNumber()
        );
    }

    @Override
    public String toString() {
        return toString(ToStringStyle.SHORT_PREFIX_STYLE);
    }

    public String toString(ToStringStyle style) {
        return new ToStringBuilder(this, style)
            .appendSuper(super.toString(style))
            .append("byteSize", getByteSize())
            .append("fileNumber", getFileNumber())
            .append("fileType", getFileType())
            .append("elementNumber", getElementNumber())
            .append("subElementNumber", getSubElementNumber())
            .toString();
    }

}
