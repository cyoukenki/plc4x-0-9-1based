/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.abeth.readwrite.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.abeth.readwrite.*;
import org.apache.plc4x.java.abeth.readwrite.io.*;
import org.apache.plc4x.java.abeth.readwrite.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DF1ResponseMessageIO implements MessageIO<DF1ResponseMessage, DF1ResponseMessage> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DF1ResponseMessageIO.class);

    @Override
    public DF1ResponseMessage parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        if((args == null) || (args.length != 1)) {
            throw new PlcRuntimeException("Wrong number of arguments, expected 1, but got " + args.length);
        }
        Integer payloadLength;
        if(args[0] instanceof Integer) {
            payloadLength = (Integer) args[0];
        } else if (args[0] instanceof String) {
            payloadLength = Integer.valueOf((String) args[0]);
        } else {
            throw new PlcRuntimeException("Argument 0 expected to be of type Integer or a string which is parseable but was " + args[0].getClass().getName());
        }
        return DF1ResponseMessageIO.staticParse(readBuffer, payloadLength);
    }

    @Override
    public void serialize(WriteBuffer writeBuffer, DF1ResponseMessage value, Object... args) throws ParseException {
        DF1ResponseMessageIO.staticSerialize(writeBuffer, value);
    }

    public static DF1ResponseMessage staticParse(ReadBuffer readBuffer, Integer payloadLength) throws ParseException {
        readBuffer.pullContext("DF1ResponseMessage");
        int startPos = readBuffer.getPos();
        int curPos;

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }


        // Simple Field (destinationAddress)
short destinationAddress = readBuffer.readUnsignedShort("destinationAddress", 8) ;

        // Simple Field (sourceAddress)
short sourceAddress = readBuffer.readUnsignedShort("sourceAddress", 8) ;
        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            short reserved = readBuffer.readUnsignedShort("reserved", 8);
            if(reserved != (short) 0x00) {
                LOGGER.info("Expected constant value " + 0x00 + " but got " + reserved + " for reserved field.");
            }
        }

        // Discriminator Field (commandCode) (Used as input to a switch field)
        short commandCode = readBuffer.readUnsignedShort("commandCode", 8);



        // Simple Field (status)
short status = readBuffer.readUnsignedShort("status", 8) ;

        // Simple Field (transactionCounter)
int transactionCounter = readBuffer.readUnsignedInt("transactionCounter", 16) ;
        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        DF1ResponseMessageBuilder builder = null;
                if(EvaluationHelper.equals(commandCode, 0x4F)) {
            builder = DF1CommandResponseMessageProtectedTypedLogicalReadIO.staticParse(readBuffer, payloadLength, status);
        }
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }

        readBuffer.closeContext("DF1ResponseMessage");
        // Create the instance
        return builder.build(destinationAddress, sourceAddress, status, transactionCounter);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, DF1ResponseMessage _value) throws ParseException {
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("DF1ResponseMessage");

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Simple Field (destinationAddress)
        short destinationAddress = (short) _value.getDestinationAddress();
        writeBuffer.writeUnsignedShort("destinationAddress", 8, ((Number) (destinationAddress)).shortValue());

        // Simple Field (sourceAddress)
        short sourceAddress = (short) _value.getSourceAddress();
        writeBuffer.writeUnsignedShort("sourceAddress", 8, ((Number) (sourceAddress)).shortValue());

        // Reserved Field (reserved)
        writeBuffer.writeUnsignedShort("reserved", 8, ((Number) (short) 0x00).shortValue());

        // Discriminator Field (commandCode) (Used as input to a switch field)
        short commandCode = (short) _value.getCommandCode();
            writeBuffer.writeUnsignedShort("commandCode", 8, ((Number) (commandCode)).shortValue());

        // Simple Field (status)
        short status = (short) _value.getStatus();
        writeBuffer.writeUnsignedShort("status", 8, ((Number) (status)).shortValue());

        // Simple Field (transactionCounter)
        int transactionCounter = (int) _value.getTransactionCounter();
        writeBuffer.writeUnsignedInt("transactionCounter", 16, ((Number) (transactionCounter)).intValue());

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        if(_value instanceof DF1CommandResponseMessageProtectedTypedLogicalRead) {
            DF1CommandResponseMessageProtectedTypedLogicalReadIO.staticSerialize(writeBuffer, (DF1CommandResponseMessageProtectedTypedLogicalRead) _value);
        }
        writeBuffer.popContext("DF1ResponseMessage");
    }

    public static interface DF1ResponseMessageBuilder {
        DF1ResponseMessage build(short destinationAddress, short sourceAddress, short status, int transactionCounter);
    }

}
